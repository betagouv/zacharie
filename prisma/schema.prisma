generator client {
  provider = "prisma-client-js"
}

// generator zod {
//   provider                         = "zod-prisma-types"
//   // output                           = "./generated/zod" // default is ./generated/zod
//   // prismaClientPath                 = "./path/to/prisma/client" // default is client output path
//   useMultipleFiles                 = false // default is false
//   writeBarrelFiles                 = false // default is true
//   createInputTypes                 = false // default is true
//   createModelTypes                 = true // default is true
//   addInputTypeValidation           = false // default is true
//   addIncludeType                   = false // default is true
//   addSelectType                    = false // default is true
//   validateWhereUniqueInput         = false // default is true
//   createOptionalDefaultValuesTypes = false // default is false
//   createRelationValuesTypes        = false // default is false
//   createPartialTypes               = false // default is false
//   useDefaultValidators             = true // default is true
//   coerceDate                       = true // default is true
//   writeNullishInModelTypes         = false // default is false
// }

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_ADDON_URI")
}

// Tous les rôles possibles pour un utilisateur au contact de la venaison (gibier)
enum UserRoles {
  ADMIN
  EXAMINATEUR_INITIAL
  PREMIER_DETENTEUR // un chasseur, une association de chasse, une structure professionnelle de chasse qui se charge d'indiquer le destinataire final du gibier
  CCG // Centre de Collecte du Gibier sauvage où sont entreposées les venaisons à la fin de la chasse
  COLLECTEUR_PRO // Transporteur de Gibier
  //Destinataires finaux du gibier
  ETG // Etablissement de Traitement du Gibier sauvage
  SVI // Service Vétérinaire d'Inspection
  // COMMERCE_DE_DETAIL // Commerce de détail
  // REPAS_DE_CHASSE_OU_ASSOCIATIF // Repas de chasse ou associatif
  // CONSOMMATEUR_FINAL // Je chasse pour ma consommation personnelle
  // BOUCHER
  // RESTAURATEUR
}

enum UserNotifications {
  EMAIL
  SMS
  PUSH
}

model User {
  id                             String                  @id // new ShortUniqueId({ length: 5, dictionary: "alphanum_upper" }).randomUUID() so that we can use it in FEI numbers (36^5 = 60M possibilities)
  email                          String?                 @unique // email is optional, we can have users without email like the Collecteur Pro
  telephone                      String?
  prenom                         String?
  nom_de_famille                 String?
  numero_cfei                    String? // Chasseur Formé à l'Examen Initial (de la forme CFEI-DEP-YY-001)
  // numero_frei               String? // Formateur Référent Examen Initial (de la forme DEP-FREI-YY-001)
  addresse_ligne_1               String?
  addresse_ligne_2               String?
  code_postal                    String?
  ville                          String?
  user_entities_vivible_checkbox Boolean?
  roles                          UserRoles[]
  created_at                     DateTime                @default(now())
  updated_at                     DateTime                @default(now()) @updatedAt
  last_login_at                  DateTime?
  last_seen_at                   DateTime?
  deleted_at                     DateTime?
  onboarded_at                   DateTime?
  notifications                  UserNotifications[]     @default([EMAIL, PUSH])
  web_push_tokens                String[]
  prefilled                      Boolean                 @default(false)
  activated                      Boolean                 @default(false)
  Password                       Password?
  UserRelationsAsOwner           UserRelations[]         @relation("UserOwnerOfUserRelation")
  UserRelationsAsRelated         UserRelations[]         @relation("UserRelatedOfUserRelation")
  EntitiesRelations              EntityRelations[]       @relation("UserRelatedWithEntity")
  FeiCreatedByUser               Fei[]                   @relation("FeiCreatedByUser")
  FeiCurrentUser                 Fei[]                   @relation("FeiCurrentUser")
  FeiPremierDetenteurUser        Fei[]                   @relation("FeiPremierDetenteurUser")
  FeiExaminateurInitialUser      Fei[]                   @relation("FeiExaminateurInitialUser")
  FeiSviUser                     Fei[]                   @relation("FeiSviUser")
  FeiIntermediaireUser           FeiIntermediaire[]      @relation("FeiIntermediaireUser")
  Logs                           Logs[]
  NotificationLog                NotificationLog[]
  CarcasseIntermediaire          CarcasseIntermediaire[] @relation("CarcasseIntermediaireUser")
  FeiNextUser                    Fei[]                   @relation("FeiNextUser")
  InterventionOnFei              InterventionOnFei[]

  @@index([id]) // New: Added for faster user lookups
  @@index([email]) // Modified: Simplified from the composite index
  @@index([onboarded_at]) // New: Added based on loader query
}

enum EntityTypes {
  COLLECTEUR_PRO
  CCG
  ETG
  SVI
  // COMMERCE_DE_DETAIL
  // REPAS_DE_CHASSE_OU_ASSOCIATIF
  // BOUCHER
  // RESTAURATEUR
}

model Entity {
  id                     String                  @id @default(uuid())
  // NO EMAIL: an entity needs AT LEAST one user
  raison_sociale         String?
  address_ligne_1        String?
  address_ligne_2        String?
  code_postal            String?
  ville                  String?
  siret                  String?
  numero_ddecpp          String?                 @unique
  type                   EntityTypes
  created_at             DateTime                @default(now())
  updated_at             DateTime                @default(now()) @updatedAt
  deleted_at             DateTime?
  onboarded_at           DateTime?
  coupled_entity_id      String?                 @unique
  prefilled              Boolean                 @default(false)
  EntityRelatedWithUser  EntityRelations[]       @relation("EntityRelatedWithUser")
  FeiCurrentEntity       Fei[]                   @relation("FeiCurrentEntity")
  FeiNextEntity          Fei[]                   @relation("FeiNextEntity")
  FeiDepotEntity         Fei[]                   @relation("FeiDepotEntity")
  FeiSviEntity           Fei[]                   @relation("FeiSviEntity")
  FeiIntermediaireEntity FeiIntermediaire[]      @relation("FeiIntermediaireEntity")
  CarcasseIntermediaire  CarcasseIntermediaire[] @relation("CarcasseIntermediaireEntity")
  CoupledEntity          Entity?                 @relation("CoupledEntity", fields: [coupled_entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CoupledEntity_opposite Entity?                 @relation("CoupledEntity")
  InterventionOnFei      InterventionOnFei[]
}

model Password {
  // cascade delete
  id         String    @id @default(uuid())
  user_id    String    @unique
  password   String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
  User       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([user_id])
}

enum UserRelationType {
  PREMIER_DETENTEUR // a user working with this relation as a detenteur initial
  EXAMINATEUR_INITIAL // a user working with this relation as an examinateur initial
}

model UserRelations {
  id                        String           @id @default(uuid())
  owner_id                  String
  related_id                String
  relation                  UserRelationType
  created_at                DateTime         @default(now())
  updated_at                DateTime         @default(now()) @updatedAt
  deleted_at                DateTime?
  UserOwnerOfUserRelation   User             @relation("UserOwnerOfUserRelation", fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserRelatedOfUserRelation User             @relation("UserRelatedOfUserRelation", fields: [related_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([owner_id, relation])
}

enum EntityRelationType {
  WORKING_FOR // a user working for the entity
  WORKING_WITH // a user working with the entity
}

model EntityRelations {
  id                    String             @id @default(uuid())
  owner_id              String
  entity_id             String
  relation              EntityRelationType
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now()) @updatedAt
  deleted_at            DateTime?
  UserRelatedWithEntity User               @relation("UserRelatedWithEntity", fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  EntityRelatedWithUser Entity             @relation("EntityRelatedWithUser", fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([owner_id, relation])
  @@index([entity_id, relation])
  @@index([owner_id, entity_id]) // Add: Used in nested queries for FeiNextEntity
}

model Logs {
  id         String    @id @default(uuid())
  user_id    String
  action     String // login, logout, password_change, user_update, user_create, user_delete, fei_created, etc
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
  User       User?     @relation(fields: [user_id], references: [id])

  @@index([user_id, action])
}

// Fiche d'Examen Initial
model Fei {
  id                                                      Int                     @id @default(autoincrement())
  numero                                                  String                  @unique
  date_mise_a_mort                                        DateTime?               @db.Date // et éviscération
  commune_mise_a_mort                                     String?
  created_by_user_id                                      String
  fei_current_owner_user_id                               String?
  fei_current_owner_entity_id                             String?
  fei_current_owner_role                                  UserRoles?
  fei_current_owner_wants_to_transfer                     Boolean?
  fei_next_owner_user_id                                  String?
  fei_next_owner_entity_id                                String?
  fei_next_owner_role                                     UserRoles?
  fei_prev_owner_user_id                                  String?
  fei_prev_owner_entity_id                                String?
  fei_prev_owner_role                                     UserRoles?
  examinateur_initial_user_id                             String?
  examinateur_initial_approbation_mise_sur_le_marche      Boolean?
  examinateur_initial_date_approbation_mise_sur_le_marche DateTime?
  premier_detenteur_user_id                               String?
  premier_detenteur_date_depot_quelque_part               DateTime?
  premier_detenteur_depot_entity_id                       String?
  premier_detenteur_depot_sauvage                         String?
  svi_entity_id                                           String?
  svi_user_id                                             String?
  svi_carcasses_saisies                                   Int?
  svi_aucune_carcasse_saisie                              Boolean?
  svi_commentaire                                         String?
  svi_signed_at                                           DateTime?
  created_at                                              DateTime                @default(now())
  updated_at                                              DateTime                @default(now()) @updatedAt
  deleted_at                                              DateTime?
  Carcasses                                               Carcasse[]
  FeiCreatedByUser                                        User                    @relation("FeiCreatedByUser", fields: [created_by_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiPremierDetenteurUser                                 User?                   @relation("FeiPremierDetenteurUser", fields: [premier_detenteur_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiExaminateurInitialUser                               User?                   @relation("FeiExaminateurInitialUser", fields: [examinateur_initial_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiDepotEntity                                          Entity?                 @relation("FeiDepotEntity", fields: [premier_detenteur_depot_entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiSviEntity                                            Entity?                 @relation("FeiSviEntity", fields: [svi_entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiSviUser                                              User?                   @relation("FeiSviUser", fields: [svi_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiIntermediaires                                       FeiIntermediaire[]
  FeiCurrentUser                                          User?                   @relation("FeiCurrentUser", fields: [fei_current_owner_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiCurrentEntity                                        Entity?                 @relation("FeiCurrentEntity", fields: [fei_current_owner_entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiNextEntity                                           Entity?                 @relation("FeiNextEntity", fields: [fei_next_owner_entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiNextUser                                             User?                   @relation("FeiNextUser", fields: [fei_next_owner_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CarcasseIntermediaire                                   CarcasseIntermediaire[]
  InterventionOnFei                                       InterventionOnFei[]

  @@index([created_by_user_id])
  @@index([premier_detenteur_user_id])
  @@index([examinateur_initial_user_id])
  @@index([svi_signed_at])
  @@index([fei_next_owner_user_id])
  @@index([fei_next_owner_entity_id])
  @@index([fei_current_owner_user_id])
  @@index([fei_current_owner_entity_id])
  @@index([updated_at])
}

enum CarcasseType {
  PETIT_GIBIER
  GROS_GIBIER
}

model Carcasse {
  numero_bracelet                               String                  @id
  fei_numero                                    String
  type                                          CarcasseType?
  nombre_d_animaux                              Int?
  heure_mise_a_mort                             String?
  heure_evisceration                            String?
  espece                                        String? // Sanglier, Cerf, etc.
  categorie                                     String? // Laie, MArcassin, etc.
  examinateur_carcasse_sans_anomalie            Boolean?
  examinateur_anomalies_carcasse                String[]
  examinateur_anomalies_abats                   String[]
  examinateur_commentaire                       String?
  examinateur_signed_at                         DateTime?
  intermediaire_carcasse_refus_intermediaire_id String?
  intermediaire_carcasse_refus_motif            String?
  intermediaire_carcasse_signed_at              DateTime?
  intermediaire_carcasse_commentaire            String?
  svi_carcasse_saisie                           Boolean?
  svi_carcasse_saisie_motif                     String[]
  svi_carcasse_saisie_at                        DateTime?
  svi_carcasse_signed_at                        DateTime?
  svi_carcasse_commentaire                      String?
  created_at                                    DateTime                @default(now())
  updated_at                                    DateTime                @default(now()) @updatedAt
  deleted_at                                    DateTime?
  Fei                                           Fei                     @relation(fields: [fei_numero], references: [numero], onDelete: Cascade, onUpdate: Cascade)
  FeiIntermediairesCarcasse                     FeiIntermediaire[]      @relation("FeiIntermediairesCarcasse")
  FeiIntermediaireCarcasseRefus                 FeiIntermediaire?       @relation("FeiIntermediaireCarcasseRefus", fields: [intermediaire_carcasse_refus_intermediaire_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CarcasseIntermediaire                         CarcasseIntermediaire[]

  @@index([fei_numero, numero_bracelet])
}

model InterventionOnFei {
  id         String    @id @default(uuid())
  fei_numero String
  user_id    String
  entity_id  String
  role       UserRoles
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
  Fei        Fei       @relation(fields: [fei_numero], references: [numero], onDelete: Cascade, onUpdate: Cascade)
  User       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Entity     Entity    @relation(fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([fei_numero, user_id])
  @@index([fei_numero, entity_id])
}

model FeiIntermediaire {
  id                             String                  @id // {user_id}_{fei_numero}_{HHMMSS}
  fei_numero                     String
  fei_intermediaire_user_id      String
  fei_intermediaire_entity_id    String
  fei_intermediaire_role         UserRoles?
  commentaire                    String?
  received_at                    DateTime?
  check_finished_at              DateTime?
  handover_at                    DateTime?
  created_at                     DateTime                @default(now())
  updated_at                     DateTime                @default(now()) @updatedAt
  deleted_at                     DateTime?
  Fei                            Fei                     @relation(fields: [fei_numero], references: [numero], onDelete: Cascade, onUpdate: Cascade)
  FeiIntermediaireUser           User                    @relation("FeiIntermediaireUser", fields: [fei_intermediaire_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiIntermediaireEntity         Entity                  @relation("FeiIntermediaireEntity", fields: [fei_intermediaire_entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiIntermediairesCarcasses     Carcasse[]              @relation("FeiIntermediairesCarcasse")
  FeiIntermediaireCarcassesRefus Carcasse[]              @relation("FeiIntermediaireCarcasseRefus")
  CarcasseIntermediaire          CarcasseIntermediaire[] @relation("FeiIntermediaireCarcasseIntermediaire")

  @@index([fei_numero, fei_intermediaire_user_id]) // Modify: Focus on these two fields
  @@index([fei_intermediaire_entity_id]) // Add: Used in nested queries
}

model CarcasseIntermediaire {
  fei_numero__bracelet__intermediaire_id String           @id
  fei_numero                             String
  numero_bracelet                        String
  fei_intermediaire_id                   String
  fei_intermediaire_user_id              String
  fei_intermediaire_entity_id            String
  prise_en_charge                        Boolean?
  refus                                  String?
  commentaire                            String?
  carcasse_check_finished_at             DateTime?
  created_at                             DateTime         @default(now())
  updated_at                             DateTime         @default(now()) @updatedAt
  deleted_at                             DateTime?
  CarcasseIntermediaireFei               Fei              @relation(fields: [fei_numero], references: [numero], onDelete: Cascade, onUpdate: Cascade)
  CarcasseCarcasseIntermediaire          Carcasse         @relation(fields: [numero_bracelet], references: [numero_bracelet], onDelete: Cascade, onUpdate: Cascade)
  CarcasseIntermediaireUser              User             @relation("CarcasseIntermediaireUser", fields: [fei_intermediaire_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CarcasseIntermediaireEntity            Entity           @relation("CarcasseIntermediaireEntity", fields: [fei_intermediaire_entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CarcasseIntermediaireFeiIntermediaire  FeiIntermediaire @relation("FeiIntermediaireCarcasseIntermediaire", fields: [fei_intermediaire_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([fei_numero__bracelet__intermediaire_id])
}

model NotificationLog {
  id             String            @id @default(uuid())
  type           UserNotifications
  email          String?
  web_push_token String?
  user_id        String
  action         String
  payload        String
  created_at     DateTime          @default(now())
  updated_at     DateTime          @default(now()) @updatedAt
  deleted_at     DateTime?
  User           User?             @relation(fields: [user_id], references: [id])

  @@index([user_id, action])
}
