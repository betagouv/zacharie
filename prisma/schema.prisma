generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_ADDON_URI")
}

// Tous les rôles possibles pour un utilisateur au contact de la venaison (gibier)
enum UserRoles {
  ADMIN
  EXAMINATEUR_INITIAL
  DETENTEUR_INITIAL // un chasseur, une association de chasse, une structure professionnelle de chasse qui se charge d'indiquer le destinataire final du gibier
  EXPLOITANT_CENTRE_COLLECTE // Exploitant de Centre de Collecte de Gibier où sont entreposées les venaisons à la fin de la chasse
  COLLECTEUR_PRO // Transporteur de Gibier
  //Destinataires finaux du gibier
  ETG // Etablissement de Traitement du Gibier
  SVI // Service Vétérinaire d'Inspection
  // COMMERCE_DE_DETAIL // Commerce de détail
  // REPAS_DE_CHASSE_OU_ASSOCIATIF // Repas de chasse ou associatif
  // CONSOMMATEUR_FINAL // Je chasse pour ma consommation personnelle
  // BOUCHER
  // RESTAURATEUR
}

enum UserNotifications {
  EMAIL
  SMS
  PUSH
}

model User {
  id                              String              @id @default(uuid())
  email                           String?             @unique // email is optional, we can have users without email like the Collecteur Pro
  telephone                       String?
  prenom                          String?
  nom_de_famille                  String?
  numero_cfei                     String? // Chasseur Formé à l'Examen Initial (de la form CFEI-DEP-YY-001)
  numero_frei                     String? // Formateur Référent Examen Initial (de la form DEP-FREI-YY-001)
  addresse_ligne_1                String?
  addresse_ligne_2                String?
  code_postal                     String?
  ville                           String?
  roles                           UserRoles[]
  created_at                      DateTime            @default(now())
  updated_at                      DateTime            @default(now()) @updatedAt
  last_login_at                   DateTime?
  last_seen_at                    DateTime?
  deleted_at                      DateTime?
  onboarded_at                    DateTime?
  notifications                   UserNotifications[]
  web_push_tokens                 String[]
  prefilled                       Boolean             @default(false)
  Password                        Password?
  UserRelationAsOwner             UserRelations[]     @relation("UserRelationAsOwner")
  UserRelationsRelated            UserRelations[]     @relation("UserRelationAsRelated")
  UserEntityRelations             EntityRelations[]   @relation("UserRelatedWithEntity")
  FeiCreatedByUser                Fei[]               @relation("FeiCreatedByUser")
  FeiDetenteurInitialUser         Fei[]               @relation("FeiDetenteurInitialUser")
  FeiExaminateurInitialUser       Fei[]               @relation("FeiExaminateurInitialUser")
  FeiExploitantCentreCollecteUser Fei[]               @relation("FeiExploitantCentreCollecteUser")
  FeiCollecteurProUser            Fei[]               @relation("FeiCollecteurProUser")
  FeiEtgUser                      Fei[]               @relation("FeiEtgUser")
  FeiSviUser                      Fei[]               @relation("FeiSviUser")
  Logs                            Logs[]
  NotificationLog                 NotificationLog[]

  @@index([email, prenom, nom_de_famille, roles])
}

enum EntityTypes {
  COLLECTEUR_PRO
  EXPLOITANT_CENTRE_COLLECTE
  ETG
  SVI
  // COMMERCE_DE_DETAIL
  // REPAS_DE_CHASSE_OU_ASSOCIATIF
  // BOUCHER
  // RESTAURATEUR
}

model Entity {
  id                                String            @id @default(uuid())
  // NO EMAIL: an entity needs AT LEAST one user
  raison_sociale                    String?
  address_ligne_1                   String?
  address_ligne_2                   String?
  code_postal                       String?
  ville                             String?
  siret                             String?
  numero_ddecpp                     String?
  type                              EntityTypes
  created_at                        DateTime          @default(now())
  updated_at                        DateTime          @default(now()) @updatedAt
  deleted_at                        DateTime?
  onboarded_at                      DateTime?
  prefilled                         Boolean           @default(false)
  EntityRelatedWithUser             EntityRelations[] @relation("EntityRelatedWithUser")
  FeiExploitantCentreCollecteEntity Fei[]             @relation("FeiExploitantCentreCollecteEntity")
  FeiCollecteurProEntity            Fei[]             @relation("FeiCollecteurProEntity")
  FeiEtgEntity                      Fei[]             @relation("FeiEtgEntity")
  FeiSviEntity                      Fei[]             @relation("FeiSviEntity")
}

model Password {
  // cascade delete
  id         String    @id @default(uuid())
  user_id    String    @unique
  password   String
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
  User       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

enum UserRelationType {
  DETENTEUR_INITIAL // a user working with this relation as a detenteur initial
  EXAMINATEUR_INITIAL // a user working with this relation as an examinateur initial
}

model UserRelations {
  id                    String           @id @default(uuid())
  owner_id              String
  related_id            String
  relation              UserRelationType
  created_at            DateTime         @default(now())
  updated_at            DateTime         @default(now()) @updatedAt
  deleted_at            DateTime?
  UserRelationAsOwner   User             @relation("UserRelationAsOwner", fields: [owner_id], references: [id], onDelete: Cascade)
  UserRelationAsRelated User             @relation("UserRelationAsRelated", fields: [related_id], references: [id], onDelete: Cascade)

  @@index([owner_id, relation])
}

enum EntityRelationType {
  WORKING_FOR // a user working for the entity
  WORKING_WITH // a user working with the entity
}

model EntityRelations {
  id                    String             @id @default(uuid())
  owner_id              String
  entity_id             String
  relation              EntityRelationType
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now()) @updatedAt
  deleted_at            DateTime?
  UserRelatedWithEntity User               @relation("UserRelatedWithEntity", fields: [owner_id], references: [id], onDelete: Cascade)
  EntityRelatedWithUser Entity             @relation("EntityRelatedWithUser", fields: [entity_id], references: [id], onDelete: Cascade)

  @@index([owner_id, relation])
  @@index([entity_id, relation])
}

model Logs {
  id         String    @id @default(uuid())
  user_id    String
  action     String // login, logout, password_change, user_update, user_create, user_delete, fei_created, etc
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?
  User       User?     @relation(fields: [user_id], references: [id])

  @@index([user_id, action])
}

// Fiche d'Examen Initial
model Fei {
  id                                                      Int        @id @default(autoincrement())
  numero                                                  String     @unique
  date_mise_a_mort                                        DateTime?  @db.Date // et éviscération
  commune_mise_a_mort                                     String?
  created_by_user_id                                      String
  examinateur_initial_user_id                             String?
  examinateur_initial_approbation_mise_sur_le_marche      Boolean?
  examinateur_initial_date_approbation_mise_sur_le_marche DateTime?
  detenteur_initial_user_id                               String?
  date_depot_centre_collecte                              DateTime?
  exploitant_centre_collecte_entity_id                    String?
  exploitant_centre_collecte_user_id                      String?
  exploitant_centre_collecte_commentaire                  String?
  date_prise_en_charge_collecteur_pro                     DateTime?
  collecteur_pro_entity_id                                String?
  collecteur_pro_user_id                                  String?
  collecteur_pro_commentaire                              String?
  date_prise_en_charge_etg                                DateTime?
  etg_entity_id                                           String?
  etg_user_id                                             String?
  etg_commentaire                                         String?
  date_prise_en_charge_svi                                DateTime?
  svi_entity_id                                           String?
  svi_user_id                                             String?
  svi_carcasses_saisies                                   Int?
  svi_aucune_carcasse_saisie                              Boolean?
  svi_commentaire                                         String?
  svi_signed_at                                           DateTime?
  created_at                                              DateTime   @default(now())
  updated_at                                              DateTime   @default(now()) @updatedAt
  deleted_at                                              DateTime?
  Carcasse                                                Carcasse[]
  FeiCreatedByUser                                        User       @relation("FeiCreatedByUser", fields: [created_by_user_id], references: [id])
  FeiDetenteurInitialUser                                 User?      @relation("FeiDetenteurInitialUser", fields: [detenteur_initial_user_id], references: [id])
  FeiExaminateurInitialUser                               User?      @relation("FeiExaminateurInitialUser", fields: [examinateur_initial_user_id], references: [id])
  FeiExploitantCentreCollecteEntity                       Entity?    @relation("FeiExploitantCentreCollecteEntity", fields: [exploitant_centre_collecte_entity_id], references: [id])
  FeiExploitantCentreCollecteUser                         User?      @relation("FeiExploitantCentreCollecteUser", fields: [exploitant_centre_collecte_user_id], references: [id])
  FeiCollecteurProEntity                                  Entity?    @relation("FeiCollecteurProEntity", fields: [collecteur_pro_entity_id], references: [id])
  FeiCollecteurProUser                                    User?      @relation("FeiCollecteurProUser", fields: [collecteur_pro_user_id], references: [id])
  FeiEtgEntity                                            Entity?    @relation("FeiEtgEntity", fields: [etg_entity_id], references: [id])
  FeiEtgUser                                              User?      @relation("FeiEtgUser", fields: [etg_user_id], references: [id])
  FeiSviEntity                                            Entity?    @relation("FeiSviEntity", fields: [svi_entity_id], references: [id])
  FeiSviUser                                              User?      @relation("FeiSviUser", fields: [svi_user_id], references: [id])

  @@index([created_by_user_id])
  @@index([detenteur_initial_user_id])
  @@index([examinateur_initial_user_id])
  @@index([exploitant_centre_collecte_entity_id])
  @@index([exploitant_centre_collecte_user_id])
  @@index([collecteur_pro_entity_id])
  @@index([collecteur_pro_user_id])
  @@index([etg_entity_id])
  @@index([etg_user_id])
  @@index([svi_entity_id])
  @@index([svi_user_id])
}

model Carcasse {
  id                                      String    @id @default(uuid())
  fei_id                                  Int
  numero_bracelet                         String    @unique
  heure_mise_a_mort                       DateTime  @db.Time
  heure_evisceration                      DateTime  @db.Time
  examinateur_carcasse_sans_anomalie      Boolean?
  examinateur_anomalies_carcasse          String[]
  examinateur_abats_sans_anomalie         Boolean?
  examinateur_anomalies_abats             String[]
  examinateur_commentaire                 String?
  examinateur_refus                       Boolean?
  examinateur_signed_at                   DateTime?
  exploitant_cc_carcasse_prise_en_charge  Boolean?
  exploitant_cc_carcasse_refus_motif      String?
  exploitant_cc_carcasse_signed_at        DateTime?
  exploitant_cc_carcasse_commentaire      String?
  collecteur_pro_carcasse_prise_en_charge Boolean?
  collecteur_pro_carcasse_refus_motif     String?
  collecteur_pro_carcasse_signed_at       DateTime?
  collecteur_pro_carcasse_commentaire     String?
  etg_carcasse_prise_en_charge            Boolean?
  etg_carcasse_refus_motif                String?
  etg_carcasse_signed_at                  DateTime?
  etg_carcasse_commentaire                String?
  svi_saisie_carcasse                     Boolean?
  svi_saisie_carcasse_motif               String?
  svi_saisie_carcasse_at                  DateTime?
  svi_carcasse_signed_at                  DateTime?
  svi_carcasse_commentaire                String?
  created_at                              DateTime  @default(now())
  updated_at                              DateTime  @default(now()) @updatedAt
  deleted_at                              DateTime?
  Fei                                     Fei       @relation(fields: [fei_id], references: [id], onDelete: Cascade)

  @@index([fei_id, numero_bracelet])
}

model NotificationLog {
  id             String            @id @default(uuid())
  type           UserNotifications
  email          String?
  web_push_token String?
  user_id        String
  action         String
  payload        String
  created_at     DateTime          @default(now())
  updated_at     DateTime          @default(now()) @updatedAt
  deleted_at     DateTime?
  User           User?             @relation(fields: [user_id], references: [id])

  @@index([user_id, action])
}
