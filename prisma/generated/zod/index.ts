import { z } from 'zod';
import type { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const UserScalarFieldEnumSchema = z.enum(['id','email','telephone','prenom','nom_de_famille','numero_cfei','addresse_ligne_1','addresse_ligne_2','code_postal','ville','user_entities_vivible_checkbox','roles','created_at','updated_at','last_login_at','last_seen_at','deleted_at','onboarded_at','notifications','web_push_tokens','prefilled','activated']);

export const EntityScalarFieldEnumSchema = z.enum(['id','raison_sociale','address_ligne_1','address_ligne_2','code_postal','ville','siret','numero_ddecpp','type','created_at','updated_at','deleted_at','onboarded_at','coupled_entity_id','prefilled']);

export const PasswordScalarFieldEnumSchema = z.enum(['id','user_id','password','created_at','updated_at','deleted_at']);

export const UserRelationsScalarFieldEnumSchema = z.enum(['id','owner_id','related_id','relation','created_at','updated_at','deleted_at']);

export const EntityRelationsScalarFieldEnumSchema = z.enum(['id','owner_id','entity_id','relation','created_at','updated_at','deleted_at']);

export const LogsScalarFieldEnumSchema = z.enum(['id','user_id','action','created_at','updated_at','deleted_at']);

export const FeiScalarFieldEnumSchema = z.enum(['id','numero','date_mise_a_mort','commune_mise_a_mort','created_by_user_id','fei_current_owner_user_id','fei_current_owner_entity_id','fei_current_owner_role','fei_current_owner_wants_to_transfer','fei_next_owner_user_id','fei_next_owner_entity_id','fei_next_owner_role','fei_prev_owner_user_id','fei_prev_owner_entity_id','fei_prev_owner_role','examinateur_initial_user_id','examinateur_initial_approbation_mise_sur_le_marche','examinateur_initial_date_approbation_mise_sur_le_marche','premier_detenteur_user_id','premier_detenteur_date_depot_quelque_part','premier_detenteur_depot_entity_id','premier_detenteur_depot_sauvage','svi_entity_id','svi_user_id','svi_carcasses_saisies','svi_aucune_carcasse_saisie','svi_commentaire','svi_signed_at','created_at','updated_at','deleted_at']);

export const CarcasseScalarFieldEnumSchema = z.enum(['numero_bracelet','fei_numero','heure_mise_a_mort','heure_evisceration','espece','categorie','examinateur_carcasse_sans_anomalie','examinateur_anomalies_carcasse','examinateur_anomalies_abats','examinateur_commentaire','examinateur_signed_at','intermediaire_carcasse_refus_intermediaire_id','intermediaire_carcasse_refus_motif','intermediaire_carcasse_signed_at','intermediaire_carcasse_commentaire','svi_carcasse_saisie','svi_carcasse_saisie_motif','svi_carcasse_saisie_at','svi_carcasse_signed_at','svi_carcasse_commentaire','created_at','updated_at','deleted_at']);

export const InterventionOnFeiScalarFieldEnumSchema = z.enum(['id','fei_numero','user_id','entity_id','role','created_at','updated_at','deleted_at']);

export const FeiIntermediaireScalarFieldEnumSchema = z.enum(['id','fei_numero','fei_intermediaire_user_id','fei_intermediaire_entity_id','fei_intermediaire_role','commentaire','received_at','check_finished_at','handover_at','created_at','updated_at','deleted_at']);

export const CarcasseIntermediaireScalarFieldEnumSchema = z.enum(['fei_numero__bracelet__intermediaire_id','fei_numero','numero_bracelet','fei_intermediaire_id','fei_intermediaire_user_id','fei_intermediaire_entity_id','prise_en_charge','refus','commentaire','carcasse_check_finished_at','created_at','updated_at','deleted_at']);

export const NotificationLogScalarFieldEnumSchema = z.enum(['id','type','email','web_push_token','user_id','action','payload','created_at','updated_at','deleted_at']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const UserRolesSchema = z.enum(['ADMIN','EXAMINATEUR_INITIAL','PREMIER_DETENTEUR','CCG','COLLECTEUR_PRO','ETG','SVI']);

export type UserRolesType = `${z.infer<typeof UserRolesSchema>}`

export const UserNotificationsSchema = z.enum(['EMAIL','SMS','PUSH']);

export type UserNotificationsType = `${z.infer<typeof UserNotificationsSchema>}`

export const EntityTypesSchema = z.enum(['COLLECTEUR_PRO','CCG','ETG','SVI']);

export type EntityTypesType = `${z.infer<typeof EntityTypesSchema>}`

export const UserRelationTypeSchema = z.enum(['PREMIER_DETENTEUR','EXAMINATEUR_INITIAL']);

export type UserRelationTypeType = `${z.infer<typeof UserRelationTypeSchema>}`

export const EntityRelationTypeSchema = z.enum(['WORKING_FOR','WORKING_WITH']);

export type EntityRelationTypeType = `${z.infer<typeof EntityRelationTypeSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  roles: UserRolesSchema.array(),
  notifications: UserNotificationsSchema.array(),
  id: z.string(),
  email: z.string().nullable(),
  telephone: z.string().nullable(),
  prenom: z.string().nullable(),
  nom_de_famille: z.string().nullable(),
  numero_cfei: z.string().nullable(),
  addresse_ligne_1: z.string().nullable(),
  addresse_ligne_2: z.string().nullable(),
  code_postal: z.string().nullable(),
  ville: z.string().nullable(),
  user_entities_vivible_checkbox: z.boolean().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  last_login_at: z.coerce.date().nullable(),
  last_seen_at: z.coerce.date().nullable(),
  deleted_at: z.coerce.date().nullable(),
  onboarded_at: z.coerce.date().nullable(),
  web_push_tokens: z.string().array(),
  prefilled: z.boolean(),
  activated: z.boolean(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// ENTITY SCHEMA
/////////////////////////////////////////

export const EntitySchema = z.object({
  type: EntityTypesSchema,
  id: z.string(),
  raison_sociale: z.string().nullable(),
  address_ligne_1: z.string().nullable(),
  address_ligne_2: z.string().nullable(),
  code_postal: z.string().nullable(),
  ville: z.string().nullable(),
  siret: z.string().nullable(),
  numero_ddecpp: z.string().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  deleted_at: z.coerce.date().nullable(),
  onboarded_at: z.coerce.date().nullable(),
  coupled_entity_id: z.string().nullable(),
  prefilled: z.boolean(),
})

export type Entity = z.infer<typeof EntitySchema>

/////////////////////////////////////////
// PASSWORD SCHEMA
/////////////////////////////////////////

export const PasswordSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  password: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  deleted_at: z.coerce.date().nullable(),
})

export type Password = z.infer<typeof PasswordSchema>

/////////////////////////////////////////
// USER RELATIONS SCHEMA
/////////////////////////////////////////

export const UserRelationsSchema = z.object({
  relation: UserRelationTypeSchema,
  id: z.string(),
  owner_id: z.string(),
  related_id: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  deleted_at: z.coerce.date().nullable(),
})

export type UserRelations = z.infer<typeof UserRelationsSchema>

/////////////////////////////////////////
// ENTITY RELATIONS SCHEMA
/////////////////////////////////////////

export const EntityRelationsSchema = z.object({
  relation: EntityRelationTypeSchema,
  id: z.string(),
  owner_id: z.string(),
  entity_id: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  deleted_at: z.coerce.date().nullable(),
})

export type EntityRelations = z.infer<typeof EntityRelationsSchema>

/////////////////////////////////////////
// LOGS SCHEMA
/////////////////////////////////////////

export const LogsSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  action: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  deleted_at: z.coerce.date().nullable(),
})

export type Logs = z.infer<typeof LogsSchema>

/////////////////////////////////////////
// FEI SCHEMA
/////////////////////////////////////////

export const FeiSchema = z.object({
  fei_current_owner_role: UserRolesSchema.nullable(),
  fei_next_owner_role: UserRolesSchema.nullable(),
  fei_prev_owner_role: UserRolesSchema.nullable(),
  id: z.number().int(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().nullable(),
  commune_mise_a_mort: z.string().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().nullable(),
  fei_current_owner_entity_id: z.string().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().nullable(),
  fei_next_owner_user_id: z.string().nullable(),
  fei_next_owner_entity_id: z.string().nullable(),
  fei_prev_owner_user_id: z.string().nullable(),
  fei_prev_owner_entity_id: z.string().nullable(),
  examinateur_initial_user_id: z.string().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().nullable(),
  premier_detenteur_user_id: z.string().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().nullable(),
  premier_detenteur_depot_entity_id: z.string().nullable(),
  premier_detenteur_depot_sauvage: z.string().nullable(),
  svi_entity_id: z.string().nullable(),
  svi_user_id: z.string().nullable(),
  svi_carcasses_saisies: z.number().int().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().nullable(),
  svi_commentaire: z.string().nullable(),
  svi_signed_at: z.coerce.date().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  deleted_at: z.coerce.date().nullable(),
})

export type Fei = z.infer<typeof FeiSchema>

/////////////////////////////////////////
// CARCASSE SCHEMA
/////////////////////////////////////////

export const CarcasseSchema = z.object({
  numero_bracelet: z.string(),
  fei_numero: z.string(),
  heure_mise_a_mort: z.string().nullable(),
  heure_evisceration: z.string().nullable(),
  espece: z.string().nullable(),
  categorie: z.string().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().nullable(),
  examinateur_anomalies_carcasse: z.string().array(),
  examinateur_anomalies_abats: z.string().array(),
  examinateur_commentaire: z.string().nullable(),
  examinateur_signed_at: z.coerce.date().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.string().nullable(),
  intermediaire_carcasse_refus_motif: z.string().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().nullable(),
  intermediaire_carcasse_commentaire: z.string().nullable(),
  svi_carcasse_saisie: z.boolean().nullable(),
  svi_carcasse_saisie_motif: z.string().array(),
  svi_carcasse_saisie_at: z.coerce.date().nullable(),
  svi_carcasse_signed_at: z.coerce.date().nullable(),
  svi_carcasse_commentaire: z.string().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  deleted_at: z.coerce.date().nullable(),
})

export type Carcasse = z.infer<typeof CarcasseSchema>

/////////////////////////////////////////
// INTERVENTION ON FEI SCHEMA
/////////////////////////////////////////

export const InterventionOnFeiSchema = z.object({
  role: UserRolesSchema,
  id: z.string(),
  fei_numero: z.string(),
  user_id: z.string(),
  entity_id: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  deleted_at: z.coerce.date().nullable(),
})

export type InterventionOnFei = z.infer<typeof InterventionOnFeiSchema>

/////////////////////////////////////////
// FEI INTERMEDIAIRE SCHEMA
/////////////////////////////////////////

export const FeiIntermediaireSchema = z.object({
  fei_intermediaire_role: UserRolesSchema.nullable(),
  id: z.string(),
  fei_numero: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  commentaire: z.string().nullable(),
  received_at: z.coerce.date().nullable(),
  check_finished_at: z.coerce.date().nullable(),
  handover_at: z.coerce.date().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  deleted_at: z.coerce.date().nullable(),
})

export type FeiIntermediaire = z.infer<typeof FeiIntermediaireSchema>

/////////////////////////////////////////
// CARCASSE INTERMEDIAIRE SCHEMA
/////////////////////////////////////////

export const CarcasseIntermediaireSchema = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  fei_numero: z.string(),
  numero_bracelet: z.string(),
  fei_intermediaire_id: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  prise_en_charge: z.boolean().nullable(),
  refus: z.string().nullable(),
  commentaire: z.string().nullable(),
  carcasse_check_finished_at: z.coerce.date().nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  deleted_at: z.coerce.date().nullable(),
})

export type CarcasseIntermediaire = z.infer<typeof CarcasseIntermediaireSchema>

/////////////////////////////////////////
// NOTIFICATION LOG SCHEMA
/////////////////////////////////////////

export const NotificationLogSchema = z.object({
  type: UserNotificationsSchema,
  id: z.string(),
  email: z.string().nullable(),
  web_push_token: z.string().nullable(),
  user_id: z.string(),
  action: z.string(),
  payload: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  deleted_at: z.coerce.date().nullable(),
})

export type NotificationLog = z.infer<typeof NotificationLogSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  Password: z.union([z.boolean(),z.lazy(() => PasswordArgsSchema)]).optional(),
  UserRelationsAsOwner: z.union([z.boolean(),z.lazy(() => UserRelationsFindManyArgsSchema)]).optional(),
  UserRelationsAsRelated: z.union([z.boolean(),z.lazy(() => UserRelationsFindManyArgsSchema)]).optional(),
  EntitiesRelations: z.union([z.boolean(),z.lazy(() => EntityRelationsFindManyArgsSchema)]).optional(),
  FeiCreatedByUser: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiCurrentUser: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiPremierDetenteurUser: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiExaminateurInitialUser: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiSviUser: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiIntermediaireUser: z.union([z.boolean(),z.lazy(() => FeiIntermediaireFindManyArgsSchema)]).optional(),
  Logs: z.union([z.boolean(),z.lazy(() => LogsFindManyArgsSchema)]).optional(),
  NotificationLog: z.union([z.boolean(),z.lazy(() => NotificationLogFindManyArgsSchema)]).optional(),
  CarcasseIntermediaire: z.union([z.boolean(),z.lazy(() => CarcasseIntermediaireFindManyArgsSchema)]).optional(),
  InterventionOnFei: z.union([z.boolean(),z.lazy(() => InterventionOnFeiFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  UserRelationsAsOwner: z.boolean().optional(),
  UserRelationsAsRelated: z.boolean().optional(),
  EntitiesRelations: z.boolean().optional(),
  FeiCreatedByUser: z.boolean().optional(),
  FeiCurrentUser: z.boolean().optional(),
  FeiPremierDetenteurUser: z.boolean().optional(),
  FeiExaminateurInitialUser: z.boolean().optional(),
  FeiSviUser: z.boolean().optional(),
  FeiIntermediaireUser: z.boolean().optional(),
  Logs: z.boolean().optional(),
  NotificationLog: z.boolean().optional(),
  CarcasseIntermediaire: z.boolean().optional(),
  InterventionOnFei: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  email: z.boolean().optional(),
  telephone: z.boolean().optional(),
  prenom: z.boolean().optional(),
  nom_de_famille: z.boolean().optional(),
  numero_cfei: z.boolean().optional(),
  addresse_ligne_1: z.boolean().optional(),
  addresse_ligne_2: z.boolean().optional(),
  code_postal: z.boolean().optional(),
  ville: z.boolean().optional(),
  user_entities_vivible_checkbox: z.boolean().optional(),
  roles: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  last_login_at: z.boolean().optional(),
  last_seen_at: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  onboarded_at: z.boolean().optional(),
  notifications: z.boolean().optional(),
  web_push_tokens: z.boolean().optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.union([z.boolean(),z.lazy(() => PasswordArgsSchema)]).optional(),
  UserRelationsAsOwner: z.union([z.boolean(),z.lazy(() => UserRelationsFindManyArgsSchema)]).optional(),
  UserRelationsAsRelated: z.union([z.boolean(),z.lazy(() => UserRelationsFindManyArgsSchema)]).optional(),
  EntitiesRelations: z.union([z.boolean(),z.lazy(() => EntityRelationsFindManyArgsSchema)]).optional(),
  FeiCreatedByUser: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiCurrentUser: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiPremierDetenteurUser: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiExaminateurInitialUser: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiSviUser: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiIntermediaireUser: z.union([z.boolean(),z.lazy(() => FeiIntermediaireFindManyArgsSchema)]).optional(),
  Logs: z.union([z.boolean(),z.lazy(() => LogsFindManyArgsSchema)]).optional(),
  NotificationLog: z.union([z.boolean(),z.lazy(() => NotificationLogFindManyArgsSchema)]).optional(),
  CarcasseIntermediaire: z.union([z.boolean(),z.lazy(() => CarcasseIntermediaireFindManyArgsSchema)]).optional(),
  InterventionOnFei: z.union([z.boolean(),z.lazy(() => InterventionOnFeiFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ENTITY
//------------------------------------------------------

export const EntityIncludeSchema: z.ZodType<Prisma.EntityInclude> = z.object({
  EntityRelatedWithUser: z.union([z.boolean(),z.lazy(() => EntityRelationsFindManyArgsSchema)]).optional(),
  FeiCurrentEntity: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiNextEntity: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiDepotEntity: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiSviEntity: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiIntermediaireEntity: z.union([z.boolean(),z.lazy(() => FeiIntermediaireFindManyArgsSchema)]).optional(),
  CarcasseIntermediaire: z.union([z.boolean(),z.lazy(() => CarcasseIntermediaireFindManyArgsSchema)]).optional(),
  CoupledEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  CoupledEntity_opposite: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  InterventionOnFei: z.union([z.boolean(),z.lazy(() => InterventionOnFeiFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EntityCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const EntityArgsSchema: z.ZodType<Prisma.EntityDefaultArgs> = z.object({
  select: z.lazy(() => EntitySelectSchema).optional(),
  include: z.lazy(() => EntityIncludeSchema).optional(),
}).strict();

export const EntityCountOutputTypeArgsSchema: z.ZodType<Prisma.EntityCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => EntityCountOutputTypeSelectSchema).nullish(),
}).strict();

export const EntityCountOutputTypeSelectSchema: z.ZodType<Prisma.EntityCountOutputTypeSelect> = z.object({
  EntityRelatedWithUser: z.boolean().optional(),
  FeiCurrentEntity: z.boolean().optional(),
  FeiNextEntity: z.boolean().optional(),
  FeiDepotEntity: z.boolean().optional(),
  FeiSviEntity: z.boolean().optional(),
  FeiIntermediaireEntity: z.boolean().optional(),
  CarcasseIntermediaire: z.boolean().optional(),
  InterventionOnFei: z.boolean().optional(),
}).strict();

export const EntitySelectSchema: z.ZodType<Prisma.EntitySelect> = z.object({
  id: z.boolean().optional(),
  raison_sociale: z.boolean().optional(),
  address_ligne_1: z.boolean().optional(),
  address_ligne_2: z.boolean().optional(),
  code_postal: z.boolean().optional(),
  ville: z.boolean().optional(),
  siret: z.boolean().optional(),
  numero_ddecpp: z.boolean().optional(),
  type: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  onboarded_at: z.boolean().optional(),
  coupled_entity_id: z.boolean().optional(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.union([z.boolean(),z.lazy(() => EntityRelationsFindManyArgsSchema)]).optional(),
  FeiCurrentEntity: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiNextEntity: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiDepotEntity: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiSviEntity: z.union([z.boolean(),z.lazy(() => FeiFindManyArgsSchema)]).optional(),
  FeiIntermediaireEntity: z.union([z.boolean(),z.lazy(() => FeiIntermediaireFindManyArgsSchema)]).optional(),
  CarcasseIntermediaire: z.union([z.boolean(),z.lazy(() => CarcasseIntermediaireFindManyArgsSchema)]).optional(),
  CoupledEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  CoupledEntity_opposite: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  InterventionOnFei: z.union([z.boolean(),z.lazy(() => InterventionOnFeiFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EntityCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PASSWORD
//------------------------------------------------------

export const PasswordIncludeSchema: z.ZodType<Prisma.PasswordInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const PasswordArgsSchema: z.ZodType<Prisma.PasswordDefaultArgs> = z.object({
  select: z.lazy(() => PasswordSelectSchema).optional(),
  include: z.lazy(() => PasswordIncludeSchema).optional(),
}).strict();

export const PasswordSelectSchema: z.ZodType<Prisma.PasswordSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  password: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// USER RELATIONS
//------------------------------------------------------

export const UserRelationsIncludeSchema: z.ZodType<Prisma.UserRelationsInclude> = z.object({
  UserOwnerOfUserRelation: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  UserRelatedOfUserRelation: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const UserRelationsArgsSchema: z.ZodType<Prisma.UserRelationsDefaultArgs> = z.object({
  select: z.lazy(() => UserRelationsSelectSchema).optional(),
  include: z.lazy(() => UserRelationsIncludeSchema).optional(),
}).strict();

export const UserRelationsSelectSchema: z.ZodType<Prisma.UserRelationsSelect> = z.object({
  id: z.boolean().optional(),
  owner_id: z.boolean().optional(),
  related_id: z.boolean().optional(),
  relation: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  UserOwnerOfUserRelation: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  UserRelatedOfUserRelation: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// ENTITY RELATIONS
//------------------------------------------------------

export const EntityRelationsIncludeSchema: z.ZodType<Prisma.EntityRelationsInclude> = z.object({
  UserRelatedWithEntity: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  EntityRelatedWithUser: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
}).strict()

export const EntityRelationsArgsSchema: z.ZodType<Prisma.EntityRelationsDefaultArgs> = z.object({
  select: z.lazy(() => EntityRelationsSelectSchema).optional(),
  include: z.lazy(() => EntityRelationsIncludeSchema).optional(),
}).strict();

export const EntityRelationsSelectSchema: z.ZodType<Prisma.EntityRelationsSelect> = z.object({
  id: z.boolean().optional(),
  owner_id: z.boolean().optional(),
  entity_id: z.boolean().optional(),
  relation: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  UserRelatedWithEntity: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  EntityRelatedWithUser: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
}).strict()

// LOGS
//------------------------------------------------------

export const LogsIncludeSchema: z.ZodType<Prisma.LogsInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const LogsArgsSchema: z.ZodType<Prisma.LogsDefaultArgs> = z.object({
  select: z.lazy(() => LogsSelectSchema).optional(),
  include: z.lazy(() => LogsIncludeSchema).optional(),
}).strict();

export const LogsSelectSchema: z.ZodType<Prisma.LogsSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  action: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// FEI
//------------------------------------------------------

export const FeiIncludeSchema: z.ZodType<Prisma.FeiInclude> = z.object({
  Carcasses: z.union([z.boolean(),z.lazy(() => CarcasseFindManyArgsSchema)]).optional(),
  FeiCreatedByUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  FeiPremierDetenteurUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  FeiExaminateurInitialUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  FeiDepotEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  FeiSviEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  FeiSviUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  FeiIntermediaires: z.union([z.boolean(),z.lazy(() => FeiIntermediaireFindManyArgsSchema)]).optional(),
  FeiCurrentUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  FeiCurrentEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  FeiNextEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  CarcasseIntermediaire: z.union([z.boolean(),z.lazy(() => CarcasseIntermediaireFindManyArgsSchema)]).optional(),
  InterventionOnFei: z.union([z.boolean(),z.lazy(() => InterventionOnFeiFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FeiCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const FeiArgsSchema: z.ZodType<Prisma.FeiDefaultArgs> = z.object({
  select: z.lazy(() => FeiSelectSchema).optional(),
  include: z.lazy(() => FeiIncludeSchema).optional(),
}).strict();

export const FeiCountOutputTypeArgsSchema: z.ZodType<Prisma.FeiCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => FeiCountOutputTypeSelectSchema).nullish(),
}).strict();

export const FeiCountOutputTypeSelectSchema: z.ZodType<Prisma.FeiCountOutputTypeSelect> = z.object({
  Carcasses: z.boolean().optional(),
  FeiIntermediaires: z.boolean().optional(),
  CarcasseIntermediaire: z.boolean().optional(),
  InterventionOnFei: z.boolean().optional(),
}).strict();

export const FeiSelectSchema: z.ZodType<Prisma.FeiSelect> = z.object({
  id: z.boolean().optional(),
  numero: z.boolean().optional(),
  date_mise_a_mort: z.boolean().optional(),
  commune_mise_a_mort: z.boolean().optional(),
  created_by_user_id: z.boolean().optional(),
  fei_current_owner_user_id: z.boolean().optional(),
  fei_current_owner_entity_id: z.boolean().optional(),
  fei_current_owner_role: z.boolean().optional(),
  fei_current_owner_wants_to_transfer: z.boolean().optional(),
  fei_next_owner_user_id: z.boolean().optional(),
  fei_next_owner_entity_id: z.boolean().optional(),
  fei_next_owner_role: z.boolean().optional(),
  fei_prev_owner_user_id: z.boolean().optional(),
  fei_prev_owner_entity_id: z.boolean().optional(),
  fei_prev_owner_role: z.boolean().optional(),
  examinateur_initial_user_id: z.boolean().optional(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.boolean().optional(),
  premier_detenteur_user_id: z.boolean().optional(),
  premier_detenteur_date_depot_quelque_part: z.boolean().optional(),
  premier_detenteur_depot_entity_id: z.boolean().optional(),
  premier_detenteur_depot_sauvage: z.boolean().optional(),
  svi_entity_id: z.boolean().optional(),
  svi_user_id: z.boolean().optional(),
  svi_carcasses_saisies: z.boolean().optional(),
  svi_aucune_carcasse_saisie: z.boolean().optional(),
  svi_commentaire: z.boolean().optional(),
  svi_signed_at: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  Carcasses: z.union([z.boolean(),z.lazy(() => CarcasseFindManyArgsSchema)]).optional(),
  FeiCreatedByUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  FeiPremierDetenteurUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  FeiExaminateurInitialUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  FeiDepotEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  FeiSviEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  FeiSviUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  FeiIntermediaires: z.union([z.boolean(),z.lazy(() => FeiIntermediaireFindManyArgsSchema)]).optional(),
  FeiCurrentUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  FeiCurrentEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  FeiNextEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  CarcasseIntermediaire: z.union([z.boolean(),z.lazy(() => CarcasseIntermediaireFindManyArgsSchema)]).optional(),
  InterventionOnFei: z.union([z.boolean(),z.lazy(() => InterventionOnFeiFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FeiCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CARCASSE
//------------------------------------------------------

export const CarcasseIncludeSchema: z.ZodType<Prisma.CarcasseInclude> = z.object({
  Fei: z.union([z.boolean(),z.lazy(() => FeiArgsSchema)]).optional(),
  FeiIntermediairesCarcasse: z.union([z.boolean(),z.lazy(() => FeiIntermediaireFindManyArgsSchema)]).optional(),
  FeiIntermediaireCarcasseRefus: z.union([z.boolean(),z.lazy(() => FeiIntermediaireArgsSchema)]).optional(),
  CarcasseIntermediaire: z.union([z.boolean(),z.lazy(() => CarcasseIntermediaireFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CarcasseCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const CarcasseArgsSchema: z.ZodType<Prisma.CarcasseDefaultArgs> = z.object({
  select: z.lazy(() => CarcasseSelectSchema).optional(),
  include: z.lazy(() => CarcasseIncludeSchema).optional(),
}).strict();

export const CarcasseCountOutputTypeArgsSchema: z.ZodType<Prisma.CarcasseCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => CarcasseCountOutputTypeSelectSchema).nullish(),
}).strict();

export const CarcasseCountOutputTypeSelectSchema: z.ZodType<Prisma.CarcasseCountOutputTypeSelect> = z.object({
  FeiIntermediairesCarcasse: z.boolean().optional(),
  CarcasseIntermediaire: z.boolean().optional(),
}).strict();

export const CarcasseSelectSchema: z.ZodType<Prisma.CarcasseSelect> = z.object({
  numero_bracelet: z.boolean().optional(),
  fei_numero: z.boolean().optional(),
  heure_mise_a_mort: z.boolean().optional(),
  heure_evisceration: z.boolean().optional(),
  espece: z.boolean().optional(),
  categorie: z.boolean().optional(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional(),
  examinateur_anomalies_carcasse: z.boolean().optional(),
  examinateur_anomalies_abats: z.boolean().optional(),
  examinateur_commentaire: z.boolean().optional(),
  examinateur_signed_at: z.boolean().optional(),
  intermediaire_carcasse_refus_intermediaire_id: z.boolean().optional(),
  intermediaire_carcasse_refus_motif: z.boolean().optional(),
  intermediaire_carcasse_signed_at: z.boolean().optional(),
  intermediaire_carcasse_commentaire: z.boolean().optional(),
  svi_carcasse_saisie: z.boolean().optional(),
  svi_carcasse_saisie_motif: z.boolean().optional(),
  svi_carcasse_saisie_at: z.boolean().optional(),
  svi_carcasse_signed_at: z.boolean().optional(),
  svi_carcasse_commentaire: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  Fei: z.union([z.boolean(),z.lazy(() => FeiArgsSchema)]).optional(),
  FeiIntermediairesCarcasse: z.union([z.boolean(),z.lazy(() => FeiIntermediaireFindManyArgsSchema)]).optional(),
  FeiIntermediaireCarcasseRefus: z.union([z.boolean(),z.lazy(() => FeiIntermediaireArgsSchema)]).optional(),
  CarcasseIntermediaire: z.union([z.boolean(),z.lazy(() => CarcasseIntermediaireFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => CarcasseCountOutputTypeArgsSchema)]).optional(),
}).strict()

// INTERVENTION ON FEI
//------------------------------------------------------

export const InterventionOnFeiIncludeSchema: z.ZodType<Prisma.InterventionOnFeiInclude> = z.object({
  Fei: z.union([z.boolean(),z.lazy(() => FeiArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Entity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
}).strict()

export const InterventionOnFeiArgsSchema: z.ZodType<Prisma.InterventionOnFeiDefaultArgs> = z.object({
  select: z.lazy(() => InterventionOnFeiSelectSchema).optional(),
  include: z.lazy(() => InterventionOnFeiIncludeSchema).optional(),
}).strict();

export const InterventionOnFeiSelectSchema: z.ZodType<Prisma.InterventionOnFeiSelect> = z.object({
  id: z.boolean().optional(),
  fei_numero: z.boolean().optional(),
  user_id: z.boolean().optional(),
  entity_id: z.boolean().optional(),
  role: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  Fei: z.union([z.boolean(),z.lazy(() => FeiArgsSchema)]).optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  Entity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
}).strict()

// FEI INTERMEDIAIRE
//------------------------------------------------------

export const FeiIntermediaireIncludeSchema: z.ZodType<Prisma.FeiIntermediaireInclude> = z.object({
  Fei: z.union([z.boolean(),z.lazy(() => FeiArgsSchema)]).optional(),
  FeiIntermediaireUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  FeiIntermediaireEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  FeiIntermediairesCarcasses: z.union([z.boolean(),z.lazy(() => CarcasseFindManyArgsSchema)]).optional(),
  FeiIntermediaireCarcassesRefus: z.union([z.boolean(),z.lazy(() => CarcasseFindManyArgsSchema)]).optional(),
  CarcasseIntermediaire: z.union([z.boolean(),z.lazy(() => CarcasseIntermediaireFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FeiIntermediaireCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const FeiIntermediaireArgsSchema: z.ZodType<Prisma.FeiIntermediaireDefaultArgs> = z.object({
  select: z.lazy(() => FeiIntermediaireSelectSchema).optional(),
  include: z.lazy(() => FeiIntermediaireIncludeSchema).optional(),
}).strict();

export const FeiIntermediaireCountOutputTypeArgsSchema: z.ZodType<Prisma.FeiIntermediaireCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => FeiIntermediaireCountOutputTypeSelectSchema).nullish(),
}).strict();

export const FeiIntermediaireCountOutputTypeSelectSchema: z.ZodType<Prisma.FeiIntermediaireCountOutputTypeSelect> = z.object({
  FeiIntermediairesCarcasses: z.boolean().optional(),
  FeiIntermediaireCarcassesRefus: z.boolean().optional(),
  CarcasseIntermediaire: z.boolean().optional(),
}).strict();

export const FeiIntermediaireSelectSchema: z.ZodType<Prisma.FeiIntermediaireSelect> = z.object({
  id: z.boolean().optional(),
  fei_numero: z.boolean().optional(),
  fei_intermediaire_user_id: z.boolean().optional(),
  fei_intermediaire_entity_id: z.boolean().optional(),
  fei_intermediaire_role: z.boolean().optional(),
  commentaire: z.boolean().optional(),
  received_at: z.boolean().optional(),
  check_finished_at: z.boolean().optional(),
  handover_at: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  Fei: z.union([z.boolean(),z.lazy(() => FeiArgsSchema)]).optional(),
  FeiIntermediaireUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  FeiIntermediaireEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  FeiIntermediairesCarcasses: z.union([z.boolean(),z.lazy(() => CarcasseFindManyArgsSchema)]).optional(),
  FeiIntermediaireCarcassesRefus: z.union([z.boolean(),z.lazy(() => CarcasseFindManyArgsSchema)]).optional(),
  CarcasseIntermediaire: z.union([z.boolean(),z.lazy(() => CarcasseIntermediaireFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => FeiIntermediaireCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CARCASSE INTERMEDIAIRE
//------------------------------------------------------

export const CarcasseIntermediaireIncludeSchema: z.ZodType<Prisma.CarcasseIntermediaireInclude> = z.object({
  CarcasseIntermediaireFei: z.union([z.boolean(),z.lazy(() => FeiArgsSchema)]).optional(),
  CarcasseCarcasseIntermediaire: z.union([z.boolean(),z.lazy(() => CarcasseArgsSchema)]).optional(),
  CarcasseIntermediaireUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  CarcasseIntermediaireEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  CarcasseIntermediaireFeiIntermediaire: z.union([z.boolean(),z.lazy(() => FeiIntermediaireArgsSchema)]).optional(),
}).strict()

export const CarcasseIntermediaireArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireDefaultArgs> = z.object({
  select: z.lazy(() => CarcasseIntermediaireSelectSchema).optional(),
  include: z.lazy(() => CarcasseIntermediaireIncludeSchema).optional(),
}).strict();

export const CarcasseIntermediaireSelectSchema: z.ZodType<Prisma.CarcasseIntermediaireSelect> = z.object({
  fei_numero__bracelet__intermediaire_id: z.boolean().optional(),
  fei_numero: z.boolean().optional(),
  numero_bracelet: z.boolean().optional(),
  fei_intermediaire_id: z.boolean().optional(),
  fei_intermediaire_user_id: z.boolean().optional(),
  fei_intermediaire_entity_id: z.boolean().optional(),
  prise_en_charge: z.boolean().optional(),
  refus: z.boolean().optional(),
  commentaire: z.boolean().optional(),
  carcasse_check_finished_at: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  CarcasseIntermediaireFei: z.union([z.boolean(),z.lazy(() => FeiArgsSchema)]).optional(),
  CarcasseCarcasseIntermediaire: z.union([z.boolean(),z.lazy(() => CarcasseArgsSchema)]).optional(),
  CarcasseIntermediaireUser: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
  CarcasseIntermediaireEntity: z.union([z.boolean(),z.lazy(() => EntityArgsSchema)]).optional(),
  CarcasseIntermediaireFeiIntermediaire: z.union([z.boolean(),z.lazy(() => FeiIntermediaireArgsSchema)]).optional(),
}).strict()

// NOTIFICATION LOG
//------------------------------------------------------

export const NotificationLogIncludeSchema: z.ZodType<Prisma.NotificationLogInclude> = z.object({
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const NotificationLogArgsSchema: z.ZodType<Prisma.NotificationLogDefaultArgs> = z.object({
  select: z.lazy(() => NotificationLogSelectSchema).optional(),
  include: z.lazy(() => NotificationLogIncludeSchema).optional(),
}).strict();

export const NotificationLogSelectSchema: z.ZodType<Prisma.NotificationLogSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  email: z.boolean().optional(),
  web_push_token: z.boolean().optional(),
  user_id: z.boolean().optional(),
  action: z.boolean().optional(),
  payload: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  User: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  telephone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  prenom: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nom_de_famille: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  numero_cfei: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  code_postal: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ville: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  roles: z.lazy(() => EnumUserRolesNullableListFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  last_login_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  last_seen_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboarded_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  notifications: z.lazy(() => EnumUserNotificationsNullableListFilterSchema).optional(),
  web_push_tokens: z.lazy(() => StringNullableListFilterSchema).optional(),
  prefilled: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  activated: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  Password: z.union([ z.lazy(() => PasswordNullableRelationFilterSchema),z.lazy(() => PasswordWhereInputSchema) ]).optional().nullable(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsListRelationFilterSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsListRelationFilterSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsListRelationFilterSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiSviUser: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireListRelationFilterSchema).optional(),
  Logs: z.lazy(() => LogsListRelationFilterSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogListRelationFilterSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireListRelationFilterSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  telephone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  prenom: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nom_de_famille: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  numero_cfei: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addresse_ligne_1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addresse_ligne_2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code_postal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ville: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_entities_vivible_checkbox: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  roles: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  last_login_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_seen_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  onboarded_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notifications: z.lazy(() => SortOrderSchema).optional(),
  web_push_tokens: z.lazy(() => SortOrderSchema).optional(),
  prefilled: z.lazy(() => SortOrderSchema).optional(),
  activated: z.lazy(() => SortOrderSchema).optional(),
  Password: z.lazy(() => PasswordOrderByWithRelationInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsOrderByRelationAggregateInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsOrderByRelationAggregateInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsOrderByRelationAggregateInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiOrderByRelationAggregateInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiOrderByRelationAggregateInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiOrderByRelationAggregateInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiOrderByRelationAggregateInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiOrderByRelationAggregateInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireOrderByRelationAggregateInputSchema).optional(),
  Logs: z.lazy(() => LogsOrderByRelationAggregateInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogOrderByRelationAggregateInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireOrderByRelationAggregateInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    email: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  telephone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  prenom: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  nom_de_famille: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  numero_cfei: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  code_postal: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ville: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  roles: z.lazy(() => EnumUserRolesNullableListFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  last_login_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  last_seen_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboarded_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  notifications: z.lazy(() => EnumUserNotificationsNullableListFilterSchema).optional(),
  web_push_tokens: z.lazy(() => StringNullableListFilterSchema).optional(),
  prefilled: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  activated: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  Password: z.union([ z.lazy(() => PasswordNullableRelationFilterSchema),z.lazy(() => PasswordWhereInputSchema) ]).optional().nullable(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsListRelationFilterSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsListRelationFilterSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsListRelationFilterSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiSviUser: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireListRelationFilterSchema).optional(),
  Logs: z.lazy(() => LogsListRelationFilterSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogListRelationFilterSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireListRelationFilterSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  telephone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  prenom: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  nom_de_famille: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  numero_cfei: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addresse_ligne_1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  addresse_ligne_2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code_postal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ville: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_entities_vivible_checkbox: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  roles: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  last_login_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_seen_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  onboarded_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  notifications: z.lazy(() => SortOrderSchema).optional(),
  web_push_tokens: z.lazy(() => SortOrderSchema).optional(),
  prefilled: z.lazy(() => SortOrderSchema).optional(),
  activated: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  telephone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  prenom: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  nom_de_famille: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  numero_cfei: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  code_postal: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ville: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  roles: z.lazy(() => EnumUserRolesNullableListFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  last_login_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  last_seen_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboarded_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  notifications: z.lazy(() => EnumUserNotificationsNullableListFilterSchema).optional(),
  web_push_tokens: z.lazy(() => StringNullableListFilterSchema).optional(),
  prefilled: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  activated: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
}).strict();

export const EntityWhereInputSchema: z.ZodType<Prisma.EntityWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EntityWhereInputSchema),z.lazy(() => EntityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EntityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EntityWhereInputSchema),z.lazy(() => EntityWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  raison_sociale: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address_ligne_1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address_ligne_2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  code_postal: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ville: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  siret: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  numero_ddecpp: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumEntityTypesFilterSchema),z.lazy(() => EntityTypesSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboarded_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  coupled_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  prefilled: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsListRelationFilterSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireListRelationFilterSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireListRelationFilterSchema).optional(),
  CoupledEntity: z.union([ z.lazy(() => EntityNullableRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional().nullable(),
  CoupledEntity_opposite: z.union([ z.lazy(() => EntityNullableRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional().nullable(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiListRelationFilterSchema).optional()
}).strict();

export const EntityOrderByWithRelationInputSchema: z.ZodType<Prisma.EntityOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raison_sociale: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address_ligne_1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address_ligne_2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code_postal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ville: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  siret: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  numero_ddecpp: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  onboarded_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  coupled_entity_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  prefilled: z.lazy(() => SortOrderSchema).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsOrderByRelationAggregateInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiOrderByRelationAggregateInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiOrderByRelationAggregateInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiOrderByRelationAggregateInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiOrderByRelationAggregateInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireOrderByRelationAggregateInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireOrderByRelationAggregateInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityOrderByWithRelationInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityOrderByWithRelationInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiOrderByRelationAggregateInputSchema).optional()
}).strict();

export const EntityWhereUniqueInputSchema: z.ZodType<Prisma.EntityWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    numero_ddecpp: z.string(),
    coupled_entity_id: z.string()
  }),
  z.object({
    id: z.string(),
    numero_ddecpp: z.string(),
  }),
  z.object({
    id: z.string(),
    coupled_entity_id: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    numero_ddecpp: z.string(),
    coupled_entity_id: z.string(),
  }),
  z.object({
    numero_ddecpp: z.string(),
  }),
  z.object({
    coupled_entity_id: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  numero_ddecpp: z.string().optional(),
  coupled_entity_id: z.string().optional(),
  AND: z.union([ z.lazy(() => EntityWhereInputSchema),z.lazy(() => EntityWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EntityWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EntityWhereInputSchema),z.lazy(() => EntityWhereInputSchema).array() ]).optional(),
  raison_sociale: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address_ligne_1: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address_ligne_2: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  code_postal: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ville: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  siret: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumEntityTypesFilterSchema),z.lazy(() => EntityTypesSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboarded_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  prefilled: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsListRelationFilterSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiListRelationFilterSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireListRelationFilterSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireListRelationFilterSchema).optional(),
  CoupledEntity: z.union([ z.lazy(() => EntityNullableRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional().nullable(),
  CoupledEntity_opposite: z.union([ z.lazy(() => EntityNullableRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional().nullable(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiListRelationFilterSchema).optional()
}).strict());

export const EntityOrderByWithAggregationInputSchema: z.ZodType<Prisma.EntityOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raison_sociale: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address_ligne_1: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address_ligne_2: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  code_postal: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ville: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  siret: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  numero_ddecpp: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  onboarded_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  coupled_entity_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  prefilled: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EntityCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EntityMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EntityMinOrderByAggregateInputSchema).optional()
}).strict();

export const EntityScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EntityScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EntityScalarWhereWithAggregatesInputSchema),z.lazy(() => EntityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EntityScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EntityScalarWhereWithAggregatesInputSchema),z.lazy(() => EntityScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  raison_sociale: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  address_ligne_1: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  address_ligne_2: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  code_postal: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ville: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  siret: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  numero_ddecpp: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => EnumEntityTypesWithAggregatesFilterSchema),z.lazy(() => EntityTypesSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  onboarded_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  coupled_entity_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  prefilled: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
}).strict();

export const PasswordWhereInputSchema: z.ZodType<Prisma.PasswordWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PasswordWhereInputSchema),z.lazy(() => PasswordWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasswordWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasswordWhereInputSchema),z.lazy(() => PasswordWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const PasswordOrderByWithRelationInputSchema: z.ZodType<Prisma.PasswordOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const PasswordWhereUniqueInputSchema: z.ZodType<Prisma.PasswordWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    user_id: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    user_id: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  user_id: z.string().optional(),
  AND: z.union([ z.lazy(() => PasswordWhereInputSchema),z.lazy(() => PasswordWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasswordWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasswordWhereInputSchema),z.lazy(() => PasswordWhereInputSchema).array() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const PasswordOrderByWithAggregationInputSchema: z.ZodType<Prisma.PasswordOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => PasswordCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PasswordMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PasswordMinOrderByAggregateInputSchema).optional()
}).strict();

export const PasswordScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PasswordScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PasswordScalarWhereWithAggregatesInputSchema),z.lazy(() => PasswordScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PasswordScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PasswordScalarWhereWithAggregatesInputSchema),z.lazy(() => PasswordScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const UserRelationsWhereInputSchema: z.ZodType<Prisma.UserRelationsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserRelationsWhereInputSchema),z.lazy(() => UserRelationsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRelationsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRelationsWhereInputSchema),z.lazy(() => UserRelationsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  owner_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  related_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => EnumUserRelationTypeFilterSchema),z.lazy(() => UserRelationTypeSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  UserOwnerOfUserRelation: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  UserRelatedOfUserRelation: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const UserRelationsOrderByWithRelationInputSchema: z.ZodType<Prisma.UserRelationsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional(),
  related_id: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UserOwnerOfUserRelation: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  UserRelatedOfUserRelation: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const UserRelationsWhereUniqueInputSchema: z.ZodType<Prisma.UserRelationsWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => UserRelationsWhereInputSchema),z.lazy(() => UserRelationsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRelationsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRelationsWhereInputSchema),z.lazy(() => UserRelationsWhereInputSchema).array() ]).optional(),
  owner_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  related_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => EnumUserRelationTypeFilterSchema),z.lazy(() => UserRelationTypeSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  UserOwnerOfUserRelation: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  UserRelatedOfUserRelation: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const UserRelationsOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserRelationsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional(),
  related_id: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UserRelationsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserRelationsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserRelationsMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserRelationsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserRelationsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserRelationsScalarWhereWithAggregatesInputSchema),z.lazy(() => UserRelationsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRelationsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRelationsScalarWhereWithAggregatesInputSchema),z.lazy(() => UserRelationsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  owner_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  related_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => EnumUserRelationTypeWithAggregatesFilterSchema),z.lazy(() => UserRelationTypeSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const EntityRelationsWhereInputSchema: z.ZodType<Prisma.EntityRelationsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EntityRelationsWhereInputSchema),z.lazy(() => EntityRelationsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EntityRelationsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EntityRelationsWhereInputSchema),z.lazy(() => EntityRelationsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  owner_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => EnumEntityRelationTypeFilterSchema),z.lazy(() => EntityRelationTypeSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  UserRelatedWithEntity: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  EntityRelatedWithUser: z.union([ z.lazy(() => EntityRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional(),
}).strict();

export const EntityRelationsOrderByWithRelationInputSchema: z.ZodType<Prisma.EntityRelationsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  UserRelatedWithEntity: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityOrderByWithRelationInputSchema).optional()
}).strict();

export const EntityRelationsWhereUniqueInputSchema: z.ZodType<Prisma.EntityRelationsWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => EntityRelationsWhereInputSchema),z.lazy(() => EntityRelationsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EntityRelationsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EntityRelationsWhereInputSchema),z.lazy(() => EntityRelationsWhereInputSchema).array() ]).optional(),
  owner_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => EnumEntityRelationTypeFilterSchema),z.lazy(() => EntityRelationTypeSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  UserRelatedWithEntity: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  EntityRelatedWithUser: z.union([ z.lazy(() => EntityRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional(),
}).strict());

export const EntityRelationsOrderByWithAggregationInputSchema: z.ZodType<Prisma.EntityRelationsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => EntityRelationsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EntityRelationsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EntityRelationsMinOrderByAggregateInputSchema).optional()
}).strict();

export const EntityRelationsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EntityRelationsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EntityRelationsScalarWhereWithAggregatesInputSchema),z.lazy(() => EntityRelationsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EntityRelationsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EntityRelationsScalarWhereWithAggregatesInputSchema),z.lazy(() => EntityRelationsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  owner_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  entity_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => EnumEntityRelationTypeWithAggregatesFilterSchema),z.lazy(() => EntityRelationTypeSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const LogsWhereInputSchema: z.ZodType<Prisma.LogsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LogsWhereInputSchema),z.lazy(() => LogsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LogsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LogsWhereInputSchema),z.lazy(() => LogsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const LogsOrderByWithRelationInputSchema: z.ZodType<Prisma.LogsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const LogsWhereUniqueInputSchema: z.ZodType<Prisma.LogsWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => LogsWhereInputSchema),z.lazy(() => LogsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LogsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LogsWhereInputSchema),z.lazy(() => LogsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const LogsOrderByWithAggregationInputSchema: z.ZodType<Prisma.LogsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => LogsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LogsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LogsMinOrderByAggregateInputSchema).optional()
}).strict();

export const LogsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LogsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LogsScalarWhereWithAggregatesInputSchema),z.lazy(() => LogsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LogsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LogsScalarWhereWithAggregatesInputSchema),z.lazy(() => LogsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const FeiWhereInputSchema: z.ZodType<Prisma.FeiWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FeiWhereInputSchema),z.lazy(() => FeiWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeiWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeiWhereInputSchema),z.lazy(() => FeiWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date_mise_a_mort: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_by_user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_current_owner_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => EnumUserRolesNullableFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => EnumUserRolesNullableFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => EnumUserRolesNullableFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  svi_commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_signed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseListRelationFilterSchema).optional(),
  FeiCreatedByUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  FeiPremierDetenteurUser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  FeiExaminateurInitialUser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  FeiDepotEntity: z.union([ z.lazy(() => EntityNullableRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional().nullable(),
  FeiSviEntity: z.union([ z.lazy(() => EntityNullableRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional().nullable(),
  FeiSviUser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireListRelationFilterSchema).optional(),
  FeiCurrentUser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  FeiCurrentEntity: z.union([ z.lazy(() => EntityNullableRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional().nullable(),
  FeiNextEntity: z.union([ z.lazy(() => EntityNullableRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional().nullable(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireListRelationFilterSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiListRelationFilterSchema).optional()
}).strict();

export const FeiOrderByWithRelationInputSchema: z.ZodType<Prisma.FeiOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  numero: z.lazy(() => SortOrderSchema).optional(),
  date_mise_a_mort: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  commune_mise_a_mort: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_by_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_current_owner_entity_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_current_owner_role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_current_owner_wants_to_transfer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_next_owner_user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_next_owner_entity_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_next_owner_role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_prev_owner_user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_prev_owner_entity_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_prev_owner_role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  examinateur_initial_user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  premier_detenteur_user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  premier_detenteur_depot_entity_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  premier_detenteur_depot_sauvage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_entity_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_carcasses_saisies: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_aucune_carcasse_saisie: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_commentaire: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_signed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Carcasses: z.lazy(() => CarcasseOrderByRelationAggregateInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityOrderByWithRelationInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityOrderByWithRelationInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireOrderByRelationAggregateInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityOrderByWithRelationInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityOrderByWithRelationInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireOrderByRelationAggregateInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiOrderByRelationAggregateInputSchema).optional()
}).strict();

export const FeiWhereUniqueInputSchema: z.ZodType<Prisma.FeiWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    numero: z.string()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    numero: z.string(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  numero: z.string().optional(),
  AND: z.union([ z.lazy(() => FeiWhereInputSchema),z.lazy(() => FeiWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeiWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeiWhereInputSchema),z.lazy(() => FeiWhereInputSchema).array() ]).optional(),
  date_mise_a_mort: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_by_user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_current_owner_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => EnumUserRolesNullableFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => EnumUserRolesNullableFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => EnumUserRolesNullableFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  svi_commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_signed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseListRelationFilterSchema).optional(),
  FeiCreatedByUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  FeiPremierDetenteurUser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  FeiExaminateurInitialUser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  FeiDepotEntity: z.union([ z.lazy(() => EntityNullableRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional().nullable(),
  FeiSviEntity: z.union([ z.lazy(() => EntityNullableRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional().nullable(),
  FeiSviUser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireListRelationFilterSchema).optional(),
  FeiCurrentUser: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
  FeiCurrentEntity: z.union([ z.lazy(() => EntityNullableRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional().nullable(),
  FeiNextEntity: z.union([ z.lazy(() => EntityNullableRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional().nullable(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireListRelationFilterSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiListRelationFilterSchema).optional()
}).strict());

export const FeiOrderByWithAggregationInputSchema: z.ZodType<Prisma.FeiOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  numero: z.lazy(() => SortOrderSchema).optional(),
  date_mise_a_mort: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  commune_mise_a_mort: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_by_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_current_owner_entity_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_current_owner_role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_current_owner_wants_to_transfer: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_next_owner_user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_next_owner_entity_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_next_owner_role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_prev_owner_user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_prev_owner_entity_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fei_prev_owner_role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  examinateur_initial_user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  premier_detenteur_user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  premier_detenteur_depot_entity_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  premier_detenteur_depot_sauvage: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_entity_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_user_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_carcasses_saisies: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_aucune_carcasse_saisie: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_commentaire: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_signed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => FeiCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => FeiAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FeiMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FeiMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => FeiSumOrderByAggregateInputSchema).optional()
}).strict();

export const FeiScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FeiScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FeiScalarWhereWithAggregatesInputSchema),z.lazy(() => FeiScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeiScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeiScalarWhereWithAggregatesInputSchema),z.lazy(() => FeiScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  numero: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  date_mise_a_mort: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_by_user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fei_current_owner_user_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => EnumUserRolesNullableWithAggregatesFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => EnumUserRolesNullableWithAggregatesFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => EnumUserRolesNullableWithAggregatesFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  svi_entity_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  svi_user_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  svi_commentaire: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  svi_signed_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const CarcasseWhereInputSchema: z.ZodType<Prisma.CarcasseWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CarcasseWhereInputSchema),z.lazy(() => CarcasseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CarcasseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CarcasseWhereInputSchema),z.lazy(() => CarcasseWhereInputSchema).array() ]).optional(),
  numero_bracelet: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  heure_mise_a_mort: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  heure_evisceration: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  espece: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categorie: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.lazy(() => StringNullableListFilterSchema).optional(),
  examinateur_anomalies_abats: z.lazy(() => StringNullableListFilterSchema).optional(),
  examinateur_commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.lazy(() => StringNullableListFilterSchema).optional(),
  svi_carcasse_saisie_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Fei: z.union([ z.lazy(() => FeiRelationFilterSchema),z.lazy(() => FeiWhereInputSchema) ]).optional(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireListRelationFilterSchema).optional(),
  FeiIntermediaireCarcasseRefus: z.union([ z.lazy(() => FeiIntermediaireNullableRelationFilterSchema),z.lazy(() => FeiIntermediaireWhereInputSchema) ]).optional().nullable(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireListRelationFilterSchema).optional()
}).strict();

export const CarcasseOrderByWithRelationInputSchema: z.ZodType<Prisma.CarcasseOrderByWithRelationInput> = z.object({
  numero_bracelet: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  heure_mise_a_mort: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  heure_evisceration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  espece: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  categorie: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  examinateur_carcasse_sans_anomalie: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  examinateur_anomalies_carcasse: z.lazy(() => SortOrderSchema).optional(),
  examinateur_anomalies_abats: z.lazy(() => SortOrderSchema).optional(),
  examinateur_commentaire: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  examinateur_signed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  intermediaire_carcasse_refus_intermediaire_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  intermediaire_carcasse_refus_motif: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  intermediaire_carcasse_signed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  intermediaire_carcasse_commentaire: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_carcasse_saisie: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_carcasse_saisie_motif: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_saisie_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_carcasse_signed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_carcasse_commentaire: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Fei: z.lazy(() => FeiOrderByWithRelationInputSchema).optional(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireOrderByRelationAggregateInputSchema).optional(),
  FeiIntermediaireCarcasseRefus: z.lazy(() => FeiIntermediaireOrderByWithRelationInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireOrderByRelationAggregateInputSchema).optional()
}).strict();

export const CarcasseWhereUniqueInputSchema: z.ZodType<Prisma.CarcasseWhereUniqueInput> = z.object({
  numero_bracelet: z.string()
})
.and(z.object({
  numero_bracelet: z.string().optional(),
  AND: z.union([ z.lazy(() => CarcasseWhereInputSchema),z.lazy(() => CarcasseWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CarcasseWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CarcasseWhereInputSchema),z.lazy(() => CarcasseWhereInputSchema).array() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  heure_mise_a_mort: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  heure_evisceration: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  espece: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categorie: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.lazy(() => StringNullableListFilterSchema).optional(),
  examinateur_anomalies_abats: z.lazy(() => StringNullableListFilterSchema).optional(),
  examinateur_commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.lazy(() => StringNullableListFilterSchema).optional(),
  svi_carcasse_saisie_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Fei: z.union([ z.lazy(() => FeiRelationFilterSchema),z.lazy(() => FeiWhereInputSchema) ]).optional(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireListRelationFilterSchema).optional(),
  FeiIntermediaireCarcasseRefus: z.union([ z.lazy(() => FeiIntermediaireNullableRelationFilterSchema),z.lazy(() => FeiIntermediaireWhereInputSchema) ]).optional().nullable(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireListRelationFilterSchema).optional()
}).strict());

export const CarcasseOrderByWithAggregationInputSchema: z.ZodType<Prisma.CarcasseOrderByWithAggregationInput> = z.object({
  numero_bracelet: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  heure_mise_a_mort: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  heure_evisceration: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  espece: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  categorie: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  examinateur_carcasse_sans_anomalie: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  examinateur_anomalies_carcasse: z.lazy(() => SortOrderSchema).optional(),
  examinateur_anomalies_abats: z.lazy(() => SortOrderSchema).optional(),
  examinateur_commentaire: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  examinateur_signed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  intermediaire_carcasse_refus_intermediaire_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  intermediaire_carcasse_refus_motif: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  intermediaire_carcasse_signed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  intermediaire_carcasse_commentaire: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_carcasse_saisie: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_carcasse_saisie_motif: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_saisie_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_carcasse_signed_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  svi_carcasse_commentaire: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => CarcasseCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CarcasseMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CarcasseMinOrderByAggregateInputSchema).optional()
}).strict();

export const CarcasseScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CarcasseScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CarcasseScalarWhereWithAggregatesInputSchema),z.lazy(() => CarcasseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CarcasseScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CarcasseScalarWhereWithAggregatesInputSchema),z.lazy(() => CarcasseScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  numero_bracelet: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  heure_mise_a_mort: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  heure_evisceration: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  espece: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  categorie: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.lazy(() => StringNullableListFilterSchema).optional(),
  examinateur_anomalies_abats: z.lazy(() => StringNullableListFilterSchema).optional(),
  examinateur_commentaire: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.lazy(() => StringNullableListFilterSchema).optional(),
  svi_carcasse_saisie_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const InterventionOnFeiWhereInputSchema: z.ZodType<Prisma.InterventionOnFeiWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InterventionOnFeiWhereInputSchema),z.lazy(() => InterventionOnFeiWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InterventionOnFeiWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InterventionOnFeiWhereInputSchema),z.lazy(() => InterventionOnFeiWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRolesFilterSchema),z.lazy(() => UserRolesSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Fei: z.union([ z.lazy(() => FeiRelationFilterSchema),z.lazy(() => FeiWhereInputSchema) ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  Entity: z.union([ z.lazy(() => EntityRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional(),
}).strict();

export const InterventionOnFeiOrderByWithRelationInputSchema: z.ZodType<Prisma.InterventionOnFeiOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Fei: z.lazy(() => FeiOrderByWithRelationInputSchema).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  Entity: z.lazy(() => EntityOrderByWithRelationInputSchema).optional()
}).strict();

export const InterventionOnFeiWhereUniqueInputSchema: z.ZodType<Prisma.InterventionOnFeiWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => InterventionOnFeiWhereInputSchema),z.lazy(() => InterventionOnFeiWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InterventionOnFeiWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InterventionOnFeiWhereInputSchema),z.lazy(() => InterventionOnFeiWhereInputSchema).array() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRolesFilterSchema),z.lazy(() => UserRolesSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Fei: z.union([ z.lazy(() => FeiRelationFilterSchema),z.lazy(() => FeiWhereInputSchema) ]).optional(),
  User: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  Entity: z.union([ z.lazy(() => EntityRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional(),
}).strict());

export const InterventionOnFeiOrderByWithAggregationInputSchema: z.ZodType<Prisma.InterventionOnFeiOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => InterventionOnFeiCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => InterventionOnFeiMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => InterventionOnFeiMinOrderByAggregateInputSchema).optional()
}).strict();

export const InterventionOnFeiScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.InterventionOnFeiScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => InterventionOnFeiScalarWhereWithAggregatesInputSchema),z.lazy(() => InterventionOnFeiScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => InterventionOnFeiScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InterventionOnFeiScalarWhereWithAggregatesInputSchema),z.lazy(() => InterventionOnFeiScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  entity_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRolesWithAggregatesFilterSchema),z.lazy(() => UserRolesSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const FeiIntermediaireWhereInputSchema: z.ZodType<Prisma.FeiIntermediaireWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FeiIntermediaireWhereInputSchema),z.lazy(() => FeiIntermediaireWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeiIntermediaireWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeiIntermediaireWhereInputSchema),z.lazy(() => FeiIntermediaireWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => EnumUserRolesNullableFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  received_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  check_finished_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  handover_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Fei: z.union([ z.lazy(() => FeiRelationFilterSchema),z.lazy(() => FeiWhereInputSchema) ]).optional(),
  FeiIntermediaireUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  FeiIntermediaireEntity: z.union([ z.lazy(() => EntityRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseListRelationFilterSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseListRelationFilterSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireListRelationFilterSchema).optional()
}).strict();

export const FeiIntermediaireOrderByWithRelationInputSchema: z.ZodType<Prisma.FeiIntermediaireOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  commentaire: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  received_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  check_finished_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  handover_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  Fei: z.lazy(() => FeiOrderByWithRelationInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => EntityOrderByWithRelationInputSchema).optional(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseOrderByRelationAggregateInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseOrderByRelationAggregateInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireOrderByRelationAggregateInputSchema).optional()
}).strict();

export const FeiIntermediaireWhereUniqueInputSchema: z.ZodType<Prisma.FeiIntermediaireWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => FeiIntermediaireWhereInputSchema),z.lazy(() => FeiIntermediaireWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeiIntermediaireWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeiIntermediaireWhereInputSchema),z.lazy(() => FeiIntermediaireWhereInputSchema).array() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => EnumUserRolesNullableFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  received_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  check_finished_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  handover_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  Fei: z.union([ z.lazy(() => FeiRelationFilterSchema),z.lazy(() => FeiWhereInputSchema) ]).optional(),
  FeiIntermediaireUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  FeiIntermediaireEntity: z.union([ z.lazy(() => EntityRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseListRelationFilterSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseListRelationFilterSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireListRelationFilterSchema).optional()
}).strict());

export const FeiIntermediaireOrderByWithAggregationInputSchema: z.ZodType<Prisma.FeiIntermediaireOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  commentaire: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  received_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  check_finished_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  handover_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => FeiIntermediaireCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FeiIntermediaireMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FeiIntermediaireMinOrderByAggregateInputSchema).optional()
}).strict();

export const FeiIntermediaireScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FeiIntermediaireScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FeiIntermediaireScalarWhereWithAggregatesInputSchema),z.lazy(() => FeiIntermediaireScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeiIntermediaireScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeiIntermediaireScalarWhereWithAggregatesInputSchema),z.lazy(() => FeiIntermediaireScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fei_intermediaire_user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => EnumUserRolesNullableWithAggregatesFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  commentaire: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  received_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  check_finished_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  handover_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireWhereInputSchema: z.ZodType<Prisma.CarcasseIntermediaireWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CarcasseIntermediaireWhereInputSchema),z.lazy(() => CarcasseIntermediaireWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CarcasseIntermediaireWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CarcasseIntermediaireWhereInputSchema),z.lazy(() => CarcasseIntermediaireWhereInputSchema).array() ]).optional(),
  fei_numero__bracelet__intermediaire_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  numero_bracelet: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  prise_en_charge: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  refus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  CarcasseIntermediaireFei: z.union([ z.lazy(() => FeiRelationFilterSchema),z.lazy(() => FeiWhereInputSchema) ]).optional(),
  CarcasseCarcasseIntermediaire: z.union([ z.lazy(() => CarcasseRelationFilterSchema),z.lazy(() => CarcasseWhereInputSchema) ]).optional(),
  CarcasseIntermediaireUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  CarcasseIntermediaireEntity: z.union([ z.lazy(() => EntityRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  CarcasseIntermediaireFeiIntermediaire: z.union([ z.lazy(() => FeiIntermediaireRelationFilterSchema),z.lazy(() => FeiIntermediaireWhereInputSchema) ]).optional(),
}).strict();

export const CarcasseIntermediaireOrderByWithRelationInputSchema: z.ZodType<Prisma.CarcasseIntermediaireOrderByWithRelationInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  numero_bracelet: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_entity_id: z.lazy(() => SortOrderSchema).optional(),
  prise_en_charge: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refus: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  commentaire: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  carcasse_check_finished_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  CarcasseIntermediaireFei: z.lazy(() => FeiOrderByWithRelationInputSchema).optional(),
  CarcasseCarcasseIntermediaire: z.lazy(() => CarcasseOrderByWithRelationInputSchema).optional(),
  CarcasseIntermediaireUser: z.lazy(() => UserOrderByWithRelationInputSchema).optional(),
  CarcasseIntermediaireEntity: z.lazy(() => EntityOrderByWithRelationInputSchema).optional(),
  CarcasseIntermediaireFeiIntermediaire: z.lazy(() => FeiIntermediaireOrderByWithRelationInputSchema).optional()
}).strict();

export const CarcasseIntermediaireWhereUniqueInputSchema: z.ZodType<Prisma.CarcasseIntermediaireWhereUniqueInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string()
})
.and(z.object({
  fei_numero__bracelet__intermediaire_id: z.string().optional(),
  AND: z.union([ z.lazy(() => CarcasseIntermediaireWhereInputSchema),z.lazy(() => CarcasseIntermediaireWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CarcasseIntermediaireWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CarcasseIntermediaireWhereInputSchema),z.lazy(() => CarcasseIntermediaireWhereInputSchema).array() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  numero_bracelet: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  prise_en_charge: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  refus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  CarcasseIntermediaireFei: z.union([ z.lazy(() => FeiRelationFilterSchema),z.lazy(() => FeiWhereInputSchema) ]).optional(),
  CarcasseCarcasseIntermediaire: z.union([ z.lazy(() => CarcasseRelationFilterSchema),z.lazy(() => CarcasseWhereInputSchema) ]).optional(),
  CarcasseIntermediaireUser: z.union([ z.lazy(() => UserRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
  CarcasseIntermediaireEntity: z.union([ z.lazy(() => EntityRelationFilterSchema),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  CarcasseIntermediaireFeiIntermediaire: z.union([ z.lazy(() => FeiIntermediaireRelationFilterSchema),z.lazy(() => FeiIntermediaireWhereInputSchema) ]).optional(),
}).strict());

export const CarcasseIntermediaireOrderByWithAggregationInputSchema: z.ZodType<Prisma.CarcasseIntermediaireOrderByWithAggregationInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  numero_bracelet: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_entity_id: z.lazy(() => SortOrderSchema).optional(),
  prise_en_charge: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  refus: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  commentaire: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  carcasse_check_finished_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => CarcasseIntermediaireCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => CarcasseIntermediaireMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => CarcasseIntermediaireMinOrderByAggregateInputSchema).optional()
}).strict();

export const CarcasseIntermediaireScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.CarcasseIntermediaireScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereWithAggregatesInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => CarcasseIntermediaireScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereWithAggregatesInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  fei_numero__bracelet__intermediaire_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  numero_bracelet: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fei_intermediaire_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fei_intermediaire_user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  prise_en_charge: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  refus: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  commentaire: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const NotificationLogWhereInputSchema: z.ZodType<Prisma.NotificationLogWhereInput> = z.object({
  AND: z.union([ z.lazy(() => NotificationLogWhereInputSchema),z.lazy(() => NotificationLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => NotificationLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NotificationLogWhereInputSchema),z.lazy(() => NotificationLogWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumUserNotificationsFilterSchema),z.lazy(() => UserNotificationsSchema) ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  web_push_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  payload: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict();

export const NotificationLogOrderByWithRelationInputSchema: z.ZodType<Prisma.NotificationLogOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  web_push_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  payload: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  User: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const NotificationLogWhereUniqueInputSchema: z.ZodType<Prisma.NotificationLogWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => NotificationLogWhereInputSchema),z.lazy(() => NotificationLogWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => NotificationLogWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NotificationLogWhereInputSchema),z.lazy(() => NotificationLogWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => EnumUserNotificationsFilterSchema),z.lazy(() => UserNotificationsSchema) ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  web_push_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  payload: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  User: z.union([ z.lazy(() => UserNullableRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional().nullable(),
}).strict());

export const NotificationLogOrderByWithAggregationInputSchema: z.ZodType<Prisma.NotificationLogOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  web_push_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  payload: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => NotificationLogCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => NotificationLogMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => NotificationLogMinOrderByAggregateInputSchema).optional()
}).strict();

export const NotificationLogScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.NotificationLogScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => NotificationLogScalarWhereWithAggregatesInputSchema),z.lazy(() => NotificationLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => NotificationLogScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NotificationLogScalarWhereWithAggregatesInputSchema),z.lazy(() => NotificationLogScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumUserNotificationsWithAggregatesFilterSchema),z.lazy(() => UserNotificationsSchema) ]).optional(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  web_push_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  payload: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EntityCreateInputSchema: z.ZodType<Prisma.EntityCreateInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntity_oppositeInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityUncheckedCreateInputSchema: z.ZodType<Prisma.EntityUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  coupled_entity_id: z.string().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityUpdateInputSchema: z.ZodType<Prisma.EntityUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityUpdateOneWithoutCoupledEntity_oppositeNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityUncheckedUpdateInputSchema: z.ZodType<Prisma.EntityUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  coupled_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityCreateManyInputSchema: z.ZodType<Prisma.EntityCreateManyInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  coupled_entity_id: z.string().optional().nullable(),
  prefilled: z.boolean().optional()
}).strict();

export const EntityUpdateManyMutationInputSchema: z.ZodType<Prisma.EntityUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EntityUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EntityUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  coupled_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PasswordCreateInputSchema: z.ZodType<Prisma.PasswordCreateInput> = z.object({
  id: z.string().optional(),
  password: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutPasswordInputSchema)
}).strict();

export const PasswordUncheckedCreateInputSchema: z.ZodType<Prisma.PasswordUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  password: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const PasswordUpdateInputSchema: z.ZodType<Prisma.PasswordUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutPasswordNestedInputSchema).optional()
}).strict();

export const PasswordUncheckedUpdateInputSchema: z.ZodType<Prisma.PasswordUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasswordCreateManyInputSchema: z.ZodType<Prisma.PasswordCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  password: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const PasswordUpdateManyMutationInputSchema: z.ZodType<Prisma.PasswordUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasswordUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PasswordUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserRelationsCreateInputSchema: z.ZodType<Prisma.UserRelationsCreateInput> = z.object({
  id: z.string().optional(),
  relation: z.lazy(() => UserRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  UserOwnerOfUserRelation: z.lazy(() => UserCreateNestedOneWithoutUserRelationsAsOwnerInputSchema),
  UserRelatedOfUserRelation: z.lazy(() => UserCreateNestedOneWithoutUserRelationsAsRelatedInputSchema)
}).strict();

export const UserRelationsUncheckedCreateInputSchema: z.ZodType<Prisma.UserRelationsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  owner_id: z.string(),
  related_id: z.string(),
  relation: z.lazy(() => UserRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const UserRelationsUpdateInputSchema: z.ZodType<Prisma.UserRelationsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => EnumUserRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserOwnerOfUserRelation: z.lazy(() => UserUpdateOneRequiredWithoutUserRelationsAsOwnerNestedInputSchema).optional(),
  UserRelatedOfUserRelation: z.lazy(() => UserUpdateOneRequiredWithoutUserRelationsAsRelatedNestedInputSchema).optional()
}).strict();

export const UserRelationsUncheckedUpdateInputSchema: z.ZodType<Prisma.UserRelationsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  related_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => EnumUserRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserRelationsCreateManyInputSchema: z.ZodType<Prisma.UserRelationsCreateManyInput> = z.object({
  id: z.string().optional(),
  owner_id: z.string(),
  related_id: z.string(),
  relation: z.lazy(() => UserRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const UserRelationsUpdateManyMutationInputSchema: z.ZodType<Prisma.UserRelationsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => EnumUserRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserRelationsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserRelationsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  related_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => EnumUserRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EntityRelationsCreateInputSchema: z.ZodType<Prisma.EntityRelationsCreateInput> = z.object({
  id: z.string().optional(),
  relation: z.lazy(() => EntityRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  UserRelatedWithEntity: z.lazy(() => UserCreateNestedOneWithoutEntitiesRelationsInputSchema),
  EntityRelatedWithUser: z.lazy(() => EntityCreateNestedOneWithoutEntityRelatedWithUserInputSchema)
}).strict();

export const EntityRelationsUncheckedCreateInputSchema: z.ZodType<Prisma.EntityRelationsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  owner_id: z.string(),
  entity_id: z.string(),
  relation: z.lazy(() => EntityRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const EntityRelationsUpdateInputSchema: z.ZodType<Prisma.EntityRelationsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => EnumEntityRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserRelatedWithEntity: z.lazy(() => UserUpdateOneRequiredWithoutEntitiesRelationsNestedInputSchema).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityUpdateOneRequiredWithoutEntityRelatedWithUserNestedInputSchema).optional()
}).strict();

export const EntityRelationsUncheckedUpdateInputSchema: z.ZodType<Prisma.EntityRelationsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => EnumEntityRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EntityRelationsCreateManyInputSchema: z.ZodType<Prisma.EntityRelationsCreateManyInput> = z.object({
  id: z.string().optional(),
  owner_id: z.string(),
  entity_id: z.string(),
  relation: z.lazy(() => EntityRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const EntityRelationsUpdateManyMutationInputSchema: z.ZodType<Prisma.EntityRelationsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => EnumEntityRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EntityRelationsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EntityRelationsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => EnumEntityRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LogsCreateInputSchema: z.ZodType<Prisma.LogsCreateInput> = z.object({
  id: z.string().optional(),
  action: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutLogsInputSchema).optional()
}).strict();

export const LogsUncheckedCreateInputSchema: z.ZodType<Prisma.LogsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  action: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const LogsUpdateInputSchema: z.ZodType<Prisma.LogsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutLogsNestedInputSchema).optional()
}).strict();

export const LogsUncheckedUpdateInputSchema: z.ZodType<Prisma.LogsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LogsCreateManyInputSchema: z.ZodType<Prisma.LogsCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  action: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const LogsUpdateManyMutationInputSchema: z.ZodType<Prisma.LogsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LogsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LogsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiCreateInputSchema: z.ZodType<Prisma.FeiCreateInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserCreateNestedOneWithoutFeiCreatedByUserInputSchema),
  FeiPremierDetenteurUser: z.lazy(() => UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiSviEntityInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserCreateNestedOneWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserCreateNestedOneWithoutFeiCurrentUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiNextEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateInputSchema: z.ZodType<Prisma.FeiUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUpdateInputSchema: z.ZodType<Prisma.FeiUpdateInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityUpdateOneWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserUpdateOneWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserUpdateOneWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityUpdateOneWithoutFeiNextEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiCreateManyInputSchema: z.ZodType<Prisma.FeiCreateManyInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiUpdateManyMutationInputSchema: z.ZodType<Prisma.FeiUpdateManyMutationInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseCreateInputSchema: z.ZodType<Prisma.CarcasseCreateInput> = z.object({
  numero_bracelet: z.string(),
  heure_mise_a_mort: z.string().optional().nullable(),
  heure_evisceration: z.string().optional().nullable(),
  espece: z.string().optional().nullable(),
  categorie: z.string().optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.string().optional().nullable(),
  examinateur_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_refus_motif: z.string().optional().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_commentaire: z.string().optional().nullable(),
  svi_carcasse_saisie: z.boolean().optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseCreatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.coerce.date().optional().nullable(),
  svi_carcasse_signed_at: z.coerce.date().optional().nullable(),
  svi_carcasse_commentaire: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Fei: z.lazy(() => FeiCreateNestedOneWithoutCarcassesInputSchema),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediairesCarcassesInputSchema).optional(),
  FeiIntermediaireCarcasseRefus: z.lazy(() => FeiIntermediaireCreateNestedOneWithoutFeiIntermediaireCarcassesRefusInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseCarcasseIntermediaireInputSchema).optional()
}).strict();

export const CarcasseUncheckedCreateInputSchema: z.ZodType<Prisma.CarcasseUncheckedCreateInput> = z.object({
  numero_bracelet: z.string(),
  fei_numero: z.string(),
  heure_mise_a_mort: z.string().optional().nullable(),
  heure_evisceration: z.string().optional().nullable(),
  espece: z.string().optional().nullable(),
  categorie: z.string().optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.string().optional().nullable(),
  examinateur_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.string().optional().nullable(),
  intermediaire_carcasse_refus_motif: z.string().optional().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_commentaire: z.string().optional().nullable(),
  svi_carcasse_saisie: z.boolean().optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseCreatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.coerce.date().optional().nullable(),
  svi_carcasse_signed_at: z.coerce.date().optional().nullable(),
  svi_carcasse_commentaire: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediairesCarcassesInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseCarcasseIntermediaireInputSchema).optional()
}).strict();

export const CarcasseUpdateInputSchema: z.ZodType<Prisma.CarcasseUpdateInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fei: z.lazy(() => FeiUpdateOneRequiredWithoutCarcassesNestedInputSchema).optional(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediairesCarcassesNestedInputSchema).optional(),
  FeiIntermediaireCarcasseRefus: z.lazy(() => FeiIntermediaireUpdateOneWithoutFeiIntermediaireCarcassesRefusNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseUncheckedUpdateInputSchema: z.ZodType<Prisma.CarcasseUncheckedUpdateInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediairesCarcassesNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseCreateManyInputSchema: z.ZodType<Prisma.CarcasseCreateManyInput> = z.object({
  numero_bracelet: z.string(),
  fei_numero: z.string(),
  heure_mise_a_mort: z.string().optional().nullable(),
  heure_evisceration: z.string().optional().nullable(),
  espece: z.string().optional().nullable(),
  categorie: z.string().optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.string().optional().nullable(),
  examinateur_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.string().optional().nullable(),
  intermediaire_carcasse_refus_motif: z.string().optional().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_commentaire: z.string().optional().nullable(),
  svi_carcasse_saisie: z.boolean().optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseCreatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.coerce.date().optional().nullable(),
  svi_carcasse_signed_at: z.coerce.date().optional().nullable(),
  svi_carcasse_commentaire: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseUpdateManyMutationInputSchema: z.ZodType<Prisma.CarcasseUpdateManyMutationInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CarcasseUncheckedUpdateManyInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InterventionOnFeiCreateInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateInput> = z.object({
  id: z.string().optional(),
  role: z.lazy(() => UserRolesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Fei: z.lazy(() => FeiCreateNestedOneWithoutInterventionOnFeiInputSchema),
  User: z.lazy(() => UserCreateNestedOneWithoutInterventionOnFeiInputSchema),
  Entity: z.lazy(() => EntityCreateNestedOneWithoutInterventionOnFeiInputSchema)
}).strict();

export const InterventionOnFeiUncheckedCreateInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  fei_numero: z.string(),
  user_id: z.string(),
  entity_id: z.string(),
  role: z.lazy(() => UserRolesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const InterventionOnFeiUpdateInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => EnumUserRolesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fei: z.lazy(() => FeiUpdateOneRequiredWithoutInterventionOnFeiNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutInterventionOnFeiNestedInputSchema).optional(),
  Entity: z.lazy(() => EntityUpdateOneRequiredWithoutInterventionOnFeiNestedInputSchema).optional()
}).strict();

export const InterventionOnFeiUncheckedUpdateInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => EnumUserRolesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InterventionOnFeiCreateManyInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateManyInput> = z.object({
  id: z.string().optional(),
  fei_numero: z.string(),
  user_id: z.string(),
  entity_id: z.string(),
  role: z.lazy(() => UserRolesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const InterventionOnFeiUpdateManyMutationInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => EnumUserRolesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InterventionOnFeiUncheckedUpdateManyInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => EnumUserRolesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiIntermediaireCreateInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateInput> = z.object({
  id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Fei: z.lazy(() => FeiCreateNestedOneWithoutFeiIntermediairesInputSchema),
  FeiIntermediaireUser: z.lazy(() => UserCreateNestedOneWithoutFeiIntermediaireUserInputSchema),
  FeiIntermediaireEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiIntermediaireEntityInputSchema),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedCreateInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedCreateInput> = z.object({
  id: z.string(),
  fei_numero: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).optional()
}).strict();

export const FeiIntermediaireUpdateInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fei: z.lazy(() => FeiUpdateOneRequiredWithoutFeiIntermediairesNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => EntityUpdateOneRequiredWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedUpdateInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireCreateManyInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateManyInput> = z.object({
  id: z.string(),
  fei_numero: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiIntermediaireUpdateManyMutationInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiIntermediaireUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireCreateInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  CarcasseIntermediaireFei: z.lazy(() => FeiCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseCarcasseIntermediaire: z.lazy(() => CarcasseCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireUser: z.lazy(() => UserCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireEntity: z.lazy(() => EntityCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireFeiIntermediaire: z.lazy(() => FeiIntermediaireCreateNestedOneWithoutCarcasseIntermediaireInputSchema)
}).strict();

export const CarcasseIntermediaireUncheckedCreateInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedCreateInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  fei_numero: z.string(),
  numero_bracelet: z.string(),
  fei_intermediaire_id: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseIntermediaireUpdateInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CarcasseIntermediaireFei: z.lazy(() => FeiUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseCarcasseIntermediaire: z.lazy(() => CarcasseUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireUser: z.lazy(() => UserUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireEntity: z.lazy(() => EntityUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireFeiIntermediaire: z.lazy(() => FeiIntermediaireUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseIntermediaireUncheckedUpdateInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireCreateManyInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateManyInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  fei_numero: z.string(),
  numero_bracelet: z.string(),
  fei_intermediaire_id: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseIntermediaireUpdateManyMutationInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateManyMutationInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireUncheckedUpdateManyInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateManyInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const NotificationLogCreateInputSchema: z.ZodType<Prisma.NotificationLogCreateInput> = z.object({
  id: z.string().optional(),
  type: z.lazy(() => UserNotificationsSchema),
  email: z.string().optional().nullable(),
  web_push_token: z.string().optional().nullable(),
  action: z.string(),
  payload: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutNotificationLogInputSchema).optional()
}).strict();

export const NotificationLogUncheckedCreateInputSchema: z.ZodType<Prisma.NotificationLogUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  type: z.lazy(() => UserNotificationsSchema),
  email: z.string().optional().nullable(),
  web_push_token: z.string().optional().nullable(),
  user_id: z.string(),
  action: z.string(),
  payload: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const NotificationLogUpdateInputSchema: z.ZodType<Prisma.NotificationLogUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => UserNotificationsSchema),z.lazy(() => EnumUserNotificationsFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_push_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payload: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneWithoutNotificationLogNestedInputSchema).optional()
}).strict();

export const NotificationLogUncheckedUpdateInputSchema: z.ZodType<Prisma.NotificationLogUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => UserNotificationsSchema),z.lazy(() => EnumUserNotificationsFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_push_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payload: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const NotificationLogCreateManyInputSchema: z.ZodType<Prisma.NotificationLogCreateManyInput> = z.object({
  id: z.string().optional(),
  type: z.lazy(() => UserNotificationsSchema),
  email: z.string().optional().nullable(),
  web_push_token: z.string().optional().nullable(),
  user_id: z.string(),
  action: z.string(),
  payload: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const NotificationLogUpdateManyMutationInputSchema: z.ZodType<Prisma.NotificationLogUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => UserNotificationsSchema),z.lazy(() => EnumUserNotificationsFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_push_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payload: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const NotificationLogUncheckedUpdateManyInputSchema: z.ZodType<Prisma.NotificationLogUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => UserNotificationsSchema),z.lazy(() => EnumUserNotificationsFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_push_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payload: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const EnumUserRolesNullableListFilterSchema: z.ZodType<Prisma.EnumUserRolesNullableListFilter> = z.object({
  equals: z.lazy(() => UserRolesSchema).array().optional().nullable(),
  has: z.lazy(() => UserRolesSchema).optional().nullable(),
  hasEvery: z.lazy(() => UserRolesSchema).array().optional(),
  hasSome: z.lazy(() => UserRolesSchema).array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const EnumUserNotificationsNullableListFilterSchema: z.ZodType<Prisma.EnumUserNotificationsNullableListFilter> = z.object({
  equals: z.lazy(() => UserNotificationsSchema).array().optional().nullable(),
  has: z.lazy(() => UserNotificationsSchema).optional().nullable(),
  hasEvery: z.lazy(() => UserNotificationsSchema).array().optional(),
  hasSome: z.lazy(() => UserNotificationsSchema).array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const PasswordNullableRelationFilterSchema: z.ZodType<Prisma.PasswordNullableRelationFilter> = z.object({
  is: z.lazy(() => PasswordWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => PasswordWhereInputSchema).optional().nullable()
}).strict();

export const UserRelationsListRelationFilterSchema: z.ZodType<Prisma.UserRelationsListRelationFilter> = z.object({
  every: z.lazy(() => UserRelationsWhereInputSchema).optional(),
  some: z.lazy(() => UserRelationsWhereInputSchema).optional(),
  none: z.lazy(() => UserRelationsWhereInputSchema).optional()
}).strict();

export const EntityRelationsListRelationFilterSchema: z.ZodType<Prisma.EntityRelationsListRelationFilter> = z.object({
  every: z.lazy(() => EntityRelationsWhereInputSchema).optional(),
  some: z.lazy(() => EntityRelationsWhereInputSchema).optional(),
  none: z.lazy(() => EntityRelationsWhereInputSchema).optional()
}).strict();

export const FeiListRelationFilterSchema: z.ZodType<Prisma.FeiListRelationFilter> = z.object({
  every: z.lazy(() => FeiWhereInputSchema).optional(),
  some: z.lazy(() => FeiWhereInputSchema).optional(),
  none: z.lazy(() => FeiWhereInputSchema).optional()
}).strict();

export const FeiIntermediaireListRelationFilterSchema: z.ZodType<Prisma.FeiIntermediaireListRelationFilter> = z.object({
  every: z.lazy(() => FeiIntermediaireWhereInputSchema).optional(),
  some: z.lazy(() => FeiIntermediaireWhereInputSchema).optional(),
  none: z.lazy(() => FeiIntermediaireWhereInputSchema).optional()
}).strict();

export const LogsListRelationFilterSchema: z.ZodType<Prisma.LogsListRelationFilter> = z.object({
  every: z.lazy(() => LogsWhereInputSchema).optional(),
  some: z.lazy(() => LogsWhereInputSchema).optional(),
  none: z.lazy(() => LogsWhereInputSchema).optional()
}).strict();

export const NotificationLogListRelationFilterSchema: z.ZodType<Prisma.NotificationLogListRelationFilter> = z.object({
  every: z.lazy(() => NotificationLogWhereInputSchema).optional(),
  some: z.lazy(() => NotificationLogWhereInputSchema).optional(),
  none: z.lazy(() => NotificationLogWhereInputSchema).optional()
}).strict();

export const CarcasseIntermediaireListRelationFilterSchema: z.ZodType<Prisma.CarcasseIntermediaireListRelationFilter> = z.object({
  every: z.lazy(() => CarcasseIntermediaireWhereInputSchema).optional(),
  some: z.lazy(() => CarcasseIntermediaireWhereInputSchema).optional(),
  none: z.lazy(() => CarcasseIntermediaireWhereInputSchema).optional()
}).strict();

export const InterventionOnFeiListRelationFilterSchema: z.ZodType<Prisma.InterventionOnFeiListRelationFilter> = z.object({
  every: z.lazy(() => InterventionOnFeiWhereInputSchema).optional(),
  some: z.lazy(() => InterventionOnFeiWhereInputSchema).optional(),
  none: z.lazy(() => InterventionOnFeiWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const UserRelationsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UserRelationsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EntityRelationsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EntityRelationsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeiOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FeiOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeiIntermediaireOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FeiIntermediaireOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LogsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LogsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NotificationLogOrderByRelationAggregateInputSchema: z.ZodType<Prisma.NotificationLogOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CarcasseIntermediaireOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CarcasseIntermediaireOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InterventionOnFeiOrderByRelationAggregateInputSchema: z.ZodType<Prisma.InterventionOnFeiOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  telephone: z.lazy(() => SortOrderSchema).optional(),
  prenom: z.lazy(() => SortOrderSchema).optional(),
  nom_de_famille: z.lazy(() => SortOrderSchema).optional(),
  numero_cfei: z.lazy(() => SortOrderSchema).optional(),
  addresse_ligne_1: z.lazy(() => SortOrderSchema).optional(),
  addresse_ligne_2: z.lazy(() => SortOrderSchema).optional(),
  code_postal: z.lazy(() => SortOrderSchema).optional(),
  ville: z.lazy(() => SortOrderSchema).optional(),
  user_entities_vivible_checkbox: z.lazy(() => SortOrderSchema).optional(),
  roles: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  last_login_at: z.lazy(() => SortOrderSchema).optional(),
  last_seen_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  onboarded_at: z.lazy(() => SortOrderSchema).optional(),
  notifications: z.lazy(() => SortOrderSchema).optional(),
  web_push_tokens: z.lazy(() => SortOrderSchema).optional(),
  prefilled: z.lazy(() => SortOrderSchema).optional(),
  activated: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  telephone: z.lazy(() => SortOrderSchema).optional(),
  prenom: z.lazy(() => SortOrderSchema).optional(),
  nom_de_famille: z.lazy(() => SortOrderSchema).optional(),
  numero_cfei: z.lazy(() => SortOrderSchema).optional(),
  addresse_ligne_1: z.lazy(() => SortOrderSchema).optional(),
  addresse_ligne_2: z.lazy(() => SortOrderSchema).optional(),
  code_postal: z.lazy(() => SortOrderSchema).optional(),
  ville: z.lazy(() => SortOrderSchema).optional(),
  user_entities_vivible_checkbox: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  last_login_at: z.lazy(() => SortOrderSchema).optional(),
  last_seen_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  onboarded_at: z.lazy(() => SortOrderSchema).optional(),
  prefilled: z.lazy(() => SortOrderSchema).optional(),
  activated: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  telephone: z.lazy(() => SortOrderSchema).optional(),
  prenom: z.lazy(() => SortOrderSchema).optional(),
  nom_de_famille: z.lazy(() => SortOrderSchema).optional(),
  numero_cfei: z.lazy(() => SortOrderSchema).optional(),
  addresse_ligne_1: z.lazy(() => SortOrderSchema).optional(),
  addresse_ligne_2: z.lazy(() => SortOrderSchema).optional(),
  code_postal: z.lazy(() => SortOrderSchema).optional(),
  ville: z.lazy(() => SortOrderSchema).optional(),
  user_entities_vivible_checkbox: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  last_login_at: z.lazy(() => SortOrderSchema).optional(),
  last_seen_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  onboarded_at: z.lazy(() => SortOrderSchema).optional(),
  prefilled: z.lazy(() => SortOrderSchema).optional(),
  activated: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const EnumEntityTypesFilterSchema: z.ZodType<Prisma.EnumEntityTypesFilter> = z.object({
  equals: z.lazy(() => EntityTypesSchema).optional(),
  in: z.lazy(() => EntityTypesSchema).array().optional(),
  notIn: z.lazy(() => EntityTypesSchema).array().optional(),
  not: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => NestedEnumEntityTypesFilterSchema) ]).optional(),
}).strict();

export const EntityNullableRelationFilterSchema: z.ZodType<Prisma.EntityNullableRelationFilter> = z.object({
  is: z.lazy(() => EntityWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => EntityWhereInputSchema).optional().nullable()
}).strict();

export const EntityCountOrderByAggregateInputSchema: z.ZodType<Prisma.EntityCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raison_sociale: z.lazy(() => SortOrderSchema).optional(),
  address_ligne_1: z.lazy(() => SortOrderSchema).optional(),
  address_ligne_2: z.lazy(() => SortOrderSchema).optional(),
  code_postal: z.lazy(() => SortOrderSchema).optional(),
  ville: z.lazy(() => SortOrderSchema).optional(),
  siret: z.lazy(() => SortOrderSchema).optional(),
  numero_ddecpp: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  onboarded_at: z.lazy(() => SortOrderSchema).optional(),
  coupled_entity_id: z.lazy(() => SortOrderSchema).optional(),
  prefilled: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EntityMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EntityMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raison_sociale: z.lazy(() => SortOrderSchema).optional(),
  address_ligne_1: z.lazy(() => SortOrderSchema).optional(),
  address_ligne_2: z.lazy(() => SortOrderSchema).optional(),
  code_postal: z.lazy(() => SortOrderSchema).optional(),
  ville: z.lazy(() => SortOrderSchema).optional(),
  siret: z.lazy(() => SortOrderSchema).optional(),
  numero_ddecpp: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  onboarded_at: z.lazy(() => SortOrderSchema).optional(),
  coupled_entity_id: z.lazy(() => SortOrderSchema).optional(),
  prefilled: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EntityMinOrderByAggregateInputSchema: z.ZodType<Prisma.EntityMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  raison_sociale: z.lazy(() => SortOrderSchema).optional(),
  address_ligne_1: z.lazy(() => SortOrderSchema).optional(),
  address_ligne_2: z.lazy(() => SortOrderSchema).optional(),
  code_postal: z.lazy(() => SortOrderSchema).optional(),
  ville: z.lazy(() => SortOrderSchema).optional(),
  siret: z.lazy(() => SortOrderSchema).optional(),
  numero_ddecpp: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  onboarded_at: z.lazy(() => SortOrderSchema).optional(),
  coupled_entity_id: z.lazy(() => SortOrderSchema).optional(),
  prefilled: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumEntityTypesWithAggregatesFilterSchema: z.ZodType<Prisma.EnumEntityTypesWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EntityTypesSchema).optional(),
  in: z.lazy(() => EntityTypesSchema).array().optional(),
  notIn: z.lazy(() => EntityTypesSchema).array().optional(),
  not: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => NestedEnumEntityTypesWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEntityTypesFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEntityTypesFilterSchema).optional()
}).strict();

export const UserRelationFilterSchema: z.ZodType<Prisma.UserRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const PasswordCountOrderByAggregateInputSchema: z.ZodType<Prisma.PasswordCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasswordMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PasswordMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PasswordMinOrderByAggregateInputSchema: z.ZodType<Prisma.PasswordMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserRelationTypeFilterSchema: z.ZodType<Prisma.EnumUserRelationTypeFilter> = z.object({
  equals: z.lazy(() => UserRelationTypeSchema).optional(),
  in: z.lazy(() => UserRelationTypeSchema).array().optional(),
  notIn: z.lazy(() => UserRelationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => NestedEnumUserRelationTypeFilterSchema) ]).optional(),
}).strict();

export const UserRelationsCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserRelationsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional(),
  related_id: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRelationsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserRelationsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional(),
  related_id: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserRelationsMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserRelationsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional(),
  related_id: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserRelationTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumUserRelationTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRelationTypeSchema).optional(),
  in: z.lazy(() => UserRelationTypeSchema).array().optional(),
  notIn: z.lazy(() => UserRelationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => NestedEnumUserRelationTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRelationTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRelationTypeFilterSchema).optional()
}).strict();

export const EnumEntityRelationTypeFilterSchema: z.ZodType<Prisma.EnumEntityRelationTypeFilter> = z.object({
  equals: z.lazy(() => EntityRelationTypeSchema).optional(),
  in: z.lazy(() => EntityRelationTypeSchema).array().optional(),
  notIn: z.lazy(() => EntityRelationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => NestedEnumEntityRelationTypeFilterSchema) ]).optional(),
}).strict();

export const EntityRelationFilterSchema: z.ZodType<Prisma.EntityRelationFilter> = z.object({
  is: z.lazy(() => EntityWhereInputSchema).optional(),
  isNot: z.lazy(() => EntityWhereInputSchema).optional()
}).strict();

export const EntityRelationsCountOrderByAggregateInputSchema: z.ZodType<Prisma.EntityRelationsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EntityRelationsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EntityRelationsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EntityRelationsMinOrderByAggregateInputSchema: z.ZodType<Prisma.EntityRelationsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  owner_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  relation: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumEntityRelationTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumEntityRelationTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EntityRelationTypeSchema).optional(),
  in: z.lazy(() => EntityRelationTypeSchema).array().optional(),
  notIn: z.lazy(() => EntityRelationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => NestedEnumEntityRelationTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEntityRelationTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEntityRelationTypeFilterSchema).optional()
}).strict();

export const UserNullableRelationFilterSchema: z.ZodType<Prisma.UserNullableRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UserWhereInputSchema).optional().nullable()
}).strict();

export const LogsCountOrderByAggregateInputSchema: z.ZodType<Prisma.LogsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LogsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LogsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LogsMinOrderByAggregateInputSchema: z.ZodType<Prisma.LogsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const EnumUserRolesNullableFilterSchema: z.ZodType<Prisma.EnumUserRolesNullableFilter> = z.object({
  equals: z.lazy(() => UserRolesSchema).optional().nullable(),
  in: z.lazy(() => UserRolesSchema).array().optional().nullable(),
  notIn: z.lazy(() => UserRolesSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NestedEnumUserRolesNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const CarcasseListRelationFilterSchema: z.ZodType<Prisma.CarcasseListRelationFilter> = z.object({
  every: z.lazy(() => CarcasseWhereInputSchema).optional(),
  some: z.lazy(() => CarcasseWhereInputSchema).optional(),
  none: z.lazy(() => CarcasseWhereInputSchema).optional()
}).strict();

export const CarcasseOrderByRelationAggregateInputSchema: z.ZodType<Prisma.CarcasseOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeiCountOrderByAggregateInputSchema: z.ZodType<Prisma.FeiCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  numero: z.lazy(() => SortOrderSchema).optional(),
  date_mise_a_mort: z.lazy(() => SortOrderSchema).optional(),
  commune_mise_a_mort: z.lazy(() => SortOrderSchema).optional(),
  created_by_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_role: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_wants_to_transfer: z.lazy(() => SortOrderSchema).optional(),
  fei_next_owner_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_next_owner_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_next_owner_role: z.lazy(() => SortOrderSchema).optional(),
  fei_prev_owner_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_prev_owner_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_prev_owner_role: z.lazy(() => SortOrderSchema).optional(),
  examinateur_initial_user_id: z.lazy(() => SortOrderSchema).optional(),
  examinateur_initial_approbation_mise_sur_le_marche: z.lazy(() => SortOrderSchema).optional(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.lazy(() => SortOrderSchema).optional(),
  premier_detenteur_user_id: z.lazy(() => SortOrderSchema).optional(),
  premier_detenteur_date_depot_quelque_part: z.lazy(() => SortOrderSchema).optional(),
  premier_detenteur_depot_entity_id: z.lazy(() => SortOrderSchema).optional(),
  premier_detenteur_depot_sauvage: z.lazy(() => SortOrderSchema).optional(),
  svi_entity_id: z.lazy(() => SortOrderSchema).optional(),
  svi_user_id: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasses_saisies: z.lazy(() => SortOrderSchema).optional(),
  svi_aucune_carcasse_saisie: z.lazy(() => SortOrderSchema).optional(),
  svi_commentaire: z.lazy(() => SortOrderSchema).optional(),
  svi_signed_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeiAvgOrderByAggregateInputSchema: z.ZodType<Prisma.FeiAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasses_saisies: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeiMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FeiMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  numero: z.lazy(() => SortOrderSchema).optional(),
  date_mise_a_mort: z.lazy(() => SortOrderSchema).optional(),
  commune_mise_a_mort: z.lazy(() => SortOrderSchema).optional(),
  created_by_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_role: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_wants_to_transfer: z.lazy(() => SortOrderSchema).optional(),
  fei_next_owner_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_next_owner_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_next_owner_role: z.lazy(() => SortOrderSchema).optional(),
  fei_prev_owner_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_prev_owner_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_prev_owner_role: z.lazy(() => SortOrderSchema).optional(),
  examinateur_initial_user_id: z.lazy(() => SortOrderSchema).optional(),
  examinateur_initial_approbation_mise_sur_le_marche: z.lazy(() => SortOrderSchema).optional(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.lazy(() => SortOrderSchema).optional(),
  premier_detenteur_user_id: z.lazy(() => SortOrderSchema).optional(),
  premier_detenteur_date_depot_quelque_part: z.lazy(() => SortOrderSchema).optional(),
  premier_detenteur_depot_entity_id: z.lazy(() => SortOrderSchema).optional(),
  premier_detenteur_depot_sauvage: z.lazy(() => SortOrderSchema).optional(),
  svi_entity_id: z.lazy(() => SortOrderSchema).optional(),
  svi_user_id: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasses_saisies: z.lazy(() => SortOrderSchema).optional(),
  svi_aucune_carcasse_saisie: z.lazy(() => SortOrderSchema).optional(),
  svi_commentaire: z.lazy(() => SortOrderSchema).optional(),
  svi_signed_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeiMinOrderByAggregateInputSchema: z.ZodType<Prisma.FeiMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  numero: z.lazy(() => SortOrderSchema).optional(),
  date_mise_a_mort: z.lazy(() => SortOrderSchema).optional(),
  commune_mise_a_mort: z.lazy(() => SortOrderSchema).optional(),
  created_by_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_role: z.lazy(() => SortOrderSchema).optional(),
  fei_current_owner_wants_to_transfer: z.lazy(() => SortOrderSchema).optional(),
  fei_next_owner_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_next_owner_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_next_owner_role: z.lazy(() => SortOrderSchema).optional(),
  fei_prev_owner_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_prev_owner_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_prev_owner_role: z.lazy(() => SortOrderSchema).optional(),
  examinateur_initial_user_id: z.lazy(() => SortOrderSchema).optional(),
  examinateur_initial_approbation_mise_sur_le_marche: z.lazy(() => SortOrderSchema).optional(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.lazy(() => SortOrderSchema).optional(),
  premier_detenteur_user_id: z.lazy(() => SortOrderSchema).optional(),
  premier_detenteur_date_depot_quelque_part: z.lazy(() => SortOrderSchema).optional(),
  premier_detenteur_depot_entity_id: z.lazy(() => SortOrderSchema).optional(),
  premier_detenteur_depot_sauvage: z.lazy(() => SortOrderSchema).optional(),
  svi_entity_id: z.lazy(() => SortOrderSchema).optional(),
  svi_user_id: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasses_saisies: z.lazy(() => SortOrderSchema).optional(),
  svi_aucune_carcasse_saisie: z.lazy(() => SortOrderSchema).optional(),
  svi_commentaire: z.lazy(() => SortOrderSchema).optional(),
  svi_signed_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeiSumOrderByAggregateInputSchema: z.ZodType<Prisma.FeiSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasses_saisies: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const EnumUserRolesNullableWithAggregatesFilterSchema: z.ZodType<Prisma.EnumUserRolesNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRolesSchema).optional().nullable(),
  in: z.lazy(() => UserRolesSchema).array().optional().nullable(),
  notIn: z.lazy(() => UserRolesSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NestedEnumUserRolesNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRolesNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRolesNullableFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const FeiRelationFilterSchema: z.ZodType<Prisma.FeiRelationFilter> = z.object({
  is: z.lazy(() => FeiWhereInputSchema).optional(),
  isNot: z.lazy(() => FeiWhereInputSchema).optional()
}).strict();

export const FeiIntermediaireNullableRelationFilterSchema: z.ZodType<Prisma.FeiIntermediaireNullableRelationFilter> = z.object({
  is: z.lazy(() => FeiIntermediaireWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => FeiIntermediaireWhereInputSchema).optional().nullable()
}).strict();

export const CarcasseCountOrderByAggregateInputSchema: z.ZodType<Prisma.CarcasseCountOrderByAggregateInput> = z.object({
  numero_bracelet: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  heure_mise_a_mort: z.lazy(() => SortOrderSchema).optional(),
  heure_evisceration: z.lazy(() => SortOrderSchema).optional(),
  espece: z.lazy(() => SortOrderSchema).optional(),
  categorie: z.lazy(() => SortOrderSchema).optional(),
  examinateur_carcasse_sans_anomalie: z.lazy(() => SortOrderSchema).optional(),
  examinateur_anomalies_carcasse: z.lazy(() => SortOrderSchema).optional(),
  examinateur_anomalies_abats: z.lazy(() => SortOrderSchema).optional(),
  examinateur_commentaire: z.lazy(() => SortOrderSchema).optional(),
  examinateur_signed_at: z.lazy(() => SortOrderSchema).optional(),
  intermediaire_carcasse_refus_intermediaire_id: z.lazy(() => SortOrderSchema).optional(),
  intermediaire_carcasse_refus_motif: z.lazy(() => SortOrderSchema).optional(),
  intermediaire_carcasse_signed_at: z.lazy(() => SortOrderSchema).optional(),
  intermediaire_carcasse_commentaire: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_saisie: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_saisie_motif: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_saisie_at: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_signed_at: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_commentaire: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CarcasseMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CarcasseMaxOrderByAggregateInput> = z.object({
  numero_bracelet: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  heure_mise_a_mort: z.lazy(() => SortOrderSchema).optional(),
  heure_evisceration: z.lazy(() => SortOrderSchema).optional(),
  espece: z.lazy(() => SortOrderSchema).optional(),
  categorie: z.lazy(() => SortOrderSchema).optional(),
  examinateur_carcasse_sans_anomalie: z.lazy(() => SortOrderSchema).optional(),
  examinateur_commentaire: z.lazy(() => SortOrderSchema).optional(),
  examinateur_signed_at: z.lazy(() => SortOrderSchema).optional(),
  intermediaire_carcasse_refus_intermediaire_id: z.lazy(() => SortOrderSchema).optional(),
  intermediaire_carcasse_refus_motif: z.lazy(() => SortOrderSchema).optional(),
  intermediaire_carcasse_signed_at: z.lazy(() => SortOrderSchema).optional(),
  intermediaire_carcasse_commentaire: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_saisie: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_saisie_at: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_signed_at: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_commentaire: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CarcasseMinOrderByAggregateInputSchema: z.ZodType<Prisma.CarcasseMinOrderByAggregateInput> = z.object({
  numero_bracelet: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  heure_mise_a_mort: z.lazy(() => SortOrderSchema).optional(),
  heure_evisceration: z.lazy(() => SortOrderSchema).optional(),
  espece: z.lazy(() => SortOrderSchema).optional(),
  categorie: z.lazy(() => SortOrderSchema).optional(),
  examinateur_carcasse_sans_anomalie: z.lazy(() => SortOrderSchema).optional(),
  examinateur_commentaire: z.lazy(() => SortOrderSchema).optional(),
  examinateur_signed_at: z.lazy(() => SortOrderSchema).optional(),
  intermediaire_carcasse_refus_intermediaire_id: z.lazy(() => SortOrderSchema).optional(),
  intermediaire_carcasse_refus_motif: z.lazy(() => SortOrderSchema).optional(),
  intermediaire_carcasse_signed_at: z.lazy(() => SortOrderSchema).optional(),
  intermediaire_carcasse_commentaire: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_saisie: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_saisie_at: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_signed_at: z.lazy(() => SortOrderSchema).optional(),
  svi_carcasse_commentaire: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserRolesFilterSchema: z.ZodType<Prisma.EnumUserRolesFilter> = z.object({
  equals: z.lazy(() => UserRolesSchema).optional(),
  in: z.lazy(() => UserRolesSchema).array().optional(),
  notIn: z.lazy(() => UserRolesSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NestedEnumUserRolesFilterSchema) ]).optional(),
}).strict();

export const InterventionOnFeiCountOrderByAggregateInputSchema: z.ZodType<Prisma.InterventionOnFeiCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InterventionOnFeiMaxOrderByAggregateInputSchema: z.ZodType<Prisma.InterventionOnFeiMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const InterventionOnFeiMinOrderByAggregateInputSchema: z.ZodType<Prisma.InterventionOnFeiMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  entity_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserRolesWithAggregatesFilterSchema: z.ZodType<Prisma.EnumUserRolesWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRolesSchema).optional(),
  in: z.lazy(() => UserRolesSchema).array().optional(),
  notIn: z.lazy(() => UserRolesSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NestedEnumUserRolesWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRolesFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRolesFilterSchema).optional()
}).strict();

export const FeiIntermediaireCountOrderByAggregateInputSchema: z.ZodType<Prisma.FeiIntermediaireCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_role: z.lazy(() => SortOrderSchema).optional(),
  commentaire: z.lazy(() => SortOrderSchema).optional(),
  received_at: z.lazy(() => SortOrderSchema).optional(),
  check_finished_at: z.lazy(() => SortOrderSchema).optional(),
  handover_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeiIntermediaireMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FeiIntermediaireMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_role: z.lazy(() => SortOrderSchema).optional(),
  commentaire: z.lazy(() => SortOrderSchema).optional(),
  received_at: z.lazy(() => SortOrderSchema).optional(),
  check_finished_at: z.lazy(() => SortOrderSchema).optional(),
  handover_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeiIntermediaireMinOrderByAggregateInputSchema: z.ZodType<Prisma.FeiIntermediaireMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_entity_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_role: z.lazy(() => SortOrderSchema).optional(),
  commentaire: z.lazy(() => SortOrderSchema).optional(),
  received_at: z.lazy(() => SortOrderSchema).optional(),
  check_finished_at: z.lazy(() => SortOrderSchema).optional(),
  handover_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CarcasseRelationFilterSchema: z.ZodType<Prisma.CarcasseRelationFilter> = z.object({
  is: z.lazy(() => CarcasseWhereInputSchema).optional(),
  isNot: z.lazy(() => CarcasseWhereInputSchema).optional()
}).strict();

export const FeiIntermediaireRelationFilterSchema: z.ZodType<Prisma.FeiIntermediaireRelationFilter> = z.object({
  is: z.lazy(() => FeiIntermediaireWhereInputSchema).optional(),
  isNot: z.lazy(() => FeiIntermediaireWhereInputSchema).optional()
}).strict();

export const CarcasseIntermediaireCountOrderByAggregateInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCountOrderByAggregateInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  numero_bracelet: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_entity_id: z.lazy(() => SortOrderSchema).optional(),
  prise_en_charge: z.lazy(() => SortOrderSchema).optional(),
  refus: z.lazy(() => SortOrderSchema).optional(),
  commentaire: z.lazy(() => SortOrderSchema).optional(),
  carcasse_check_finished_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CarcasseIntermediaireMaxOrderByAggregateInputSchema: z.ZodType<Prisma.CarcasseIntermediaireMaxOrderByAggregateInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  numero_bracelet: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_entity_id: z.lazy(() => SortOrderSchema).optional(),
  prise_en_charge: z.lazy(() => SortOrderSchema).optional(),
  refus: z.lazy(() => SortOrderSchema).optional(),
  commentaire: z.lazy(() => SortOrderSchema).optional(),
  carcasse_check_finished_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const CarcasseIntermediaireMinOrderByAggregateInputSchema: z.ZodType<Prisma.CarcasseIntermediaireMinOrderByAggregateInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.lazy(() => SortOrderSchema).optional(),
  fei_numero: z.lazy(() => SortOrderSchema).optional(),
  numero_bracelet: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_user_id: z.lazy(() => SortOrderSchema).optional(),
  fei_intermediaire_entity_id: z.lazy(() => SortOrderSchema).optional(),
  prise_en_charge: z.lazy(() => SortOrderSchema).optional(),
  refus: z.lazy(() => SortOrderSchema).optional(),
  commentaire: z.lazy(() => SortOrderSchema).optional(),
  carcasse_check_finished_at: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserNotificationsFilterSchema: z.ZodType<Prisma.EnumUserNotificationsFilter> = z.object({
  equals: z.lazy(() => UserNotificationsSchema).optional(),
  in: z.lazy(() => UserNotificationsSchema).array().optional(),
  notIn: z.lazy(() => UserNotificationsSchema).array().optional(),
  not: z.union([ z.lazy(() => UserNotificationsSchema),z.lazy(() => NestedEnumUserNotificationsFilterSchema) ]).optional(),
}).strict();

export const NotificationLogCountOrderByAggregateInputSchema: z.ZodType<Prisma.NotificationLogCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  web_push_token: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  payload: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NotificationLogMaxOrderByAggregateInputSchema: z.ZodType<Prisma.NotificationLogMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  web_push_token: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  payload: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const NotificationLogMinOrderByAggregateInputSchema: z.ZodType<Prisma.NotificationLogMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  web_push_token: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  payload: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumUserNotificationsWithAggregatesFilterSchema: z.ZodType<Prisma.EnumUserNotificationsWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserNotificationsSchema).optional(),
  in: z.lazy(() => UserNotificationsSchema).array().optional(),
  notIn: z.lazy(() => UserNotificationsSchema).array().optional(),
  not: z.union([ z.lazy(() => UserNotificationsSchema),z.lazy(() => NestedEnumUserNotificationsWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserNotificationsFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserNotificationsFilterSchema).optional()
}).strict();

export const UserCreaterolesInputSchema: z.ZodType<Prisma.UserCreaterolesInput> = z.object({
  set: z.lazy(() => UserRolesSchema).array()
}).strict();

export const UserCreatenotificationsInputSchema: z.ZodType<Prisma.UserCreatenotificationsInput> = z.object({
  set: z.lazy(() => UserNotificationsSchema).array()
}).strict();

export const UserCreateweb_push_tokensInputSchema: z.ZodType<Prisma.UserCreateweb_push_tokensInput> = z.object({
  set: z.string().array()
}).strict();

export const PasswordCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.PasswordCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PasswordCreateWithoutUserInputSchema),z.lazy(() => PasswordUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PasswordCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => PasswordWhereUniqueInputSchema).optional()
}).strict();

export const UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInput> = z.object({
  create: z.union([ z.lazy(() => UserRelationsCreateWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateWithoutUserOwnerOfUserRelationInputSchema).array(),z.lazy(() => UserRelationsUncheckedCreateWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedCreateWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRelationsCreateOrConnectWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateOrConnectWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRelationsCreateManyUserOwnerOfUserRelationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInput> = z.object({
  create: z.union([ z.lazy(() => UserRelationsCreateWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateWithoutUserRelatedOfUserRelationInputSchema).array(),z.lazy(() => UserRelationsUncheckedCreateWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedCreateWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRelationsCreateOrConnectWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateOrConnectWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRelationsCreateManyUserRelatedOfUserRelationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema: z.ZodType<Prisma.EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInput> = z.object({
  create: z.union([ z.lazy(() => EntityRelationsCreateWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsCreateWithoutUserRelatedWithEntityInputSchema).array(),z.lazy(() => EntityRelationsUncheckedCreateWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUncheckedCreateWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EntityRelationsCreateOrConnectWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsCreateOrConnectWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EntityRelationsCreateManyUserRelatedWithEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.FeiCreateNestedManyWithoutFeiCreatedByUserInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiCreateWithoutFeiCreatedByUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiCreatedByUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiCreateNestedManyWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.FeiCreateNestedManyWithoutFeiCurrentUserInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiCreateWithoutFeiCurrentUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiCurrentUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.FeiCreateNestedManyWithoutFeiPremierDetenteurUserInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiCreateWithoutFeiPremierDetenteurUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiPremierDetenteurUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.FeiCreateNestedManyWithoutFeiExaminateurInitialUserInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiCreateWithoutFeiExaminateurInitialUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiExaminateurInitialUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiCreateNestedManyWithoutFeiSviUserInputSchema: z.ZodType<Prisma.FeiCreateNestedManyWithoutFeiSviUserInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiSviUserInputSchema),z.lazy(() => FeiCreateWithoutFeiSviUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiSviUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiSviUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiSviUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiSviUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiSviUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireUserInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiIntermediaireCreateManyFeiIntermediaireUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LogsCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.LogsCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => LogsCreateWithoutUserInputSchema),z.lazy(() => LogsCreateWithoutUserInputSchema).array(),z.lazy(() => LogsUncheckedCreateWithoutUserInputSchema),z.lazy(() => LogsUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LogsCreateOrConnectWithoutUserInputSchema),z.lazy(() => LogsCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LogsCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LogsWhereUniqueInputSchema),z.lazy(() => LogsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NotificationLogCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.NotificationLogCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => NotificationLogCreateWithoutUserInputSchema),z.lazy(() => NotificationLogCreateWithoutUserInputSchema).array(),z.lazy(() => NotificationLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => NotificationLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => NotificationLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => NotificationLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => NotificationLogCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => NotificationLogWhereUniqueInputSchema),z.lazy(() => NotificationLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireUserInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InterventionOnFeiCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutUserInputSchema),z.lazy(() => InterventionOnFeiCreateWithoutUserInputSchema).array(),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InterventionOnFeiCreateOrConnectWithoutUserInputSchema),z.lazy(() => InterventionOnFeiCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InterventionOnFeiCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PasswordUncheckedCreateNestedOneWithoutUserInputSchema: z.ZodType<Prisma.PasswordUncheckedCreateNestedOneWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => PasswordCreateWithoutUserInputSchema),z.lazy(() => PasswordUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PasswordCreateOrConnectWithoutUserInputSchema).optional(),
  connect: z.lazy(() => PasswordWhereUniqueInputSchema).optional()
}).strict();

export const UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInput> = z.object({
  create: z.union([ z.lazy(() => UserRelationsCreateWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateWithoutUserOwnerOfUserRelationInputSchema).array(),z.lazy(() => UserRelationsUncheckedCreateWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedCreateWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRelationsCreateOrConnectWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateOrConnectWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRelationsCreateManyUserOwnerOfUserRelationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInput> = z.object({
  create: z.union([ z.lazy(() => UserRelationsCreateWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateWithoutUserRelatedOfUserRelationInputSchema).array(),z.lazy(() => UserRelationsUncheckedCreateWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedCreateWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRelationsCreateOrConnectWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateOrConnectWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRelationsCreateManyUserRelatedOfUserRelationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema: z.ZodType<Prisma.EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInput> = z.object({
  create: z.union([ z.lazy(() => EntityRelationsCreateWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsCreateWithoutUserRelatedWithEntityInputSchema).array(),z.lazy(() => EntityRelationsUncheckedCreateWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUncheckedCreateWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EntityRelationsCreateOrConnectWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsCreateOrConnectWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EntityRelationsCreateManyUserRelatedWithEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiCreateWithoutFeiCreatedByUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiCreatedByUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiCreateWithoutFeiCurrentUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiCurrentUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiCreateWithoutFeiPremierDetenteurUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiPremierDetenteurUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiCreateWithoutFeiExaminateurInitialUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiExaminateurInitialUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema: z.ZodType<Prisma.FeiUncheckedCreateNestedManyWithoutFeiSviUserInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiSviUserInputSchema),z.lazy(() => FeiCreateWithoutFeiSviUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiSviUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiSviUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiSviUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiSviUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiSviUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireUserInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiIntermediaireCreateManyFeiIntermediaireUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LogsUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.LogsUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => LogsCreateWithoutUserInputSchema),z.lazy(() => LogsCreateWithoutUserInputSchema).array(),z.lazy(() => LogsUncheckedCreateWithoutUserInputSchema),z.lazy(() => LogsUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LogsCreateOrConnectWithoutUserInputSchema),z.lazy(() => LogsCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LogsCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LogsWhereUniqueInputSchema),z.lazy(() => LogsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.NotificationLogUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => NotificationLogCreateWithoutUserInputSchema),z.lazy(() => NotificationLogCreateWithoutUserInputSchema).array(),z.lazy(() => NotificationLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => NotificationLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => NotificationLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => NotificationLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => NotificationLogCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => NotificationLogWhereUniqueInputSchema),z.lazy(() => NotificationLogWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireUserInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutUserInputSchema),z.lazy(() => InterventionOnFeiCreateWithoutUserInputSchema).array(),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InterventionOnFeiCreateOrConnectWithoutUserInputSchema),z.lazy(() => InterventionOnFeiCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InterventionOnFeiCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable()
}).strict();

export const UserUpdaterolesInputSchema: z.ZodType<Prisma.UserUpdaterolesInput> = z.object({
  set: z.lazy(() => UserRolesSchema).array().optional(),
  push: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const UserUpdatenotificationsInputSchema: z.ZodType<Prisma.UserUpdatenotificationsInput> = z.object({
  set: z.lazy(() => UserNotificationsSchema).array().optional(),
  push: z.union([ z.lazy(() => UserNotificationsSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
}).strict();

export const UserUpdateweb_push_tokensInputSchema: z.ZodType<Prisma.UserUpdateweb_push_tokensInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const PasswordUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.PasswordUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PasswordCreateWithoutUserInputSchema),z.lazy(() => PasswordUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PasswordCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => PasswordUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PasswordWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PasswordWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PasswordWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PasswordUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => PasswordUpdateWithoutUserInputSchema),z.lazy(() => PasswordUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema: z.ZodType<Prisma.UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRelationsCreateWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateWithoutUserOwnerOfUserRelationInputSchema).array(),z.lazy(() => UserRelationsUncheckedCreateWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedCreateWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRelationsCreateOrConnectWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateOrConnectWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRelationsUpsertWithWhereUniqueWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUpsertWithWhereUniqueWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRelationsCreateManyUserOwnerOfUserRelationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRelationsUpdateWithWhereUniqueWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUpdateWithWhereUniqueWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRelationsUpdateManyWithWhereWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUpdateManyWithWhereWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRelationsScalarWhereInputSchema),z.lazy(() => UserRelationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema: z.ZodType<Prisma.UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRelationsCreateWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateWithoutUserRelatedOfUserRelationInputSchema).array(),z.lazy(() => UserRelationsUncheckedCreateWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedCreateWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRelationsCreateOrConnectWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateOrConnectWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRelationsUpsertWithWhereUniqueWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUpsertWithWhereUniqueWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRelationsCreateManyUserRelatedOfUserRelationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRelationsUpdateWithWhereUniqueWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUpdateWithWhereUniqueWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRelationsUpdateManyWithWhereWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUpdateManyWithWhereWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRelationsScalarWhereInputSchema),z.lazy(() => UserRelationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema: z.ZodType<Prisma.EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityRelationsCreateWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsCreateWithoutUserRelatedWithEntityInputSchema).array(),z.lazy(() => EntityRelationsUncheckedCreateWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUncheckedCreateWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EntityRelationsCreateOrConnectWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsCreateOrConnectWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EntityRelationsUpsertWithWhereUniqueWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUpsertWithWhereUniqueWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EntityRelationsCreateManyUserRelatedWithEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EntityRelationsUpdateWithWhereUniqueWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUpdateWithWhereUniqueWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EntityRelationsUpdateManyWithWhereWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUpdateManyWithWhereWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EntityRelationsScalarWhereInputSchema),z.lazy(() => EntityRelationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema: z.ZodType<Prisma.FeiUpdateManyWithoutFeiCreatedByUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiCreateWithoutFeiCreatedByUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiCreatedByUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema: z.ZodType<Prisma.FeiUpdateManyWithoutFeiCurrentUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiCreateWithoutFeiCurrentUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiCurrentUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema: z.ZodType<Prisma.FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiCreateWithoutFeiPremierDetenteurUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiPremierDetenteurUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema: z.ZodType<Prisma.FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiCreateWithoutFeiExaminateurInitialUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiExaminateurInitialUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUpdateManyWithoutFeiSviUserNestedInputSchema: z.ZodType<Prisma.FeiUpdateManyWithoutFeiSviUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiSviUserInputSchema),z.lazy(() => FeiCreateWithoutFeiSviUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiSviUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiSviUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiSviUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiSviUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiSviUserInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiSviUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiSviUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiSviUserInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiSviUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiSviUserInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiSviUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireUserInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiIntermediaireCreateManyFeiIntermediaireUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiIntermediaireScalarWhereInputSchema),z.lazy(() => FeiIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LogsUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.LogsUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => LogsCreateWithoutUserInputSchema),z.lazy(() => LogsCreateWithoutUserInputSchema).array(),z.lazy(() => LogsUncheckedCreateWithoutUserInputSchema),z.lazy(() => LogsUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LogsCreateOrConnectWithoutUserInputSchema),z.lazy(() => LogsCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LogsUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => LogsUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LogsCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LogsWhereUniqueInputSchema),z.lazy(() => LogsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LogsWhereUniqueInputSchema),z.lazy(() => LogsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LogsWhereUniqueInputSchema),z.lazy(() => LogsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LogsWhereUniqueInputSchema),z.lazy(() => LogsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LogsUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => LogsUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LogsUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => LogsUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LogsScalarWhereInputSchema),z.lazy(() => LogsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NotificationLogUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.NotificationLogUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => NotificationLogCreateWithoutUserInputSchema),z.lazy(() => NotificationLogCreateWithoutUserInputSchema).array(),z.lazy(() => NotificationLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => NotificationLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => NotificationLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => NotificationLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => NotificationLogUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => NotificationLogUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => NotificationLogCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => NotificationLogWhereUniqueInputSchema),z.lazy(() => NotificationLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => NotificationLogWhereUniqueInputSchema),z.lazy(() => NotificationLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => NotificationLogWhereUniqueInputSchema),z.lazy(() => NotificationLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => NotificationLogWhereUniqueInputSchema),z.lazy(() => NotificationLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => NotificationLogUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => NotificationLogUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => NotificationLogUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => NotificationLogUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => NotificationLogScalarWhereInputSchema),z.lazy(() => NotificationLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireUserInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InterventionOnFeiUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutUserInputSchema),z.lazy(() => InterventionOnFeiCreateWithoutUserInputSchema).array(),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InterventionOnFeiCreateOrConnectWithoutUserInputSchema),z.lazy(() => InterventionOnFeiCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InterventionOnFeiUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InterventionOnFeiCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InterventionOnFeiUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InterventionOnFeiUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InterventionOnFeiScalarWhereInputSchema),z.lazy(() => InterventionOnFeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PasswordUncheckedUpdateOneWithoutUserNestedInputSchema: z.ZodType<Prisma.PasswordUncheckedUpdateOneWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => PasswordCreateWithoutUserInputSchema),z.lazy(() => PasswordUncheckedCreateWithoutUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PasswordCreateOrConnectWithoutUserInputSchema).optional(),
  upsert: z.lazy(() => PasswordUpsertWithoutUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => PasswordWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => PasswordWhereInputSchema) ]).optional(),
  connect: z.lazy(() => PasswordWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PasswordUpdateToOneWithWhereWithoutUserInputSchema),z.lazy(() => PasswordUpdateWithoutUserInputSchema),z.lazy(() => PasswordUncheckedUpdateWithoutUserInputSchema) ]).optional(),
}).strict();

export const UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema: z.ZodType<Prisma.UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRelationsCreateWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateWithoutUserOwnerOfUserRelationInputSchema).array(),z.lazy(() => UserRelationsUncheckedCreateWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedCreateWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRelationsCreateOrConnectWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateOrConnectWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRelationsUpsertWithWhereUniqueWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUpsertWithWhereUniqueWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRelationsCreateManyUserOwnerOfUserRelationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRelationsUpdateWithWhereUniqueWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUpdateWithWhereUniqueWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRelationsUpdateManyWithWhereWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUpdateManyWithWhereWithoutUserOwnerOfUserRelationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRelationsScalarWhereInputSchema),z.lazy(() => UserRelationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema: z.ZodType<Prisma.UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserRelationsCreateWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateWithoutUserRelatedOfUserRelationInputSchema).array(),z.lazy(() => UserRelationsUncheckedCreateWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedCreateWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UserRelationsCreateOrConnectWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateOrConnectWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UserRelationsUpsertWithWhereUniqueWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUpsertWithWhereUniqueWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UserRelationsCreateManyUserRelatedOfUserRelationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UserRelationsWhereUniqueInputSchema),z.lazy(() => UserRelationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UserRelationsUpdateWithWhereUniqueWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUpdateWithWhereUniqueWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UserRelationsUpdateManyWithWhereWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUpdateManyWithWhereWithoutUserRelatedOfUserRelationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UserRelationsScalarWhereInputSchema),z.lazy(() => UserRelationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema: z.ZodType<Prisma.EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityRelationsCreateWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsCreateWithoutUserRelatedWithEntityInputSchema).array(),z.lazy(() => EntityRelationsUncheckedCreateWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUncheckedCreateWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EntityRelationsCreateOrConnectWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsCreateOrConnectWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EntityRelationsUpsertWithWhereUniqueWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUpsertWithWhereUniqueWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EntityRelationsCreateManyUserRelatedWithEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EntityRelationsUpdateWithWhereUniqueWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUpdateWithWhereUniqueWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EntityRelationsUpdateManyWithWhereWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUpdateManyWithWhereWithoutUserRelatedWithEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EntityRelationsScalarWhereInputSchema),z.lazy(() => EntityRelationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiCreateWithoutFeiCreatedByUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiCreatedByUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiCreatedByUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiCreateWithoutFeiCurrentUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiCurrentUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiCurrentUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiCreateWithoutFeiPremierDetenteurUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiPremierDetenteurUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiPremierDetenteurUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiCreateWithoutFeiExaminateurInitialUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiExaminateurInitialUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiExaminateurInitialUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiSviUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiSviUserInputSchema),z.lazy(() => FeiCreateWithoutFeiSviUserInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiSviUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiSviUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiSviUserInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiSviUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiSviUserInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiSviUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiSviUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiSviUserInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiSviUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiSviUserInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiSviUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireUserInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiIntermediaireCreateManyFeiIntermediaireUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediaireUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiIntermediaireScalarWhereInputSchema),z.lazy(() => FeiIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LogsUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.LogsUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => LogsCreateWithoutUserInputSchema),z.lazy(() => LogsCreateWithoutUserInputSchema).array(),z.lazy(() => LogsUncheckedCreateWithoutUserInputSchema),z.lazy(() => LogsUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LogsCreateOrConnectWithoutUserInputSchema),z.lazy(() => LogsCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LogsUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => LogsUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LogsCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LogsWhereUniqueInputSchema),z.lazy(() => LogsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LogsWhereUniqueInputSchema),z.lazy(() => LogsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LogsWhereUniqueInputSchema),z.lazy(() => LogsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LogsWhereUniqueInputSchema),z.lazy(() => LogsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LogsUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => LogsUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LogsUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => LogsUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LogsScalarWhereInputSchema),z.lazy(() => LogsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.NotificationLogUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => NotificationLogCreateWithoutUserInputSchema),z.lazy(() => NotificationLogCreateWithoutUserInputSchema).array(),z.lazy(() => NotificationLogUncheckedCreateWithoutUserInputSchema),z.lazy(() => NotificationLogUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => NotificationLogCreateOrConnectWithoutUserInputSchema),z.lazy(() => NotificationLogCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => NotificationLogUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => NotificationLogUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => NotificationLogCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => NotificationLogWhereUniqueInputSchema),z.lazy(() => NotificationLogWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => NotificationLogWhereUniqueInputSchema),z.lazy(() => NotificationLogWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => NotificationLogWhereUniqueInputSchema),z.lazy(() => NotificationLogWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => NotificationLogWhereUniqueInputSchema),z.lazy(() => NotificationLogWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => NotificationLogUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => NotificationLogUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => NotificationLogUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => NotificationLogUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => NotificationLogScalarWhereInputSchema),z.lazy(() => NotificationLogScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireUserInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutUserInputSchema),z.lazy(() => InterventionOnFeiCreateWithoutUserInputSchema).array(),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InterventionOnFeiCreateOrConnectWithoutUserInputSchema),z.lazy(() => InterventionOnFeiCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InterventionOnFeiUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InterventionOnFeiCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InterventionOnFeiUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InterventionOnFeiUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InterventionOnFeiScalarWhereInputSchema),z.lazy(() => InterventionOnFeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EntityRelationsCreateNestedManyWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityRelationsCreateNestedManyWithoutEntityRelatedWithUserInput> = z.object({
  create: z.union([ z.lazy(() => EntityRelationsCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsCreateWithoutEntityRelatedWithUserInputSchema).array(),z.lazy(() => EntityRelationsUncheckedCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUncheckedCreateWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EntityRelationsCreateOrConnectWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsCreateOrConnectWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EntityRelationsCreateManyEntityRelatedWithUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiCreateNestedManyWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.FeiCreateNestedManyWithoutFeiCurrentEntityInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiCurrentEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiCurrentEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiCreateNestedManyWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.FeiCreateNestedManyWithoutFeiNextEntityInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiNextEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiNextEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiNextEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiNextEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiNextEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiNextEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiCreateNestedManyWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.FeiCreateNestedManyWithoutFeiDepotEntityInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiDepotEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiDepotEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiCreateNestedManyWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.FeiCreateNestedManyWithoutFeiSviEntityInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiSviEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiSviEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiSviEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiSviEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiSviEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiSviEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireEntityInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireEntityInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiIntermediaireCreateManyFeiIntermediaireEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireEntityInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireEntityInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EntityCreateNestedOneWithoutCoupledEntity_oppositeInputSchema: z.ZodType<Prisma.EntityCreateNestedOneWithoutCoupledEntity_oppositeInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutCoupledEntity_oppositeInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCoupledEntity_oppositeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutCoupledEntity_oppositeInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional()
}).strict();

export const EntityCreateNestedOneWithoutCoupledEntityInputSchema: z.ZodType<Prisma.EntityCreateNestedOneWithoutCoupledEntityInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutCoupledEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCoupledEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutCoupledEntityInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional()
}).strict();

export const InterventionOnFeiCreateNestedManyWithoutEntityInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateNestedManyWithoutEntityInput> = z.object({
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiCreateWithoutEntityInputSchema).array(),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InterventionOnFeiCreateOrConnectWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiCreateOrConnectWithoutEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InterventionOnFeiCreateManyEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EntityRelationsUncheckedCreateNestedManyWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityRelationsUncheckedCreateNestedManyWithoutEntityRelatedWithUserInput> = z.object({
  create: z.union([ z.lazy(() => EntityRelationsCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsCreateWithoutEntityRelatedWithUserInputSchema).array(),z.lazy(() => EntityRelationsUncheckedCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUncheckedCreateWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EntityRelationsCreateOrConnectWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsCreateOrConnectWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EntityRelationsCreateManyEntityRelatedWithUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedCreateNestedManyWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.FeiUncheckedCreateNestedManyWithoutFeiCurrentEntityInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiCurrentEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiCurrentEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedCreateNestedManyWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.FeiUncheckedCreateNestedManyWithoutFeiNextEntityInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiNextEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiNextEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiNextEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiNextEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiNextEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiNextEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedCreateNestedManyWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.FeiUncheckedCreateNestedManyWithoutFeiDepotEntityInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiDepotEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiDepotEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedCreateNestedManyWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.FeiUncheckedCreateNestedManyWithoutFeiSviEntityInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiSviEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiSviEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiSviEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiSviEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiSviEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiSviEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireEntityInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireEntityInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiIntermediaireCreateManyFeiIntermediaireEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireEntityInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireEntityInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EntityUncheckedCreateNestedOneWithoutCoupledEntityInputSchema: z.ZodType<Prisma.EntityUncheckedCreateNestedOneWithoutCoupledEntityInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutCoupledEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCoupledEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutCoupledEntityInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional()
}).strict();

export const InterventionOnFeiUncheckedCreateNestedManyWithoutEntityInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedCreateNestedManyWithoutEntityInput> = z.object({
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiCreateWithoutEntityInputSchema).array(),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InterventionOnFeiCreateOrConnectWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiCreateOrConnectWithoutEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InterventionOnFeiCreateManyEntityInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumEntityTypesFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumEntityTypesFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => EntityTypesSchema).optional()
}).strict();

export const EntityRelationsUpdateManyWithoutEntityRelatedWithUserNestedInputSchema: z.ZodType<Prisma.EntityRelationsUpdateManyWithoutEntityRelatedWithUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityRelationsCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsCreateWithoutEntityRelatedWithUserInputSchema).array(),z.lazy(() => EntityRelationsUncheckedCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUncheckedCreateWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EntityRelationsCreateOrConnectWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsCreateOrConnectWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EntityRelationsUpsertWithWhereUniqueWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUpsertWithWhereUniqueWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EntityRelationsCreateManyEntityRelatedWithUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EntityRelationsUpdateWithWhereUniqueWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUpdateWithWhereUniqueWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EntityRelationsUpdateManyWithWhereWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUpdateManyWithWhereWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EntityRelationsScalarWhereInputSchema),z.lazy(() => EntityRelationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUpdateManyWithoutFeiCurrentEntityNestedInputSchema: z.ZodType<Prisma.FeiUpdateManyWithoutFeiCurrentEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiCurrentEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiCurrentEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUpdateManyWithoutFeiNextEntityNestedInputSchema: z.ZodType<Prisma.FeiUpdateManyWithoutFeiNextEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiNextEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiNextEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiNextEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiNextEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiNextEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiNextEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiNextEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiNextEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiNextEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUpdateManyWithoutFeiDepotEntityNestedInputSchema: z.ZodType<Prisma.FeiUpdateManyWithoutFeiDepotEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiDepotEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiDepotEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUpdateManyWithoutFeiSviEntityNestedInputSchema: z.ZodType<Prisma.FeiUpdateManyWithoutFeiSviEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiSviEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiSviEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiSviEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiSviEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiSviEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiSviEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiSviEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiSviEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiSviEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateManyWithoutFeiIntermediaireEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireEntityInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiIntermediaireCreateManyFeiIntermediaireEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiIntermediaireScalarWhereInputSchema),z.lazy(() => FeiIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireEntityInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EntityUpdateOneWithoutCoupledEntity_oppositeNestedInputSchema: z.ZodType<Prisma.EntityUpdateOneWithoutCoupledEntity_oppositeNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutCoupledEntity_oppositeInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCoupledEntity_oppositeInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutCoupledEntity_oppositeInputSchema).optional(),
  upsert: z.lazy(() => EntityUpsertWithoutCoupledEntity_oppositeInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EntityUpdateToOneWithWhereWithoutCoupledEntity_oppositeInputSchema),z.lazy(() => EntityUpdateWithoutCoupledEntity_oppositeInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutCoupledEntity_oppositeInputSchema) ]).optional(),
}).strict();

export const EntityUpdateOneWithoutCoupledEntityNestedInputSchema: z.ZodType<Prisma.EntityUpdateOneWithoutCoupledEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutCoupledEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCoupledEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutCoupledEntityInputSchema).optional(),
  upsert: z.lazy(() => EntityUpsertWithoutCoupledEntityInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EntityUpdateToOneWithWhereWithoutCoupledEntityInputSchema),z.lazy(() => EntityUpdateWithoutCoupledEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutCoupledEntityInputSchema) ]).optional(),
}).strict();

export const InterventionOnFeiUpdateManyWithoutEntityNestedInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateManyWithoutEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiCreateWithoutEntityInputSchema).array(),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InterventionOnFeiCreateOrConnectWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiCreateOrConnectWithoutEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InterventionOnFeiUpsertWithWhereUniqueWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUpsertWithWhereUniqueWithoutEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InterventionOnFeiCreateManyEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InterventionOnFeiUpdateWithWhereUniqueWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUpdateWithWhereUniqueWithoutEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InterventionOnFeiUpdateManyWithWhereWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUpdateManyWithWhereWithoutEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InterventionOnFeiScalarWhereInputSchema),z.lazy(() => InterventionOnFeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserNestedInputSchema: z.ZodType<Prisma.EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityRelationsCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsCreateWithoutEntityRelatedWithUserInputSchema).array(),z.lazy(() => EntityRelationsUncheckedCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUncheckedCreateWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EntityRelationsCreateOrConnectWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsCreateOrConnectWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EntityRelationsUpsertWithWhereUniqueWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUpsertWithWhereUniqueWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EntityRelationsCreateManyEntityRelatedWithUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EntityRelationsWhereUniqueInputSchema),z.lazy(() => EntityRelationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EntityRelationsUpdateWithWhereUniqueWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUpdateWithWhereUniqueWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EntityRelationsUpdateManyWithWhereWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUpdateManyWithWhereWithoutEntityRelatedWithUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EntityRelationsScalarWhereInputSchema),z.lazy(() => EntityRelationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiCurrentEntityNestedInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiCurrentEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiCurrentEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiCurrentEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiCurrentEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiNextEntityNestedInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiNextEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiNextEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiNextEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiNextEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiNextEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiNextEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiNextEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiNextEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiNextEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiNextEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiDepotEntityNestedInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiDepotEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiDepotEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiDepotEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiDepotEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiSviEntityNestedInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiSviEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiSviEntityInputSchema),z.lazy(() => FeiCreateWithoutFeiSviEntityInputSchema).array(),z.lazy(() => FeiUncheckedCreateWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiSviEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiCreateOrConnectWithoutFeiSviEntityInputSchema),z.lazy(() => FeiCreateOrConnectWithoutFeiSviEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUpsertWithWhereUniqueWithoutFeiSviEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiCreateManyFeiSviEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiWhereUniqueInputSchema),z.lazy(() => FeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUpdateWithWhereUniqueWithoutFeiSviEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiUpdateManyWithWhereWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUpdateManyWithWhereWithoutFeiSviEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireEntityInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiIntermediaireCreateManyFeiIntermediaireEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediaireEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiIntermediaireScalarWhereInputSchema),z.lazy(() => FeiIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireEntityInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EntityUncheckedUpdateOneWithoutCoupledEntityNestedInputSchema: z.ZodType<Prisma.EntityUncheckedUpdateOneWithoutCoupledEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutCoupledEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCoupledEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutCoupledEntityInputSchema).optional(),
  upsert: z.lazy(() => EntityUpsertWithoutCoupledEntityInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EntityUpdateToOneWithWhereWithoutCoupledEntityInputSchema),z.lazy(() => EntityUpdateWithoutCoupledEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutCoupledEntityInputSchema) ]).optional(),
}).strict();

export const InterventionOnFeiUncheckedUpdateManyWithoutEntityNestedInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedUpdateManyWithoutEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiCreateWithoutEntityInputSchema).array(),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutEntityInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InterventionOnFeiCreateOrConnectWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiCreateOrConnectWithoutEntityInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InterventionOnFeiUpsertWithWhereUniqueWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUpsertWithWhereUniqueWithoutEntityInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InterventionOnFeiCreateManyEntityInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InterventionOnFeiUpdateWithWhereUniqueWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUpdateWithWhereUniqueWithoutEntityInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InterventionOnFeiUpdateManyWithWhereWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUpdateManyWithWhereWithoutEntityInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InterventionOnFeiScalarWhereInputSchema),z.lazy(() => InterventionOnFeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutPasswordInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutPasswordInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPasswordInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasswordInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasswordInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutPasswordNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutPasswordNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutPasswordInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasswordInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutPasswordInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutPasswordInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutPasswordInputSchema),z.lazy(() => UserUpdateWithoutPasswordInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasswordInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutUserRelationsAsOwnerInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUserRelationsAsOwnerInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserRelationsAsOwnerInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserRelationsAsOwnerInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserRelationsAsOwnerInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutUserRelationsAsRelatedInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutUserRelationsAsRelatedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserRelationsAsRelatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserRelationsAsRelatedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserRelationsAsRelatedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumUserRelationTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumUserRelationTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => UserRelationTypeSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutUserRelationsAsOwnerNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUserRelationsAsOwnerNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserRelationsAsOwnerInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserRelationsAsOwnerInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserRelationsAsOwnerInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUserRelationsAsOwnerInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUserRelationsAsOwnerInputSchema),z.lazy(() => UserUpdateWithoutUserRelationsAsOwnerInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserRelationsAsOwnerInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutUserRelationsAsRelatedNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutUserRelationsAsRelatedNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutUserRelationsAsRelatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserRelationsAsRelatedInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutUserRelationsAsRelatedInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutUserRelationsAsRelatedInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutUserRelationsAsRelatedInputSchema),z.lazy(() => UserUpdateWithoutUserRelationsAsRelatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserRelationsAsRelatedInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutEntitiesRelationsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutEntitiesRelationsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEntitiesRelationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEntitiesRelationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEntitiesRelationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EntityCreateNestedOneWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityCreateNestedOneWithoutEntityRelatedWithUserInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityUncheckedCreateWithoutEntityRelatedWithUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutEntityRelatedWithUserInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional()
}).strict();

export const EnumEntityRelationTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumEntityRelationTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => EntityRelationTypeSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutEntitiesRelationsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutEntitiesRelationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutEntitiesRelationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEntitiesRelationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutEntitiesRelationsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutEntitiesRelationsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutEntitiesRelationsInputSchema),z.lazy(() => UserUpdateWithoutEntitiesRelationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEntitiesRelationsInputSchema) ]).optional(),
}).strict();

export const EntityUpdateOneRequiredWithoutEntityRelatedWithUserNestedInputSchema: z.ZodType<Prisma.EntityUpdateOneRequiredWithoutEntityRelatedWithUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityUncheckedCreateWithoutEntityRelatedWithUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutEntityRelatedWithUserInputSchema).optional(),
  upsert: z.lazy(() => EntityUpsertWithoutEntityRelatedWithUserInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EntityUpdateToOneWithWhereWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityUpdateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutEntityRelatedWithUserInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutLogsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutLogsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutLogsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneWithoutLogsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutLogsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutLogsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutLogsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutLogsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutLogsInputSchema),z.lazy(() => UserUpdateWithoutLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLogsInputSchema) ]).optional(),
}).strict();

export const CarcasseCreateNestedManyWithoutFeiInputSchema: z.ZodType<Prisma.CarcasseCreateNestedManyWithoutFeiInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiInputSchema),z.lazy(() => CarcasseCreateWithoutFeiInputSchema).array(),z.lazy(() => CarcasseUncheckedCreateWithoutFeiInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseCreateOrConnectWithoutFeiInputSchema),z.lazy(() => CarcasseCreateOrConnectWithoutFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseCreateManyFeiInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFeiCreatedByUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiCreatedByUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeiCreatedByUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFeiPremierDetenteurUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeiPremierDetenteurUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFeiExaminateurInitialUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeiExaminateurInitialUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EntityCreateNestedOneWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.EntityCreateNestedOneWithoutFeiDepotEntityInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiDepotEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutFeiDepotEntityInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional()
}).strict();

export const EntityCreateNestedOneWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.EntityCreateNestedOneWithoutFeiSviEntityInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiSviEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiSviEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutFeiSviEntityInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutFeiSviUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFeiSviUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeiSviUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiSviUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeiSviUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const FeiIntermediaireCreateNestedManyWithoutFeiInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateNestedManyWithoutFeiInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiIntermediaireCreateManyFeiInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFeiCurrentUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiCurrentUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeiCurrentUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.EntityCreateNestedOneWithoutFeiCurrentEntityInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiCurrentEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutFeiCurrentEntityInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional()
}).strict();

export const EntityCreateNestedOneWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.EntityCreateNestedOneWithoutFeiNextEntityInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiNextEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiNextEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutFeiNextEntityInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional()
}).strict();

export const CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InterventionOnFeiCreateNestedManyWithoutFeiInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateNestedManyWithoutFeiInput> = z.object({
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiCreateWithoutFeiInputSchema).array(),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InterventionOnFeiCreateOrConnectWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiCreateOrConnectWithoutFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InterventionOnFeiCreateManyFeiInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema: z.ZodType<Prisma.CarcasseUncheckedCreateNestedManyWithoutFeiInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiInputSchema),z.lazy(() => CarcasseCreateWithoutFeiInputSchema).array(),z.lazy(() => CarcasseUncheckedCreateWithoutFeiInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseCreateOrConnectWithoutFeiInputSchema),z.lazy(() => CarcasseCreateOrConnectWithoutFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseCreateManyFeiInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiIntermediaireCreateManyFeiInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInput> = z.object({
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiCreateWithoutFeiInputSchema).array(),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InterventionOnFeiCreateOrConnectWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiCreateOrConnectWithoutFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InterventionOnFeiCreateManyFeiInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumUserRolesFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumUserRolesFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => UserRolesSchema).optional().nullable()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const CarcasseUpdateManyWithoutFeiNestedInputSchema: z.ZodType<Prisma.CarcasseUpdateManyWithoutFeiNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiInputSchema),z.lazy(() => CarcasseCreateWithoutFeiInputSchema).array(),z.lazy(() => CarcasseUncheckedCreateWithoutFeiInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseCreateOrConnectWithoutFeiInputSchema),z.lazy(() => CarcasseCreateOrConnectWithoutFeiInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseUpsertWithWhereUniqueWithoutFeiInputSchema),z.lazy(() => CarcasseUpsertWithWhereUniqueWithoutFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseCreateManyFeiInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseUpdateWithWhereUniqueWithoutFeiInputSchema),z.lazy(() => CarcasseUpdateWithWhereUniqueWithoutFeiInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseUpdateManyWithWhereWithoutFeiInputSchema),z.lazy(() => CarcasseUpdateManyWithWhereWithoutFeiInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseScalarWhereInputSchema),z.lazy(() => CarcasseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiCreatedByUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeiCreatedByUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFeiCreatedByUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutFeiCreatedByUserInputSchema),z.lazy(() => UserUpdateWithoutFeiCreatedByUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiCreatedByUserInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutFeiPremierDetenteurUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeiPremierDetenteurUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFeiPremierDetenteurUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => UserUpdateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiPremierDetenteurUserInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutFeiExaminateurInitialUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeiExaminateurInitialUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFeiExaminateurInitialUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => UserUpdateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiExaminateurInitialUserInputSchema) ]).optional(),
}).strict();

export const EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema: z.ZodType<Prisma.EntityUpdateOneWithoutFeiDepotEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiDepotEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutFeiDepotEntityInputSchema).optional(),
  upsert: z.lazy(() => EntityUpsertWithoutFeiDepotEntityInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EntityUpdateToOneWithWhereWithoutFeiDepotEntityInputSchema),z.lazy(() => EntityUpdateWithoutFeiDepotEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiDepotEntityInputSchema) ]).optional(),
}).strict();

export const EntityUpdateOneWithoutFeiSviEntityNestedInputSchema: z.ZodType<Prisma.EntityUpdateOneWithoutFeiSviEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiSviEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiSviEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutFeiSviEntityInputSchema).optional(),
  upsert: z.lazy(() => EntityUpsertWithoutFeiSviEntityInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EntityUpdateToOneWithWhereWithoutFeiSviEntityInputSchema),z.lazy(() => EntityUpdateWithoutFeiSviEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiSviEntityInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneWithoutFeiSviUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutFeiSviUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeiSviUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiSviUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeiSviUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFeiSviUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutFeiSviUserInputSchema),z.lazy(() => UserUpdateWithoutFeiSviUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiSviUserInputSchema) ]).optional(),
}).strict();

export const FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateManyWithoutFeiNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiIntermediaireCreateManyFeiInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiIntermediaireScalarWhereInputSchema),z.lazy(() => FeiIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserUpdateOneWithoutFeiCurrentUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutFeiCurrentUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiCurrentUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeiCurrentUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFeiCurrentUserInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutFeiCurrentUserInputSchema),z.lazy(() => UserUpdateWithoutFeiCurrentUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiCurrentUserInputSchema) ]).optional(),
}).strict();

export const EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema: z.ZodType<Prisma.EntityUpdateOneWithoutFeiCurrentEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiCurrentEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutFeiCurrentEntityInputSchema).optional(),
  upsert: z.lazy(() => EntityUpsertWithoutFeiCurrentEntityInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EntityUpdateToOneWithWhereWithoutFeiCurrentEntityInputSchema),z.lazy(() => EntityUpdateWithoutFeiCurrentEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiCurrentEntityInputSchema) ]).optional(),
}).strict();

export const EntityUpdateOneWithoutFeiNextEntityNestedInputSchema: z.ZodType<Prisma.EntityUpdateOneWithoutFeiNextEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiNextEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiNextEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutFeiNextEntityInputSchema).optional(),
  upsert: z.lazy(() => EntityUpsertWithoutFeiNextEntityInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => EntityWhereInputSchema) ]).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EntityUpdateToOneWithWhereWithoutFeiNextEntityInputSchema),z.lazy(() => EntityUpdateWithoutFeiNextEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiNextEntityInputSchema) ]).optional(),
}).strict();

export const CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateManyWithoutFeiNestedInput> = z.object({
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiCreateWithoutFeiInputSchema).array(),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InterventionOnFeiCreateOrConnectWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiCreateOrConnectWithoutFeiInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InterventionOnFeiUpsertWithWhereUniqueWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUpsertWithWhereUniqueWithoutFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InterventionOnFeiCreateManyFeiInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InterventionOnFeiUpdateWithWhereUniqueWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUpdateWithWhereUniqueWithoutFeiInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InterventionOnFeiUpdateManyWithWhereWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUpdateManyWithWhereWithoutFeiInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InterventionOnFeiScalarWhereInputSchema),z.lazy(() => InterventionOnFeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema: z.ZodType<Prisma.CarcasseUncheckedUpdateManyWithoutFeiNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiInputSchema),z.lazy(() => CarcasseCreateWithoutFeiInputSchema).array(),z.lazy(() => CarcasseUncheckedCreateWithoutFeiInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseCreateOrConnectWithoutFeiInputSchema),z.lazy(() => CarcasseCreateOrConnectWithoutFeiInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseUpsertWithWhereUniqueWithoutFeiInputSchema),z.lazy(() => CarcasseUpsertWithWhereUniqueWithoutFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseCreateManyFeiInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseUpdateWithWhereUniqueWithoutFeiInputSchema),z.lazy(() => CarcasseUpdateWithWhereUniqueWithoutFeiInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseUpdateManyWithWhereWithoutFeiInputSchema),z.lazy(() => CarcasseUpdateManyWithWhereWithoutFeiInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseScalarWhereInputSchema),z.lazy(() => CarcasseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FeiIntermediaireCreateManyFeiInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiIntermediaireScalarWhereInputSchema),z.lazy(() => FeiIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireFeiInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInput> = z.object({
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiCreateWithoutFeiInputSchema).array(),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutFeiInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => InterventionOnFeiCreateOrConnectWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiCreateOrConnectWithoutFeiInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => InterventionOnFeiUpsertWithWhereUniqueWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUpsertWithWhereUniqueWithoutFeiInputSchema).array() ]).optional(),
  createMany: z.lazy(() => InterventionOnFeiCreateManyFeiInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),z.lazy(() => InterventionOnFeiWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => InterventionOnFeiUpdateWithWhereUniqueWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUpdateWithWhereUniqueWithoutFeiInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => InterventionOnFeiUpdateManyWithWhereWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUpdateManyWithWhereWithoutFeiInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => InterventionOnFeiScalarWhereInputSchema),z.lazy(() => InterventionOnFeiScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CarcasseCreateexaminateur_anomalies_carcasseInputSchema: z.ZodType<Prisma.CarcasseCreateexaminateur_anomalies_carcasseInput> = z.object({
  set: z.string().array()
}).strict();

export const CarcasseCreateexaminateur_anomalies_abatsInputSchema: z.ZodType<Prisma.CarcasseCreateexaminateur_anomalies_abatsInput> = z.object({
  set: z.string().array()
}).strict();

export const CarcasseCreatesvi_carcasse_saisie_motifInputSchema: z.ZodType<Prisma.CarcasseCreatesvi_carcasse_saisie_motifInput> = z.object({
  set: z.string().array()
}).strict();

export const FeiCreateNestedOneWithoutCarcassesInputSchema: z.ZodType<Prisma.FeiCreateNestedOneWithoutCarcassesInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutCarcassesInputSchema),z.lazy(() => FeiUncheckedCreateWithoutCarcassesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FeiCreateOrConnectWithoutCarcassesInputSchema).optional(),
  connect: z.lazy(() => FeiWhereUniqueInputSchema).optional()
}).strict();

export const FeiIntermediaireCreateNestedManyWithoutFeiIntermediairesCarcassesInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateNestedManyWithoutFeiIntermediairesCarcassesInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediairesCarcassesInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireCreateNestedOneWithoutFeiIntermediaireCarcassesRefusInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateNestedOneWithoutFeiIntermediaireCarcassesRefusInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireCarcassesRefusInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireCarcassesRefusInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireCarcassesRefusInputSchema).optional(),
  connect: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).optional()
}).strict();

export const CarcasseIntermediaireCreateNestedManyWithoutCarcasseCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateNestedManyWithoutCarcasseCarcasseIntermediaireInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseCarcasseIntermediaireInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseCarcasseIntermediaireInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediairesCarcassesInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediairesCarcassesInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediairesCarcassesInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseCarcasseIntermediaireInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseCarcasseIntermediaireInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseCarcasseIntermediaireInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CarcasseUpdateexaminateur_anomalies_carcasseInputSchema: z.ZodType<Prisma.CarcasseUpdateexaminateur_anomalies_carcasseInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CarcasseUpdateexaminateur_anomalies_abatsInputSchema: z.ZodType<Prisma.CarcasseUpdateexaminateur_anomalies_abatsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const CarcasseUpdatesvi_carcasse_saisie_motifInputSchema: z.ZodType<Prisma.CarcasseUpdatesvi_carcasse_saisie_motifInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const FeiUpdateOneRequiredWithoutCarcassesNestedInputSchema: z.ZodType<Prisma.FeiUpdateOneRequiredWithoutCarcassesNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutCarcassesInputSchema),z.lazy(() => FeiUncheckedCreateWithoutCarcassesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FeiCreateOrConnectWithoutCarcassesInputSchema).optional(),
  upsert: z.lazy(() => FeiUpsertWithoutCarcassesInputSchema).optional(),
  connect: z.lazy(() => FeiWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FeiUpdateToOneWithWhereWithoutCarcassesInputSchema),z.lazy(() => FeiUpdateWithoutCarcassesInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutCarcassesInputSchema) ]).optional(),
}).strict();

export const FeiIntermediaireUpdateManyWithoutFeiIntermediairesCarcassesNestedInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateManyWithoutFeiIntermediairesCarcassesNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediairesCarcassesInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiIntermediaireScalarWhereInputSchema),z.lazy(() => FeiIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireUpdateOneWithoutFeiIntermediaireCarcassesRefusNestedInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateOneWithoutFeiIntermediaireCarcassesRefusNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireCarcassesRefusInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireCarcassesRefusInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireCarcassesRefusInputSchema).optional(),
  upsert: z.lazy(() => FeiIntermediaireUpsertWithoutFeiIntermediaireCarcassesRefusInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => FeiIntermediaireWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => FeiIntermediaireWhereInputSchema) ]).optional(),
  connect: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateToOneWithWhereWithoutFeiIntermediaireCarcassesRefusInputSchema),z.lazy(() => FeiIntermediaireUpdateWithoutFeiIntermediaireCarcassesRefusInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutFeiIntermediaireCarcassesRefusInputSchema) ]).optional(),
}).strict();

export const CarcasseIntermediaireUpdateManyWithoutCarcasseCarcasseIntermediaireNestedInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateManyWithoutCarcasseCarcasseIntermediaireNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseCarcasseIntermediaireInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseCarcasseIntermediaireInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediairesCarcassesNestedInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediairesCarcassesNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediairesCarcassesInputSchema).array(),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireCreateOrConnectWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediairesCarcassesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FeiIntermediaireScalarWhereInputSchema),z.lazy(() => FeiIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseCarcasseIntermediaireNestedInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseCarcasseIntermediaireNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseCarcasseIntermediaireInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseCarcasseIntermediaireInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseCarcasseIntermediaireInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiCreateNestedOneWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.FeiCreateNestedOneWithoutInterventionOnFeiInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutInterventionOnFeiInputSchema),z.lazy(() => FeiUncheckedCreateWithoutInterventionOnFeiInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FeiCreateOrConnectWithoutInterventionOnFeiInputSchema).optional(),
  connect: z.lazy(() => FeiWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutInterventionOnFeiInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInterventionOnFeiInputSchema),z.lazy(() => UserUncheckedCreateWithoutInterventionOnFeiInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInterventionOnFeiInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EntityCreateNestedOneWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.EntityCreateNestedOneWithoutInterventionOnFeiInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutInterventionOnFeiInputSchema),z.lazy(() => EntityUncheckedCreateWithoutInterventionOnFeiInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutInterventionOnFeiInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional()
}).strict();

export const EnumUserRolesFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumUserRolesFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => UserRolesSchema).optional()
}).strict();

export const FeiUpdateOneRequiredWithoutInterventionOnFeiNestedInputSchema: z.ZodType<Prisma.FeiUpdateOneRequiredWithoutInterventionOnFeiNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutInterventionOnFeiInputSchema),z.lazy(() => FeiUncheckedCreateWithoutInterventionOnFeiInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FeiCreateOrConnectWithoutInterventionOnFeiInputSchema).optional(),
  upsert: z.lazy(() => FeiUpsertWithoutInterventionOnFeiInputSchema).optional(),
  connect: z.lazy(() => FeiWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FeiUpdateToOneWithWhereWithoutInterventionOnFeiInputSchema),z.lazy(() => FeiUpdateWithoutInterventionOnFeiInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutInterventionOnFeiInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutInterventionOnFeiNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutInterventionOnFeiNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutInterventionOnFeiInputSchema),z.lazy(() => UserUncheckedCreateWithoutInterventionOnFeiInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutInterventionOnFeiInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutInterventionOnFeiInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutInterventionOnFeiInputSchema),z.lazy(() => UserUpdateWithoutInterventionOnFeiInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInterventionOnFeiInputSchema) ]).optional(),
}).strict();

export const EntityUpdateOneRequiredWithoutInterventionOnFeiNestedInputSchema: z.ZodType<Prisma.EntityUpdateOneRequiredWithoutInterventionOnFeiNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutInterventionOnFeiInputSchema),z.lazy(() => EntityUncheckedCreateWithoutInterventionOnFeiInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutInterventionOnFeiInputSchema).optional(),
  upsert: z.lazy(() => EntityUpsertWithoutInterventionOnFeiInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EntityUpdateToOneWithWhereWithoutInterventionOnFeiInputSchema),z.lazy(() => EntityUpdateWithoutInterventionOnFeiInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutInterventionOnFeiInputSchema) ]).optional(),
}).strict();

export const FeiCreateNestedOneWithoutFeiIntermediairesInputSchema: z.ZodType<Prisma.FeiCreateNestedOneWithoutFeiIntermediairesInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiIntermediairesInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiIntermediairesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FeiCreateOrConnectWithoutFeiIntermediairesInputSchema).optional(),
  connect: z.lazy(() => FeiWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutFeiIntermediaireUserInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiIntermediaireUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeiIntermediaireUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EntityCreateNestedOneWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.EntityCreateNestedOneWithoutFeiIntermediaireEntityInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiIntermediaireEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutFeiIntermediaireEntityInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional()
}).strict();

export const CarcasseCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema: z.ZodType<Prisma.CarcasseCreateNestedManyWithoutFeiIntermediairesCarcasseInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseCreateWithoutFeiIntermediairesCarcasseInputSchema).array(),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CarcasseCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema: z.ZodType<Prisma.CarcasseCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseCreateWithoutFeiIntermediaireCarcasseRefusInputSchema).array(),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseCreateManyFeiIntermediaireCarcasseRefusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiIntermediaireInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CarcasseUncheckedCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema: z.ZodType<Prisma.CarcasseUncheckedCreateNestedManyWithoutFeiIntermediairesCarcasseInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseCreateWithoutFeiIntermediairesCarcasseInputSchema).array(),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CarcasseUncheckedCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema: z.ZodType<Prisma.CarcasseUncheckedCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseCreateWithoutFeiIntermediaireCarcasseRefusInputSchema).array(),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseCreateManyFeiIntermediaireCarcasseRefusInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiIntermediaireInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FeiUpdateOneRequiredWithoutFeiIntermediairesNestedInputSchema: z.ZodType<Prisma.FeiUpdateOneRequiredWithoutFeiIntermediairesNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiIntermediairesInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiIntermediairesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FeiCreateOrConnectWithoutFeiIntermediairesInputSchema).optional(),
  upsert: z.lazy(() => FeiUpsertWithoutFeiIntermediairesInputSchema).optional(),
  connect: z.lazy(() => FeiWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FeiUpdateToOneWithWhereWithoutFeiIntermediairesInputSchema),z.lazy(() => FeiUpdateWithoutFeiIntermediairesInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiIntermediairesInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutFeiIntermediaireUserNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutFeiIntermediaireUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiIntermediaireUserInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutFeiIntermediaireUserInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutFeiIntermediaireUserInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutFeiIntermediaireUserInputSchema),z.lazy(() => UserUpdateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiIntermediaireUserInputSchema) ]).optional(),
}).strict();

export const EntityUpdateOneRequiredWithoutFeiIntermediaireEntityNestedInputSchema: z.ZodType<Prisma.EntityUpdateOneRequiredWithoutFeiIntermediaireEntityNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiIntermediaireEntityInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutFeiIntermediaireEntityInputSchema).optional(),
  upsert: z.lazy(() => EntityUpsertWithoutFeiIntermediaireEntityInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EntityUpdateToOneWithWhereWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => EntityUpdateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiIntermediaireEntityInputSchema) ]).optional(),
}).strict();

export const CarcasseUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema: z.ZodType<Prisma.CarcasseUpdateManyWithoutFeiIntermediairesCarcasseNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseCreateWithoutFeiIntermediairesCarcasseInputSchema).array(),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseUpsertWithWhereUniqueWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUpsertWithWhereUniqueWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseUpdateWithWhereUniqueWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUpdateWithWhereUniqueWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseUpdateManyWithWhereWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUpdateManyWithWhereWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseScalarWhereInputSchema),z.lazy(() => CarcasseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CarcasseUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema: z.ZodType<Prisma.CarcasseUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseCreateWithoutFeiIntermediaireCarcasseRefusInputSchema).array(),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseUpsertWithWhereUniqueWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUpsertWithWhereUniqueWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseCreateManyFeiIntermediaireCarcasseRefusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseUpdateWithWhereUniqueWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUpdateWithWhereUniqueWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseUpdateManyWithWhereWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUpdateManyWithWhereWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseScalarWhereInputSchema),z.lazy(() => CarcasseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiIntermediaireInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CarcasseUncheckedUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema: z.ZodType<Prisma.CarcasseUncheckedUpdateManyWithoutFeiIntermediairesCarcasseNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseCreateWithoutFeiIntermediairesCarcasseInputSchema).array(),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseUpsertWithWhereUniqueWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUpsertWithWhereUniqueWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseUpdateWithWhereUniqueWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUpdateWithWhereUniqueWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseUpdateManyWithWhereWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUpdateManyWithWhereWithoutFeiIntermediairesCarcasseInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseScalarWhereInputSchema),z.lazy(() => CarcasseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CarcasseUncheckedUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema: z.ZodType<Prisma.CarcasseUncheckedUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseCreateWithoutFeiIntermediaireCarcasseRefusInputSchema).array(),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseCreateOrConnectWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseUpsertWithWhereUniqueWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUpsertWithWhereUniqueWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseCreateManyFeiIntermediaireCarcasseRefusInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseWhereUniqueInputSchema),z.lazy(() => CarcasseWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseUpdateWithWhereUniqueWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUpdateWithWhereUniqueWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseUpdateManyWithWhereWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUpdateManyWithWhereWithoutFeiIntermediaireCarcasseRefusInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseScalarWhereInputSchema),z.lazy(() => CarcasseScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array(),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  createMany: z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiIntermediaireInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FeiCreateNestedOneWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiCreateNestedOneWithoutCarcasseIntermediaireInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FeiCreateOrConnectWithoutCarcasseIntermediaireInputSchema).optional(),
  connect: z.lazy(() => FeiWhereUniqueInputSchema).optional()
}).strict();

export const CarcasseCreateNestedOneWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseCreateNestedOneWithoutCarcasseIntermediaireInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CarcasseCreateOrConnectWithoutCarcasseIntermediaireInputSchema).optional(),
  connect: z.lazy(() => CarcasseWhereUniqueInputSchema).optional()
}).strict();

export const UserCreateNestedOneWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutCarcasseIntermediaireInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => UserUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCarcasseIntermediaireInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EntityCreateNestedOneWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.EntityCreateNestedOneWithoutCarcasseIntermediaireInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutCarcasseIntermediaireInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional()
}).strict();

export const FeiIntermediaireCreateNestedOneWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateNestedOneWithoutCarcasseIntermediaireInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FeiIntermediaireCreateOrConnectWithoutCarcasseIntermediaireInputSchema).optional(),
  connect: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).optional()
}).strict();

export const FeiUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema: z.ZodType<Prisma.FeiUpdateOneRequiredWithoutCarcasseIntermediaireNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FeiCreateOrConnectWithoutCarcasseIntermediaireInputSchema).optional(),
  upsert: z.lazy(() => FeiUpsertWithoutCarcasseIntermediaireInputSchema).optional(),
  connect: z.lazy(() => FeiWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FeiUpdateToOneWithWhereWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
}).strict();

export const CarcasseUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema: z.ZodType<Prisma.CarcasseUpdateOneRequiredWithoutCarcasseIntermediaireNestedInput> = z.object({
  create: z.union([ z.lazy(() => CarcasseCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => CarcasseCreateOrConnectWithoutCarcasseIntermediaireInputSchema).optional(),
  upsert: z.lazy(() => CarcasseUpsertWithoutCarcasseIntermediaireInputSchema).optional(),
  connect: z.lazy(() => CarcasseWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => CarcasseUpdateToOneWithWhereWithoutCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
}).strict();

export const UserUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutCarcasseIntermediaireNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => UserUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutCarcasseIntermediaireInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutCarcasseIntermediaireInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutCarcasseIntermediaireInputSchema),z.lazy(() => UserUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
}).strict();

export const EntityUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema: z.ZodType<Prisma.EntityUpdateOneRequiredWithoutCarcasseIntermediaireNestedInput> = z.object({
  create: z.union([ z.lazy(() => EntityCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EntityCreateOrConnectWithoutCarcasseIntermediaireInputSchema).optional(),
  upsert: z.lazy(() => EntityUpsertWithoutCarcasseIntermediaireInputSchema).optional(),
  connect: z.lazy(() => EntityWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EntityUpdateToOneWithWhereWithoutCarcasseIntermediaireInputSchema),z.lazy(() => EntityUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
}).strict();

export const FeiIntermediaireUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateOneRequiredWithoutCarcasseIntermediaireNestedInput> = z.object({
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => FeiIntermediaireCreateOrConnectWithoutCarcasseIntermediaireInputSchema).optional(),
  upsert: z.lazy(() => FeiIntermediaireUpsertWithoutCarcasseIntermediaireInputSchema).optional(),
  connect: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateToOneWithWhereWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiIntermediaireUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutNotificationLogInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutNotificationLogInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutNotificationLogInputSchema),z.lazy(() => UserUncheckedCreateWithoutNotificationLogInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutNotificationLogInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const EnumUserNotificationsFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumUserNotificationsFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => UserNotificationsSchema).optional()
}).strict();

export const UserUpdateOneWithoutNotificationLogNestedInputSchema: z.ZodType<Prisma.UserUpdateOneWithoutNotificationLogNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutNotificationLogInputSchema),z.lazy(() => UserUncheckedCreateWithoutNotificationLogInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutNotificationLogInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutNotificationLogInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UserWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutNotificationLogInputSchema),z.lazy(() => UserUpdateWithoutNotificationLogInputSchema),z.lazy(() => UserUncheckedUpdateWithoutNotificationLogInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedEnumEntityTypesFilterSchema: z.ZodType<Prisma.NestedEnumEntityTypesFilter> = z.object({
  equals: z.lazy(() => EntityTypesSchema).optional(),
  in: z.lazy(() => EntityTypesSchema).array().optional(),
  notIn: z.lazy(() => EntityTypesSchema).array().optional(),
  not: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => NestedEnumEntityTypesFilterSchema) ]).optional(),
}).strict();

export const NestedEnumEntityTypesWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumEntityTypesWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EntityTypesSchema).optional(),
  in: z.lazy(() => EntityTypesSchema).array().optional(),
  notIn: z.lazy(() => EntityTypesSchema).array().optional(),
  not: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => NestedEnumEntityTypesWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEntityTypesFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEntityTypesFilterSchema).optional()
}).strict();

export const NestedEnumUserRelationTypeFilterSchema: z.ZodType<Prisma.NestedEnumUserRelationTypeFilter> = z.object({
  equals: z.lazy(() => UserRelationTypeSchema).optional(),
  in: z.lazy(() => UserRelationTypeSchema).array().optional(),
  notIn: z.lazy(() => UserRelationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => NestedEnumUserRelationTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumUserRelationTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumUserRelationTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRelationTypeSchema).optional(),
  in: z.lazy(() => UserRelationTypeSchema).array().optional(),
  notIn: z.lazy(() => UserRelationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => NestedEnumUserRelationTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRelationTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRelationTypeFilterSchema).optional()
}).strict();

export const NestedEnumEntityRelationTypeFilterSchema: z.ZodType<Prisma.NestedEnumEntityRelationTypeFilter> = z.object({
  equals: z.lazy(() => EntityRelationTypeSchema).optional(),
  in: z.lazy(() => EntityRelationTypeSchema).array().optional(),
  notIn: z.lazy(() => EntityRelationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => NestedEnumEntityRelationTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumEntityRelationTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumEntityRelationTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EntityRelationTypeSchema).optional(),
  in: z.lazy(() => EntityRelationTypeSchema).array().optional(),
  notIn: z.lazy(() => EntityRelationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => NestedEnumEntityRelationTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEntityRelationTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEntityRelationTypeFilterSchema).optional()
}).strict();

export const NestedEnumUserRolesNullableFilterSchema: z.ZodType<Prisma.NestedEnumUserRolesNullableFilter> = z.object({
  equals: z.lazy(() => UserRolesSchema).optional().nullable(),
  in: z.lazy(() => UserRolesSchema).array().optional().nullable(),
  notIn: z.lazy(() => UserRolesSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NestedEnumUserRolesNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedEnumUserRolesNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumUserRolesNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRolesSchema).optional().nullable(),
  in: z.lazy(() => UserRolesSchema).array().optional().nullable(),
  notIn: z.lazy(() => UserRolesSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NestedEnumUserRolesNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRolesNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRolesNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumUserRolesFilterSchema: z.ZodType<Prisma.NestedEnumUserRolesFilter> = z.object({
  equals: z.lazy(() => UserRolesSchema).optional(),
  in: z.lazy(() => UserRolesSchema).array().optional(),
  notIn: z.lazy(() => UserRolesSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NestedEnumUserRolesFilterSchema) ]).optional(),
}).strict();

export const NestedEnumUserRolesWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumUserRolesWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserRolesSchema).optional(),
  in: z.lazy(() => UserRolesSchema).array().optional(),
  notIn: z.lazy(() => UserRolesSchema).array().optional(),
  not: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NestedEnumUserRolesWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserRolesFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserRolesFilterSchema).optional()
}).strict();

export const NestedEnumUserNotificationsFilterSchema: z.ZodType<Prisma.NestedEnumUserNotificationsFilter> = z.object({
  equals: z.lazy(() => UserNotificationsSchema).optional(),
  in: z.lazy(() => UserNotificationsSchema).array().optional(),
  notIn: z.lazy(() => UserNotificationsSchema).array().optional(),
  not: z.union([ z.lazy(() => UserNotificationsSchema),z.lazy(() => NestedEnumUserNotificationsFilterSchema) ]).optional(),
}).strict();

export const NestedEnumUserNotificationsWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumUserNotificationsWithAggregatesFilter> = z.object({
  equals: z.lazy(() => UserNotificationsSchema).optional(),
  in: z.lazy(() => UserNotificationsSchema).array().optional(),
  notIn: z.lazy(() => UserNotificationsSchema).array().optional(),
  not: z.union([ z.lazy(() => UserNotificationsSchema),z.lazy(() => NestedEnumUserNotificationsWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumUserNotificationsFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumUserNotificationsFilterSchema).optional()
}).strict();

export const PasswordCreateWithoutUserInputSchema: z.ZodType<Prisma.PasswordCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  password: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const PasswordUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.PasswordUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  password: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const PasswordCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.PasswordCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => PasswordWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PasswordCreateWithoutUserInputSchema),z.lazy(() => PasswordUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const UserRelationsCreateWithoutUserOwnerOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsCreateWithoutUserOwnerOfUserRelationInput> = z.object({
  id: z.string().optional(),
  relation: z.lazy(() => UserRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  UserRelatedOfUserRelation: z.lazy(() => UserCreateNestedOneWithoutUserRelationsAsRelatedInputSchema)
}).strict();

export const UserRelationsUncheckedCreateWithoutUserOwnerOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUncheckedCreateWithoutUserOwnerOfUserRelationInput> = z.object({
  id: z.string().optional(),
  related_id: z.string(),
  relation: z.lazy(() => UserRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const UserRelationsCreateOrConnectWithoutUserOwnerOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsCreateOrConnectWithoutUserOwnerOfUserRelationInput> = z.object({
  where: z.lazy(() => UserRelationsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserRelationsCreateWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedCreateWithoutUserOwnerOfUserRelationInputSchema) ]),
}).strict();

export const UserRelationsCreateManyUserOwnerOfUserRelationInputEnvelopeSchema: z.ZodType<Prisma.UserRelationsCreateManyUserOwnerOfUserRelationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserRelationsCreateManyUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateManyUserOwnerOfUserRelationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserRelationsCreateWithoutUserRelatedOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsCreateWithoutUserRelatedOfUserRelationInput> = z.object({
  id: z.string().optional(),
  relation: z.lazy(() => UserRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  UserOwnerOfUserRelation: z.lazy(() => UserCreateNestedOneWithoutUserRelationsAsOwnerInputSchema)
}).strict();

export const UserRelationsUncheckedCreateWithoutUserRelatedOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUncheckedCreateWithoutUserRelatedOfUserRelationInput> = z.object({
  id: z.string().optional(),
  owner_id: z.string(),
  relation: z.lazy(() => UserRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const UserRelationsCreateOrConnectWithoutUserRelatedOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsCreateOrConnectWithoutUserRelatedOfUserRelationInput> = z.object({
  where: z.lazy(() => UserRelationsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserRelationsCreateWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedCreateWithoutUserRelatedOfUserRelationInputSchema) ]),
}).strict();

export const UserRelationsCreateManyUserRelatedOfUserRelationInputEnvelopeSchema: z.ZodType<Prisma.UserRelationsCreateManyUserRelatedOfUserRelationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => UserRelationsCreateManyUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsCreateManyUserRelatedOfUserRelationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EntityRelationsCreateWithoutUserRelatedWithEntityInputSchema: z.ZodType<Prisma.EntityRelationsCreateWithoutUserRelatedWithEntityInput> = z.object({
  id: z.string().optional(),
  relation: z.lazy(() => EntityRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  EntityRelatedWithUser: z.lazy(() => EntityCreateNestedOneWithoutEntityRelatedWithUserInputSchema)
}).strict();

export const EntityRelationsUncheckedCreateWithoutUserRelatedWithEntityInputSchema: z.ZodType<Prisma.EntityRelationsUncheckedCreateWithoutUserRelatedWithEntityInput> = z.object({
  id: z.string().optional(),
  entity_id: z.string(),
  relation: z.lazy(() => EntityRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const EntityRelationsCreateOrConnectWithoutUserRelatedWithEntityInputSchema: z.ZodType<Prisma.EntityRelationsCreateOrConnectWithoutUserRelatedWithEntityInput> = z.object({
  where: z.lazy(() => EntityRelationsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EntityRelationsCreateWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUncheckedCreateWithoutUserRelatedWithEntityInputSchema) ]),
}).strict();

export const EntityRelationsCreateManyUserRelatedWithEntityInputEnvelopeSchema: z.ZodType<Prisma.EntityRelationsCreateManyUserRelatedWithEntityInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EntityRelationsCreateManyUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsCreateManyUserRelatedWithEntityInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeiCreateWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.FeiCreateWithoutFeiCreatedByUserInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiSviEntityInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserCreateNestedOneWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserCreateNestedOneWithoutFeiCurrentUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiNextEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.FeiUncheckedCreateWithoutFeiCreatedByUserInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiCreateOrConnectWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.FeiCreateOrConnectWithoutFeiCreatedByUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCreatedByUserInputSchema) ]),
}).strict();

export const FeiCreateManyFeiCreatedByUserInputEnvelopeSchema: z.ZodType<Prisma.FeiCreateManyFeiCreatedByUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FeiCreateManyFeiCreatedByUserInputSchema),z.lazy(() => FeiCreateManyFeiCreatedByUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeiCreateWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.FeiCreateWithoutFeiCurrentUserInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserCreateNestedOneWithoutFeiCreatedByUserInputSchema),
  FeiPremierDetenteurUser: z.lazy(() => UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiSviEntityInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserCreateNestedOneWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiNextEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.FeiUncheckedCreateWithoutFeiCurrentUserInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiCreateOrConnectWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.FeiCreateOrConnectWithoutFeiCurrentUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentUserInputSchema) ]),
}).strict();

export const FeiCreateManyFeiCurrentUserInputEnvelopeSchema: z.ZodType<Prisma.FeiCreateManyFeiCurrentUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FeiCreateManyFeiCurrentUserInputSchema),z.lazy(() => FeiCreateManyFeiCurrentUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeiCreateWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.FeiCreateWithoutFeiPremierDetenteurUserInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserCreateNestedOneWithoutFeiCreatedByUserInputSchema),
  FeiExaminateurInitialUser: z.lazy(() => UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiSviEntityInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserCreateNestedOneWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserCreateNestedOneWithoutFeiCurrentUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiNextEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.FeiUncheckedCreateWithoutFeiPremierDetenteurUserInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiCreateOrConnectWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.FeiCreateOrConnectWithoutFeiPremierDetenteurUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema) ]),
}).strict();

export const FeiCreateManyFeiPremierDetenteurUserInputEnvelopeSchema: z.ZodType<Prisma.FeiCreateManyFeiPremierDetenteurUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FeiCreateManyFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiCreateManyFeiPremierDetenteurUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeiCreateWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.FeiCreateWithoutFeiExaminateurInitialUserInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserCreateNestedOneWithoutFeiCreatedByUserInputSchema),
  FeiPremierDetenteurUser: z.lazy(() => UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiSviEntityInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserCreateNestedOneWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserCreateNestedOneWithoutFeiCurrentUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiNextEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.FeiUncheckedCreateWithoutFeiExaminateurInitialUserInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiCreateOrConnectWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.FeiCreateOrConnectWithoutFeiExaminateurInitialUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema) ]),
}).strict();

export const FeiCreateManyFeiExaminateurInitialUserInputEnvelopeSchema: z.ZodType<Prisma.FeiCreateManyFeiExaminateurInitialUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FeiCreateManyFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiCreateManyFeiExaminateurInitialUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeiCreateWithoutFeiSviUserInputSchema: z.ZodType<Prisma.FeiCreateWithoutFeiSviUserInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserCreateNestedOneWithoutFeiCreatedByUserInputSchema),
  FeiPremierDetenteurUser: z.lazy(() => UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserCreateNestedOneWithoutFeiCurrentUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiNextEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateWithoutFeiSviUserInputSchema: z.ZodType<Prisma.FeiUncheckedCreateWithoutFeiSviUserInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiCreateOrConnectWithoutFeiSviUserInputSchema: z.ZodType<Prisma.FeiCreateOrConnectWithoutFeiSviUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiSviUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiSviUserInputSchema) ]),
}).strict();

export const FeiCreateManyFeiSviUserInputEnvelopeSchema: z.ZodType<Prisma.FeiCreateManyFeiSviUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FeiCreateManyFeiSviUserInputSchema),z.lazy(() => FeiCreateManyFeiSviUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeiIntermediaireCreateWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateWithoutFeiIntermediaireUserInput> = z.object({
  id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Fei: z.lazy(() => FeiCreateNestedOneWithoutFeiIntermediairesInputSchema),
  FeiIntermediaireEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiIntermediaireEntityInputSchema),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireUserInput> = z.object({
  id: z.string(),
  fei_numero: z.string(),
  fei_intermediaire_entity_id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).optional()
}).strict();

export const FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireUserInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireUserInputSchema) ]),
}).strict();

export const FeiIntermediaireCreateManyFeiIntermediaireUserInputEnvelopeSchema: z.ZodType<Prisma.FeiIntermediaireCreateManyFeiIntermediaireUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FeiIntermediaireCreateManyFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireCreateManyFeiIntermediaireUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LogsCreateWithoutUserInputSchema: z.ZodType<Prisma.LogsCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  action: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const LogsUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.LogsUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  action: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const LogsCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.LogsCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => LogsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LogsCreateWithoutUserInputSchema),z.lazy(() => LogsUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const LogsCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.LogsCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LogsCreateManyUserInputSchema),z.lazy(() => LogsCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const NotificationLogCreateWithoutUserInputSchema: z.ZodType<Prisma.NotificationLogCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  type: z.lazy(() => UserNotificationsSchema),
  email: z.string().optional().nullable(),
  web_push_token: z.string().optional().nullable(),
  action: z.string(),
  payload: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const NotificationLogUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.NotificationLogUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  type: z.lazy(() => UserNotificationsSchema),
  email: z.string().optional().nullable(),
  web_push_token: z.string().optional().nullable(),
  action: z.string(),
  payload: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const NotificationLogCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.NotificationLogCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => NotificationLogWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => NotificationLogCreateWithoutUserInputSchema),z.lazy(() => NotificationLogUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const NotificationLogCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.NotificationLogCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => NotificationLogCreateManyUserInputSchema),z.lazy(() => NotificationLogCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CarcasseIntermediaireCreateWithoutCarcasseIntermediaireUserInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateWithoutCarcasseIntermediaireUserInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  CarcasseIntermediaireFei: z.lazy(() => FeiCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseCarcasseIntermediaire: z.lazy(() => CarcasseCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireEntity: z.lazy(() => EntityCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireFeiIntermediaire: z.lazy(() => FeiIntermediaireCreateNestedOneWithoutCarcasseIntermediaireInputSchema)
}).strict();

export const CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireUserInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireUserInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  fei_numero: z.string(),
  numero_bracelet: z.string(),
  fei_intermediaire_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireUserInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireUserInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireUserInputSchema) ]),
}).strict();

export const CarcasseIntermediaireCreateManyCarcasseIntermediaireUserInputEnvelopeSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateManyCarcasseIntermediaireUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InterventionOnFeiCreateWithoutUserInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  role: z.lazy(() => UserRolesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Fei: z.lazy(() => FeiCreateNestedOneWithoutInterventionOnFeiInputSchema),
  Entity: z.lazy(() => EntityCreateNestedOneWithoutInterventionOnFeiInputSchema)
}).strict();

export const InterventionOnFeiUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().optional(),
  fei_numero: z.string(),
  entity_id: z.string(),
  role: z.lazy(() => UserRolesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const InterventionOnFeiCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const InterventionOnFeiCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.InterventionOnFeiCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InterventionOnFeiCreateManyUserInputSchema),z.lazy(() => InterventionOnFeiCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PasswordUpsertWithoutUserInputSchema: z.ZodType<Prisma.PasswordUpsertWithoutUserInput> = z.object({
  update: z.union([ z.lazy(() => PasswordUpdateWithoutUserInputSchema),z.lazy(() => PasswordUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => PasswordCreateWithoutUserInputSchema),z.lazy(() => PasswordUncheckedCreateWithoutUserInputSchema) ]),
  where: z.lazy(() => PasswordWhereInputSchema).optional()
}).strict();

export const PasswordUpdateToOneWithWhereWithoutUserInputSchema: z.ZodType<Prisma.PasswordUpdateToOneWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => PasswordWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PasswordUpdateWithoutUserInputSchema),z.lazy(() => PasswordUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const PasswordUpdateWithoutUserInputSchema: z.ZodType<Prisma.PasswordUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PasswordUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.PasswordUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserRelationsUpsertWithWhereUniqueWithoutUserOwnerOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUpsertWithWhereUniqueWithoutUserOwnerOfUserRelationInput> = z.object({
  where: z.lazy(() => UserRelationsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserRelationsUpdateWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedUpdateWithoutUserOwnerOfUserRelationInputSchema) ]),
  create: z.union([ z.lazy(() => UserRelationsCreateWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedCreateWithoutUserOwnerOfUserRelationInputSchema) ]),
}).strict();

export const UserRelationsUpdateWithWhereUniqueWithoutUserOwnerOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUpdateWithWhereUniqueWithoutUserOwnerOfUserRelationInput> = z.object({
  where: z.lazy(() => UserRelationsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserRelationsUpdateWithoutUserOwnerOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedUpdateWithoutUserOwnerOfUserRelationInputSchema) ]),
}).strict();

export const UserRelationsUpdateManyWithWhereWithoutUserOwnerOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUpdateManyWithWhereWithoutUserOwnerOfUserRelationInput> = z.object({
  where: z.lazy(() => UserRelationsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserRelationsUpdateManyMutationInputSchema),z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationInputSchema) ]),
}).strict();

export const UserRelationsScalarWhereInputSchema: z.ZodType<Prisma.UserRelationsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserRelationsScalarWhereInputSchema),z.lazy(() => UserRelationsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserRelationsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserRelationsScalarWhereInputSchema),z.lazy(() => UserRelationsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  owner_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  related_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => EnumUserRelationTypeFilterSchema),z.lazy(() => UserRelationTypeSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const UserRelationsUpsertWithWhereUniqueWithoutUserRelatedOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUpsertWithWhereUniqueWithoutUserRelatedOfUserRelationInput> = z.object({
  where: z.lazy(() => UserRelationsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UserRelationsUpdateWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedUpdateWithoutUserRelatedOfUserRelationInputSchema) ]),
  create: z.union([ z.lazy(() => UserRelationsCreateWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedCreateWithoutUserRelatedOfUserRelationInputSchema) ]),
}).strict();

export const UserRelationsUpdateWithWhereUniqueWithoutUserRelatedOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUpdateWithWhereUniqueWithoutUserRelatedOfUserRelationInput> = z.object({
  where: z.lazy(() => UserRelationsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UserRelationsUpdateWithoutUserRelatedOfUserRelationInputSchema),z.lazy(() => UserRelationsUncheckedUpdateWithoutUserRelatedOfUserRelationInputSchema) ]),
}).strict();

export const UserRelationsUpdateManyWithWhereWithoutUserRelatedOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUpdateManyWithWhereWithoutUserRelatedOfUserRelationInput> = z.object({
  where: z.lazy(() => UserRelationsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UserRelationsUpdateManyMutationInputSchema),z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationInputSchema) ]),
}).strict();

export const EntityRelationsUpsertWithWhereUniqueWithoutUserRelatedWithEntityInputSchema: z.ZodType<Prisma.EntityRelationsUpsertWithWhereUniqueWithoutUserRelatedWithEntityInput> = z.object({
  where: z.lazy(() => EntityRelationsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EntityRelationsUpdateWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUncheckedUpdateWithoutUserRelatedWithEntityInputSchema) ]),
  create: z.union([ z.lazy(() => EntityRelationsCreateWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUncheckedCreateWithoutUserRelatedWithEntityInputSchema) ]),
}).strict();

export const EntityRelationsUpdateWithWhereUniqueWithoutUserRelatedWithEntityInputSchema: z.ZodType<Prisma.EntityRelationsUpdateWithWhereUniqueWithoutUserRelatedWithEntityInput> = z.object({
  where: z.lazy(() => EntityRelationsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EntityRelationsUpdateWithoutUserRelatedWithEntityInputSchema),z.lazy(() => EntityRelationsUncheckedUpdateWithoutUserRelatedWithEntityInputSchema) ]),
}).strict();

export const EntityRelationsUpdateManyWithWhereWithoutUserRelatedWithEntityInputSchema: z.ZodType<Prisma.EntityRelationsUpdateManyWithWhereWithoutUserRelatedWithEntityInput> = z.object({
  where: z.lazy(() => EntityRelationsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EntityRelationsUpdateManyMutationInputSchema),z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityInputSchema) ]),
}).strict();

export const EntityRelationsScalarWhereInputSchema: z.ZodType<Prisma.EntityRelationsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EntityRelationsScalarWhereInputSchema),z.lazy(() => EntityRelationsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EntityRelationsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EntityRelationsScalarWhereInputSchema),z.lazy(() => EntityRelationsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  owner_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relation: z.union([ z.lazy(() => EnumEntityRelationTypeFilterSchema),z.lazy(() => EntityRelationTypeSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const FeiUpsertWithWhereUniqueWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.FeiUpsertWithWhereUniqueWithoutFeiCreatedByUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeiUpdateWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiCreatedByUserInputSchema) ]),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCreatedByUserInputSchema) ]),
}).strict();

export const FeiUpdateWithWhereUniqueWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.FeiUpdateWithWhereUniqueWithoutFeiCreatedByUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateWithoutFeiCreatedByUserInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiCreatedByUserInputSchema) ]),
}).strict();

export const FeiUpdateManyWithWhereWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.FeiUpdateManyWithWhereWithoutFeiCreatedByUserInput> = z.object({
  where: z.lazy(() => FeiScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateManyMutationInputSchema),z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserInputSchema) ]),
}).strict();

export const FeiScalarWhereInputSchema: z.ZodType<Prisma.FeiScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeiScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeiScalarWhereInputSchema),z.lazy(() => FeiScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  date_mise_a_mort: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_by_user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_current_owner_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => EnumUserRolesNullableFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => EnumUserRolesNullableFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => EnumUserRolesNullableFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_entity_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_user_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  svi_commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_signed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const FeiUpsertWithWhereUniqueWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.FeiUpsertWithWhereUniqueWithoutFeiCurrentUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeiUpdateWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiCurrentUserInputSchema) ]),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentUserInputSchema) ]),
}).strict();

export const FeiUpdateWithWhereUniqueWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.FeiUpdateWithWhereUniqueWithoutFeiCurrentUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateWithoutFeiCurrentUserInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiCurrentUserInputSchema) ]),
}).strict();

export const FeiUpdateManyWithWhereWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.FeiUpdateManyWithWhereWithoutFeiCurrentUserInput> = z.object({
  where: z.lazy(() => FeiScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateManyMutationInputSchema),z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserInputSchema) ]),
}).strict();

export const FeiUpsertWithWhereUniqueWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.FeiUpsertWithWhereUniqueWithoutFeiPremierDetenteurUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeiUpdateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiPremierDetenteurUserInputSchema) ]),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema) ]),
}).strict();

export const FeiUpdateWithWhereUniqueWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.FeiUpdateWithWhereUniqueWithoutFeiPremierDetenteurUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiPremierDetenteurUserInputSchema) ]),
}).strict();

export const FeiUpdateManyWithWhereWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.FeiUpdateManyWithWhereWithoutFeiPremierDetenteurUserInput> = z.object({
  where: z.lazy(() => FeiScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateManyMutationInputSchema),z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserInputSchema) ]),
}).strict();

export const FeiUpsertWithWhereUniqueWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.FeiUpsertWithWhereUniqueWithoutFeiExaminateurInitialUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeiUpdateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiExaminateurInitialUserInputSchema) ]),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema) ]),
}).strict();

export const FeiUpdateWithWhereUniqueWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.FeiUpdateWithWhereUniqueWithoutFeiExaminateurInitialUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiExaminateurInitialUserInputSchema) ]),
}).strict();

export const FeiUpdateManyWithWhereWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.FeiUpdateManyWithWhereWithoutFeiExaminateurInitialUserInput> = z.object({
  where: z.lazy(() => FeiScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateManyMutationInputSchema),z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserInputSchema) ]),
}).strict();

export const FeiUpsertWithWhereUniqueWithoutFeiSviUserInputSchema: z.ZodType<Prisma.FeiUpsertWithWhereUniqueWithoutFeiSviUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeiUpdateWithoutFeiSviUserInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiSviUserInputSchema) ]),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiSviUserInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiSviUserInputSchema) ]),
}).strict();

export const FeiUpdateWithWhereUniqueWithoutFeiSviUserInputSchema: z.ZodType<Prisma.FeiUpdateWithWhereUniqueWithoutFeiSviUserInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateWithoutFeiSviUserInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiSviUserInputSchema) ]),
}).strict();

export const FeiUpdateManyWithWhereWithoutFeiSviUserInputSchema: z.ZodType<Prisma.FeiUpdateManyWithWhereWithoutFeiSviUserInput> = z.object({
  where: z.lazy(() => FeiScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateManyMutationInputSchema),z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserInputSchema) ]),
}).strict();

export const FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediaireUserInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutFeiIntermediaireUserInputSchema) ]),
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireUserInputSchema) ]),
}).strict();

export const FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediaireUserInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeiIntermediaireUpdateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutFeiIntermediaireUserInputSchema) ]),
}).strict();

export const FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediaireUserInput> = z.object({
  where: z.lazy(() => FeiIntermediaireScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeiIntermediaireUpdateManyMutationInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserInputSchema) ]),
}).strict();

export const FeiIntermediaireScalarWhereInputSchema: z.ZodType<Prisma.FeiIntermediaireScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FeiIntermediaireScalarWhereInputSchema),z.lazy(() => FeiIntermediaireScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeiIntermediaireScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeiIntermediaireScalarWhereInputSchema),z.lazy(() => FeiIntermediaireScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => EnumUserRolesNullableFilterSchema),z.lazy(() => UserRolesSchema) ]).optional().nullable(),
  commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  received_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  check_finished_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  handover_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const LogsUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.LogsUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => LogsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LogsUpdateWithoutUserInputSchema),z.lazy(() => LogsUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => LogsCreateWithoutUserInputSchema),z.lazy(() => LogsUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const LogsUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.LogsUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => LogsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LogsUpdateWithoutUserInputSchema),z.lazy(() => LogsUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const LogsUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.LogsUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => LogsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LogsUpdateManyMutationInputSchema),z.lazy(() => LogsUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const LogsScalarWhereInputSchema: z.ZodType<Prisma.LogsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LogsScalarWhereInputSchema),z.lazy(() => LogsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LogsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LogsScalarWhereInputSchema),z.lazy(() => LogsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const NotificationLogUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.NotificationLogUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => NotificationLogWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => NotificationLogUpdateWithoutUserInputSchema),z.lazy(() => NotificationLogUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => NotificationLogCreateWithoutUserInputSchema),z.lazy(() => NotificationLogUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const NotificationLogUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.NotificationLogUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => NotificationLogWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => NotificationLogUpdateWithoutUserInputSchema),z.lazy(() => NotificationLogUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const NotificationLogUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.NotificationLogUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => NotificationLogScalarWhereInputSchema),
  data: z.union([ z.lazy(() => NotificationLogUpdateManyMutationInputSchema),z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const NotificationLogScalarWhereInputSchema: z.ZodType<Prisma.NotificationLogScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => NotificationLogScalarWhereInputSchema),z.lazy(() => NotificationLogScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => NotificationLogScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => NotificationLogScalarWhereInputSchema),z.lazy(() => NotificationLogScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumUserNotificationsFilterSchema),z.lazy(() => UserNotificationsSchema) ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  web_push_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  payload: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireUserInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireUserInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireUserInputSchema) ]),
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireUserInputSchema) ]),
}).strict();

export const CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireUserInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireUserInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireUserInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireUserInputSchema) ]),
}).strict();

export const CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireUserInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireUserInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyMutationInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserInputSchema) ]),
}).strict();

export const CarcasseIntermediaireScalarWhereInputSchema: z.ZodType<Prisma.CarcasseIntermediaireScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema).array() ]).optional(),
  fei_numero__bracelet__intermediaire_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  numero_bracelet: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  prise_en_charge: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  refus: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const InterventionOnFeiUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.InterventionOnFeiUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InterventionOnFeiUpdateWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const InterventionOnFeiUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InterventionOnFeiUpdateWithoutUserInputSchema),z.lazy(() => InterventionOnFeiUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const InterventionOnFeiUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => InterventionOnFeiScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InterventionOnFeiUpdateManyMutationInputSchema),z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const InterventionOnFeiScalarWhereInputSchema: z.ZodType<Prisma.InterventionOnFeiScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => InterventionOnFeiScalarWhereInputSchema),z.lazy(() => InterventionOnFeiScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => InterventionOnFeiScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => InterventionOnFeiScalarWhereInputSchema),z.lazy(() => InterventionOnFeiScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  entity_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => EnumUserRolesFilterSchema),z.lazy(() => UserRolesSchema) ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const EntityRelationsCreateWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityRelationsCreateWithoutEntityRelatedWithUserInput> = z.object({
  id: z.string().optional(),
  relation: z.lazy(() => EntityRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  UserRelatedWithEntity: z.lazy(() => UserCreateNestedOneWithoutEntitiesRelationsInputSchema)
}).strict();

export const EntityRelationsUncheckedCreateWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityRelationsUncheckedCreateWithoutEntityRelatedWithUserInput> = z.object({
  id: z.string().optional(),
  owner_id: z.string(),
  relation: z.lazy(() => EntityRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const EntityRelationsCreateOrConnectWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityRelationsCreateOrConnectWithoutEntityRelatedWithUserInput> = z.object({
  where: z.lazy(() => EntityRelationsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EntityRelationsCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUncheckedCreateWithoutEntityRelatedWithUserInputSchema) ]),
}).strict();

export const EntityRelationsCreateManyEntityRelatedWithUserInputEnvelopeSchema: z.ZodType<Prisma.EntityRelationsCreateManyEntityRelatedWithUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EntityRelationsCreateManyEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsCreateManyEntityRelatedWithUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeiCreateWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.FeiCreateWithoutFeiCurrentEntityInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserCreateNestedOneWithoutFeiCreatedByUserInputSchema),
  FeiPremierDetenteurUser: z.lazy(() => UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiSviEntityInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserCreateNestedOneWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserCreateNestedOneWithoutFeiCurrentUserInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiNextEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.FeiUncheckedCreateWithoutFeiCurrentEntityInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiCreateOrConnectWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.FeiCreateOrConnectWithoutFeiCurrentEntityInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentEntityInputSchema) ]),
}).strict();

export const FeiCreateManyFeiCurrentEntityInputEnvelopeSchema: z.ZodType<Prisma.FeiCreateManyFeiCurrentEntityInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FeiCreateManyFeiCurrentEntityInputSchema),z.lazy(() => FeiCreateManyFeiCurrentEntityInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeiCreateWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.FeiCreateWithoutFeiNextEntityInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserCreateNestedOneWithoutFeiCreatedByUserInputSchema),
  FeiPremierDetenteurUser: z.lazy(() => UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiSviEntityInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserCreateNestedOneWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserCreateNestedOneWithoutFeiCurrentUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.FeiUncheckedCreateWithoutFeiNextEntityInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiCreateOrConnectWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.FeiCreateOrConnectWithoutFeiNextEntityInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiNextEntityInputSchema) ]),
}).strict();

export const FeiCreateManyFeiNextEntityInputEnvelopeSchema: z.ZodType<Prisma.FeiCreateManyFeiNextEntityInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FeiCreateManyFeiNextEntityInputSchema),z.lazy(() => FeiCreateManyFeiNextEntityInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeiCreateWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.FeiCreateWithoutFeiDepotEntityInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserCreateNestedOneWithoutFeiCreatedByUserInputSchema),
  FeiPremierDetenteurUser: z.lazy(() => UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiSviEntityInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserCreateNestedOneWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserCreateNestedOneWithoutFeiCurrentUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiNextEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.FeiUncheckedCreateWithoutFeiDepotEntityInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiCreateOrConnectWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.FeiCreateOrConnectWithoutFeiDepotEntityInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiDepotEntityInputSchema) ]),
}).strict();

export const FeiCreateManyFeiDepotEntityInputEnvelopeSchema: z.ZodType<Prisma.FeiCreateManyFeiDepotEntityInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FeiCreateManyFeiDepotEntityInputSchema),z.lazy(() => FeiCreateManyFeiDepotEntityInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeiCreateWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.FeiCreateWithoutFeiSviEntityInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserCreateNestedOneWithoutFeiCreatedByUserInputSchema),
  FeiPremierDetenteurUser: z.lazy(() => UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserCreateNestedOneWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserCreateNestedOneWithoutFeiCurrentUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiNextEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.FeiUncheckedCreateWithoutFeiSviEntityInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiCreateOrConnectWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.FeiCreateOrConnectWithoutFeiSviEntityInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiSviEntityInputSchema) ]),
}).strict();

export const FeiCreateManyFeiSviEntityInputEnvelopeSchema: z.ZodType<Prisma.FeiCreateManyFeiSviEntityInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FeiCreateManyFeiSviEntityInputSchema),z.lazy(() => FeiCreateManyFeiSviEntityInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeiIntermediaireCreateWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateWithoutFeiIntermediaireEntityInput> = z.object({
  id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Fei: z.lazy(() => FeiCreateNestedOneWithoutFeiIntermediairesInputSchema),
  FeiIntermediaireUser: z.lazy(() => UserCreateNestedOneWithoutFeiIntermediaireUserInputSchema),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireEntityInput> = z.object({
  id: z.string(),
  fei_numero: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).optional()
}).strict();

export const FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireEntityInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireEntityInputSchema) ]),
}).strict();

export const FeiIntermediaireCreateManyFeiIntermediaireEntityInputEnvelopeSchema: z.ZodType<Prisma.FeiIntermediaireCreateManyFeiIntermediaireEntityInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FeiIntermediaireCreateManyFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireCreateManyFeiIntermediaireEntityInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CarcasseIntermediaireCreateWithoutCarcasseIntermediaireEntityInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateWithoutCarcasseIntermediaireEntityInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  CarcasseIntermediaireFei: z.lazy(() => FeiCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseCarcasseIntermediaire: z.lazy(() => CarcasseCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireUser: z.lazy(() => UserCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireFeiIntermediaire: z.lazy(() => FeiIntermediaireCreateNestedOneWithoutCarcasseIntermediaireInputSchema)
}).strict();

export const CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireEntityInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireEntityInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  fei_numero: z.string(),
  numero_bracelet: z.string(),
  fei_intermediaire_id: z.string(),
  fei_intermediaire_user_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireEntityInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireEntityInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireEntityInputSchema) ]),
}).strict();

export const CarcasseIntermediaireCreateManyCarcasseIntermediaireEntityInputEnvelopeSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateManyCarcasseIntermediaireEntityInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireEntityInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EntityCreateWithoutCoupledEntity_oppositeInputSchema: z.ZodType<Prisma.EntityCreateWithoutCoupledEntity_oppositeInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntity_oppositeInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityUncheckedCreateWithoutCoupledEntity_oppositeInputSchema: z.ZodType<Prisma.EntityUncheckedCreateWithoutCoupledEntity_oppositeInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  coupled_entity_id: z.string().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityCreateOrConnectWithoutCoupledEntity_oppositeInputSchema: z.ZodType<Prisma.EntityCreateOrConnectWithoutCoupledEntity_oppositeInput> = z.object({
  where: z.lazy(() => EntityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EntityCreateWithoutCoupledEntity_oppositeInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCoupledEntity_oppositeInputSchema) ]),
}).strict();

export const EntityCreateWithoutCoupledEntityInputSchema: z.ZodType<Prisma.EntityCreateWithoutCoupledEntityInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityUncheckedCreateWithoutCoupledEntityInputSchema: z.ZodType<Prisma.EntityUncheckedCreateWithoutCoupledEntityInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityCreateOrConnectWithoutCoupledEntityInputSchema: z.ZodType<Prisma.EntityCreateOrConnectWithoutCoupledEntityInput> = z.object({
  where: z.lazy(() => EntityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EntityCreateWithoutCoupledEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCoupledEntityInputSchema) ]),
}).strict();

export const InterventionOnFeiCreateWithoutEntityInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateWithoutEntityInput> = z.object({
  id: z.string().optional(),
  role: z.lazy(() => UserRolesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Fei: z.lazy(() => FeiCreateNestedOneWithoutInterventionOnFeiInputSchema),
  User: z.lazy(() => UserCreateNestedOneWithoutInterventionOnFeiInputSchema)
}).strict();

export const InterventionOnFeiUncheckedCreateWithoutEntityInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedCreateWithoutEntityInput> = z.object({
  id: z.string().optional(),
  fei_numero: z.string(),
  user_id: z.string(),
  role: z.lazy(() => UserRolesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const InterventionOnFeiCreateOrConnectWithoutEntityInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateOrConnectWithoutEntityInput> = z.object({
  where: z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutEntityInputSchema) ]),
}).strict();

export const InterventionOnFeiCreateManyEntityInputEnvelopeSchema: z.ZodType<Prisma.InterventionOnFeiCreateManyEntityInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InterventionOnFeiCreateManyEntityInputSchema),z.lazy(() => InterventionOnFeiCreateManyEntityInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EntityRelationsUpsertWithWhereUniqueWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityRelationsUpsertWithWhereUniqueWithoutEntityRelatedWithUserInput> = z.object({
  where: z.lazy(() => EntityRelationsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EntityRelationsUpdateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUncheckedUpdateWithoutEntityRelatedWithUserInputSchema) ]),
  create: z.union([ z.lazy(() => EntityRelationsCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUncheckedCreateWithoutEntityRelatedWithUserInputSchema) ]),
}).strict();

export const EntityRelationsUpdateWithWhereUniqueWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityRelationsUpdateWithWhereUniqueWithoutEntityRelatedWithUserInput> = z.object({
  where: z.lazy(() => EntityRelationsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EntityRelationsUpdateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityRelationsUncheckedUpdateWithoutEntityRelatedWithUserInputSchema) ]),
}).strict();

export const EntityRelationsUpdateManyWithWhereWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityRelationsUpdateManyWithWhereWithoutEntityRelatedWithUserInput> = z.object({
  where: z.lazy(() => EntityRelationsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EntityRelationsUpdateManyMutationInputSchema),z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserInputSchema) ]),
}).strict();

export const FeiUpsertWithWhereUniqueWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.FeiUpsertWithWhereUniqueWithoutFeiCurrentEntityInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeiUpdateWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiCurrentEntityInputSchema) ]),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiCurrentEntityInputSchema) ]),
}).strict();

export const FeiUpdateWithWhereUniqueWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.FeiUpdateWithWhereUniqueWithoutFeiCurrentEntityInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateWithoutFeiCurrentEntityInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiCurrentEntityInputSchema) ]),
}).strict();

export const FeiUpdateManyWithWhereWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.FeiUpdateManyWithWhereWithoutFeiCurrentEntityInput> = z.object({
  where: z.lazy(() => FeiScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateManyMutationInputSchema),z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentEntityInputSchema) ]),
}).strict();

export const FeiUpsertWithWhereUniqueWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.FeiUpsertWithWhereUniqueWithoutFeiNextEntityInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeiUpdateWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiNextEntityInputSchema) ]),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiNextEntityInputSchema) ]),
}).strict();

export const FeiUpdateWithWhereUniqueWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.FeiUpdateWithWhereUniqueWithoutFeiNextEntityInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateWithoutFeiNextEntityInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiNextEntityInputSchema) ]),
}).strict();

export const FeiUpdateManyWithWhereWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.FeiUpdateManyWithWhereWithoutFeiNextEntityInput> = z.object({
  where: z.lazy(() => FeiScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateManyMutationInputSchema),z.lazy(() => FeiUncheckedUpdateManyWithoutFeiNextEntityInputSchema) ]),
}).strict();

export const FeiUpsertWithWhereUniqueWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.FeiUpsertWithWhereUniqueWithoutFeiDepotEntityInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeiUpdateWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiDepotEntityInputSchema) ]),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiDepotEntityInputSchema) ]),
}).strict();

export const FeiUpdateWithWhereUniqueWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.FeiUpdateWithWhereUniqueWithoutFeiDepotEntityInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateWithoutFeiDepotEntityInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiDepotEntityInputSchema) ]),
}).strict();

export const FeiUpdateManyWithWhereWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.FeiUpdateManyWithWhereWithoutFeiDepotEntityInput> = z.object({
  where: z.lazy(() => FeiScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateManyMutationInputSchema),z.lazy(() => FeiUncheckedUpdateManyWithoutFeiDepotEntityInputSchema) ]),
}).strict();

export const FeiUpsertWithWhereUniqueWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.FeiUpsertWithWhereUniqueWithoutFeiSviEntityInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeiUpdateWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiSviEntityInputSchema) ]),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiSviEntityInputSchema) ]),
}).strict();

export const FeiUpdateWithWhereUniqueWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.FeiUpdateWithWhereUniqueWithoutFeiSviEntityInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateWithoutFeiSviEntityInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiSviEntityInputSchema) ]),
}).strict();

export const FeiUpdateManyWithWhereWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.FeiUpdateManyWithWhereWithoutFeiSviEntityInput> = z.object({
  where: z.lazy(() => FeiScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeiUpdateManyMutationInputSchema),z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviEntityInputSchema) ]),
}).strict();

export const FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediaireEntityInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutFeiIntermediaireEntityInputSchema) ]),
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireEntityInputSchema) ]),
}).strict();

export const FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediaireEntityInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeiIntermediaireUpdateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutFeiIntermediaireEntityInputSchema) ]),
}).strict();

export const FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediaireEntityInput> = z.object({
  where: z.lazy(() => FeiIntermediaireScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeiIntermediaireUpdateManyMutationInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityInputSchema) ]),
}).strict();

export const CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireEntityInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireEntityInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireEntityInputSchema) ]),
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireEntityInputSchema) ]),
}).strict();

export const CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireEntityInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireEntityInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireEntityInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireEntityInputSchema) ]),
}).strict();

export const CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireEntityInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireEntityInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyMutationInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityInputSchema) ]),
}).strict();

export const EntityUpsertWithoutCoupledEntity_oppositeInputSchema: z.ZodType<Prisma.EntityUpsertWithoutCoupledEntity_oppositeInput> = z.object({
  update: z.union([ z.lazy(() => EntityUpdateWithoutCoupledEntity_oppositeInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutCoupledEntity_oppositeInputSchema) ]),
  create: z.union([ z.lazy(() => EntityCreateWithoutCoupledEntity_oppositeInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCoupledEntity_oppositeInputSchema) ]),
  where: z.lazy(() => EntityWhereInputSchema).optional()
}).strict();

export const EntityUpdateToOneWithWhereWithoutCoupledEntity_oppositeInputSchema: z.ZodType<Prisma.EntityUpdateToOneWithWhereWithoutCoupledEntity_oppositeInput> = z.object({
  where: z.lazy(() => EntityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EntityUpdateWithoutCoupledEntity_oppositeInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutCoupledEntity_oppositeInputSchema) ]),
}).strict();

export const EntityUpdateWithoutCoupledEntity_oppositeInputSchema: z.ZodType<Prisma.EntityUpdateWithoutCoupledEntity_oppositeInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityUpdateOneWithoutCoupledEntity_oppositeNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityUncheckedUpdateWithoutCoupledEntity_oppositeInputSchema: z.ZodType<Prisma.EntityUncheckedUpdateWithoutCoupledEntity_oppositeInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  coupled_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityUpsertWithoutCoupledEntityInputSchema: z.ZodType<Prisma.EntityUpsertWithoutCoupledEntityInput> = z.object({
  update: z.union([ z.lazy(() => EntityUpdateWithoutCoupledEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutCoupledEntityInputSchema) ]),
  create: z.union([ z.lazy(() => EntityCreateWithoutCoupledEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCoupledEntityInputSchema) ]),
  where: z.lazy(() => EntityWhereInputSchema).optional()
}).strict();

export const EntityUpdateToOneWithWhereWithoutCoupledEntityInputSchema: z.ZodType<Prisma.EntityUpdateToOneWithWhereWithoutCoupledEntityInput> = z.object({
  where: z.lazy(() => EntityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EntityUpdateWithoutCoupledEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutCoupledEntityInputSchema) ]),
}).strict();

export const EntityUpdateWithoutCoupledEntityInputSchema: z.ZodType<Prisma.EntityUpdateWithoutCoupledEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityUncheckedUpdateWithoutCoupledEntityInputSchema: z.ZodType<Prisma.EntityUncheckedUpdateWithoutCoupledEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const InterventionOnFeiUpsertWithWhereUniqueWithoutEntityInputSchema: z.ZodType<Prisma.InterventionOnFeiUpsertWithWhereUniqueWithoutEntityInput> = z.object({
  where: z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InterventionOnFeiUpdateWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUncheckedUpdateWithoutEntityInputSchema) ]),
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutEntityInputSchema) ]),
}).strict();

export const InterventionOnFeiUpdateWithWhereUniqueWithoutEntityInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateWithWhereUniqueWithoutEntityInput> = z.object({
  where: z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InterventionOnFeiUpdateWithoutEntityInputSchema),z.lazy(() => InterventionOnFeiUncheckedUpdateWithoutEntityInputSchema) ]),
}).strict();

export const InterventionOnFeiUpdateManyWithWhereWithoutEntityInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateManyWithWhereWithoutEntityInput> = z.object({
  where: z.lazy(() => InterventionOnFeiScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InterventionOnFeiUpdateManyMutationInputSchema),z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutEntityInputSchema) ]),
}).strict();

export const UserCreateWithoutPasswordInputSchema: z.ZodType<Prisma.UserCreateWithoutPasswordInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutPasswordInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutPasswordInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutPasswordInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutPasswordInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutPasswordInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasswordInputSchema) ]),
}).strict();

export const UserUpsertWithoutPasswordInputSchema: z.ZodType<Prisma.UserUpsertWithoutPasswordInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutPasswordInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasswordInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutPasswordInputSchema),z.lazy(() => UserUncheckedCreateWithoutPasswordInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutPasswordInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutPasswordInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutPasswordInputSchema),z.lazy(() => UserUncheckedUpdateWithoutPasswordInputSchema) ]),
}).strict();

export const UserUpdateWithoutPasswordInputSchema: z.ZodType<Prisma.UserUpdateWithoutPasswordInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutPasswordInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutPasswordInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutUserRelationsAsOwnerInputSchema: z.ZodType<Prisma.UserCreateWithoutUserRelationsAsOwnerInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUserRelationsAsOwnerInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUserRelationsAsOwnerInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUserRelationsAsOwnerInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUserRelationsAsOwnerInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUserRelationsAsOwnerInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserRelationsAsOwnerInputSchema) ]),
}).strict();

export const UserCreateWithoutUserRelationsAsRelatedInputSchema: z.ZodType<Prisma.UserCreateWithoutUserRelationsAsRelatedInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutUserRelationsAsRelatedInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutUserRelationsAsRelatedInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutUserRelationsAsRelatedInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutUserRelationsAsRelatedInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutUserRelationsAsRelatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserRelationsAsRelatedInputSchema) ]),
}).strict();

export const UserUpsertWithoutUserRelationsAsOwnerInputSchema: z.ZodType<Prisma.UserUpsertWithoutUserRelationsAsOwnerInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUserRelationsAsOwnerInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserRelationsAsOwnerInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUserRelationsAsOwnerInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserRelationsAsOwnerInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUserRelationsAsOwnerInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUserRelationsAsOwnerInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUserRelationsAsOwnerInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserRelationsAsOwnerInputSchema) ]),
}).strict();

export const UserUpdateWithoutUserRelationsAsOwnerInputSchema: z.ZodType<Prisma.UserUpdateWithoutUserRelationsAsOwnerInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUserRelationsAsOwnerInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUserRelationsAsOwnerInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutUserRelationsAsRelatedInputSchema: z.ZodType<Prisma.UserUpsertWithoutUserRelationsAsRelatedInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutUserRelationsAsRelatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserRelationsAsRelatedInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutUserRelationsAsRelatedInputSchema),z.lazy(() => UserUncheckedCreateWithoutUserRelationsAsRelatedInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutUserRelationsAsRelatedInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutUserRelationsAsRelatedInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutUserRelationsAsRelatedInputSchema),z.lazy(() => UserUncheckedUpdateWithoutUserRelationsAsRelatedInputSchema) ]),
}).strict();

export const UserUpdateWithoutUserRelationsAsRelatedInputSchema: z.ZodType<Prisma.UserUpdateWithoutUserRelationsAsRelatedInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutUserRelationsAsRelatedInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutUserRelationsAsRelatedInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutEntitiesRelationsInputSchema: z.ZodType<Prisma.UserCreateWithoutEntitiesRelationsInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutEntitiesRelationsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutEntitiesRelationsInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutEntitiesRelationsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutEntitiesRelationsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutEntitiesRelationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEntitiesRelationsInputSchema) ]),
}).strict();

export const EntityCreateWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityCreateWithoutEntityRelatedWithUserInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  prefilled: z.boolean().optional(),
  FeiCurrentEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntity_oppositeInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityUncheckedCreateWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityUncheckedCreateWithoutEntityRelatedWithUserInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  coupled_entity_id: z.string().optional().nullable(),
  prefilled: z.boolean().optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityCreateOrConnectWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityCreateOrConnectWithoutEntityRelatedWithUserInput> = z.object({
  where: z.lazy(() => EntityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EntityCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityUncheckedCreateWithoutEntityRelatedWithUserInputSchema) ]),
}).strict();

export const UserUpsertWithoutEntitiesRelationsInputSchema: z.ZodType<Prisma.UserUpsertWithoutEntitiesRelationsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutEntitiesRelationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEntitiesRelationsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutEntitiesRelationsInputSchema),z.lazy(() => UserUncheckedCreateWithoutEntitiesRelationsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutEntitiesRelationsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutEntitiesRelationsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutEntitiesRelationsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutEntitiesRelationsInputSchema) ]),
}).strict();

export const UserUpdateWithoutEntitiesRelationsInputSchema: z.ZodType<Prisma.UserUpdateWithoutEntitiesRelationsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutEntitiesRelationsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutEntitiesRelationsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const EntityUpsertWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityUpsertWithoutEntityRelatedWithUserInput> = z.object({
  update: z.union([ z.lazy(() => EntityUpdateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutEntityRelatedWithUserInputSchema) ]),
  create: z.union([ z.lazy(() => EntityCreateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityUncheckedCreateWithoutEntityRelatedWithUserInputSchema) ]),
  where: z.lazy(() => EntityWhereInputSchema).optional()
}).strict();

export const EntityUpdateToOneWithWhereWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityUpdateToOneWithWhereWithoutEntityRelatedWithUserInput> = z.object({
  where: z.lazy(() => EntityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EntityUpdateWithoutEntityRelatedWithUserInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutEntityRelatedWithUserInputSchema) ]),
}).strict();

export const EntityUpdateWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityUpdateWithoutEntityRelatedWithUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityUpdateOneWithoutCoupledEntity_oppositeNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityUncheckedUpdateWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityUncheckedUpdateWithoutEntityRelatedWithUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  coupled_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutLogsInputSchema: z.ZodType<Prisma.UserCreateWithoutLogsInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutLogsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutLogsInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutLogsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutLogsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutLogsInputSchema) ]),
}).strict();

export const UserUpsertWithoutLogsInputSchema: z.ZodType<Prisma.UserUpsertWithoutLogsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLogsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutLogsInputSchema),z.lazy(() => UserUncheckedCreateWithoutLogsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutLogsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutLogsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutLogsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutLogsInputSchema) ]),
}).strict();

export const UserUpdateWithoutLogsInputSchema: z.ZodType<Prisma.UserUpdateWithoutLogsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutLogsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutLogsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const CarcasseCreateWithoutFeiInputSchema: z.ZodType<Prisma.CarcasseCreateWithoutFeiInput> = z.object({
  numero_bracelet: z.string(),
  heure_mise_a_mort: z.string().optional().nullable(),
  heure_evisceration: z.string().optional().nullable(),
  espece: z.string().optional().nullable(),
  categorie: z.string().optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.string().optional().nullable(),
  examinateur_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_refus_motif: z.string().optional().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_commentaire: z.string().optional().nullable(),
  svi_carcasse_saisie: z.boolean().optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseCreatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.coerce.date().optional().nullable(),
  svi_carcasse_signed_at: z.coerce.date().optional().nullable(),
  svi_carcasse_commentaire: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediairesCarcassesInputSchema).optional(),
  FeiIntermediaireCarcasseRefus: z.lazy(() => FeiIntermediaireCreateNestedOneWithoutFeiIntermediaireCarcassesRefusInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseCarcasseIntermediaireInputSchema).optional()
}).strict();

export const CarcasseUncheckedCreateWithoutFeiInputSchema: z.ZodType<Prisma.CarcasseUncheckedCreateWithoutFeiInput> = z.object({
  numero_bracelet: z.string(),
  heure_mise_a_mort: z.string().optional().nullable(),
  heure_evisceration: z.string().optional().nullable(),
  espece: z.string().optional().nullable(),
  categorie: z.string().optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.string().optional().nullable(),
  examinateur_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.string().optional().nullable(),
  intermediaire_carcasse_refus_motif: z.string().optional().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_commentaire: z.string().optional().nullable(),
  svi_carcasse_saisie: z.boolean().optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseCreatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.coerce.date().optional().nullable(),
  svi_carcasse_signed_at: z.coerce.date().optional().nullable(),
  svi_carcasse_commentaire: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediairesCarcassesInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseCarcasseIntermediaireInputSchema).optional()
}).strict();

export const CarcasseCreateOrConnectWithoutFeiInputSchema: z.ZodType<Prisma.CarcasseCreateOrConnectWithoutFeiInput> = z.object({
  where: z.lazy(() => CarcasseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiInputSchema) ]),
}).strict();

export const CarcasseCreateManyFeiInputEnvelopeSchema: z.ZodType<Prisma.CarcasseCreateManyFeiInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CarcasseCreateManyFeiInputSchema),z.lazy(() => CarcasseCreateManyFeiInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.UserCreateWithoutFeiCreatedByUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFeiCreatedByUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFeiCreatedByUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiCreatedByUserInputSchema) ]),
}).strict();

export const UserCreateWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.UserCreateWithoutFeiPremierDetenteurUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFeiPremierDetenteurUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFeiPremierDetenteurUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema) ]),
}).strict();

export const UserCreateWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.UserCreateWithoutFeiExaminateurInitialUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFeiExaminateurInitialUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFeiExaminateurInitialUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema) ]),
}).strict();

export const EntityCreateWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.EntityCreateWithoutFeiDepotEntityInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntity_oppositeInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityUncheckedCreateWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.EntityUncheckedCreateWithoutFeiDepotEntityInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  coupled_entity_id: z.string().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityCreateOrConnectWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.EntityCreateOrConnectWithoutFeiDepotEntityInput> = z.object({
  where: z.lazy(() => EntityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiDepotEntityInputSchema) ]),
}).strict();

export const EntityCreateWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.EntityCreateWithoutFeiSviEntityInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntity_oppositeInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityUncheckedCreateWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.EntityUncheckedCreateWithoutFeiSviEntityInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  coupled_entity_id: z.string().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityCreateOrConnectWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.EntityCreateOrConnectWithoutFeiSviEntityInput> = z.object({
  where: z.lazy(() => EntityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiSviEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiSviEntityInputSchema) ]),
}).strict();

export const UserCreateWithoutFeiSviUserInputSchema: z.ZodType<Prisma.UserCreateWithoutFeiSviUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFeiSviUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFeiSviUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFeiSviUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFeiSviUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFeiSviUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiSviUserInputSchema) ]),
}).strict();

export const FeiIntermediaireCreateWithoutFeiInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateWithoutFeiInput> = z.object({
  id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediaireUser: z.lazy(() => UserCreateNestedOneWithoutFeiIntermediaireUserInputSchema),
  FeiIntermediaireEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiIntermediaireEntityInputSchema),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedCreateWithoutFeiInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedCreateWithoutFeiInput> = z.object({
  id: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).optional()
}).strict();

export const FeiIntermediaireCreateOrConnectWithoutFeiInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateOrConnectWithoutFeiInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiInputSchema) ]),
}).strict();

export const FeiIntermediaireCreateManyFeiInputEnvelopeSchema: z.ZodType<Prisma.FeiIntermediaireCreateManyFeiInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => FeiIntermediaireCreateManyFeiInputSchema),z.lazy(() => FeiIntermediaireCreateManyFeiInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UserCreateWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.UserCreateWithoutFeiCurrentUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFeiCurrentUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFeiCurrentUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiCurrentUserInputSchema) ]),
}).strict();

export const EntityCreateWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.EntityCreateWithoutFeiCurrentEntityInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntity_oppositeInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityUncheckedCreateWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.EntityUncheckedCreateWithoutFeiCurrentEntityInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  coupled_entity_id: z.string().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityCreateOrConnectWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.EntityCreateOrConnectWithoutFeiCurrentEntityInput> = z.object({
  where: z.lazy(() => EntityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiCurrentEntityInputSchema) ]),
}).strict();

export const EntityCreateWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.EntityCreateWithoutFeiNextEntityInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntity_oppositeInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityUncheckedCreateWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.EntityUncheckedCreateWithoutFeiNextEntityInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  coupled_entity_id: z.string().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityCreateOrConnectWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.EntityCreateOrConnectWithoutFeiNextEntityInput> = z.object({
  where: z.lazy(() => EntityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiNextEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiNextEntityInputSchema) ]),
}).strict();

export const CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  CarcasseCarcasseIntermediaire: z.lazy(() => CarcasseCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireUser: z.lazy(() => UserCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireEntity: z.lazy(() => EntityCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireFeiIntermediaire: z.lazy(() => FeiIntermediaireCreateNestedOneWithoutCarcasseIntermediaireInputSchema)
}).strict();

export const CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  numero_bracelet: z.string(),
  fei_intermediaire_id: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiInputSchema) ]),
}).strict();

export const CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiInputEnvelopeSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const InterventionOnFeiCreateWithoutFeiInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateWithoutFeiInput> = z.object({
  id: z.string().optional(),
  role: z.lazy(() => UserRolesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  User: z.lazy(() => UserCreateNestedOneWithoutInterventionOnFeiInputSchema),
  Entity: z.lazy(() => EntityCreateNestedOneWithoutInterventionOnFeiInputSchema)
}).strict();

export const InterventionOnFeiUncheckedCreateWithoutFeiInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedCreateWithoutFeiInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  entity_id: z.string(),
  role: z.lazy(() => UserRolesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const InterventionOnFeiCreateOrConnectWithoutFeiInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateOrConnectWithoutFeiInput> = z.object({
  where: z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutFeiInputSchema) ]),
}).strict();

export const InterventionOnFeiCreateManyFeiInputEnvelopeSchema: z.ZodType<Prisma.InterventionOnFeiCreateManyFeiInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => InterventionOnFeiCreateManyFeiInputSchema),z.lazy(() => InterventionOnFeiCreateManyFeiInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CarcasseUpsertWithWhereUniqueWithoutFeiInputSchema: z.ZodType<Prisma.CarcasseUpsertWithWhereUniqueWithoutFeiInput> = z.object({
  where: z.lazy(() => CarcasseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CarcasseUpdateWithoutFeiInputSchema),z.lazy(() => CarcasseUncheckedUpdateWithoutFeiInputSchema) ]),
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiInputSchema) ]),
}).strict();

export const CarcasseUpdateWithWhereUniqueWithoutFeiInputSchema: z.ZodType<Prisma.CarcasseUpdateWithWhereUniqueWithoutFeiInput> = z.object({
  where: z.lazy(() => CarcasseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CarcasseUpdateWithoutFeiInputSchema),z.lazy(() => CarcasseUncheckedUpdateWithoutFeiInputSchema) ]),
}).strict();

export const CarcasseUpdateManyWithWhereWithoutFeiInputSchema: z.ZodType<Prisma.CarcasseUpdateManyWithWhereWithoutFeiInput> = z.object({
  where: z.lazy(() => CarcasseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CarcasseUpdateManyMutationInputSchema),z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiInputSchema) ]),
}).strict();

export const CarcasseScalarWhereInputSchema: z.ZodType<Prisma.CarcasseScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => CarcasseScalarWhereInputSchema),z.lazy(() => CarcasseScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => CarcasseScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => CarcasseScalarWhereInputSchema),z.lazy(() => CarcasseScalarWhereInputSchema).array() ]).optional(),
  numero_bracelet: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  fei_numero: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  heure_mise_a_mort: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  heure_evisceration: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  espece: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  categorie: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.lazy(() => StringNullableListFilterSchema).optional(),
  examinateur_anomalies_abats: z.lazy(() => StringNullableListFilterSchema).optional(),
  examinateur_commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.lazy(() => StringNullableListFilterSchema).optional(),
  svi_carcasse_saisie_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const UserUpsertWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutFeiCreatedByUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFeiCreatedByUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiCreatedByUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFeiCreatedByUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiCreatedByUserInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutFeiCreatedByUserInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutFeiCreatedByUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiCreatedByUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutFeiCreatedByUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFeiCreatedByUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutFeiPremierDetenteurUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiPremierDetenteurUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiPremierDetenteurUserInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutFeiPremierDetenteurUserInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutFeiPremierDetenteurUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiPremierDetenteurUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutFeiPremierDetenteurUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFeiPremierDetenteurUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutFeiExaminateurInitialUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiExaminateurInitialUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiExaminateurInitialUserInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutFeiExaminateurInitialUserInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutFeiExaminateurInitialUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiExaminateurInitialUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutFeiExaminateurInitialUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFeiExaminateurInitialUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const EntityUpsertWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.EntityUpsertWithoutFeiDepotEntityInput> = z.object({
  update: z.union([ z.lazy(() => EntityUpdateWithoutFeiDepotEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiDepotEntityInputSchema) ]),
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiDepotEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiDepotEntityInputSchema) ]),
  where: z.lazy(() => EntityWhereInputSchema).optional()
}).strict();

export const EntityUpdateToOneWithWhereWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.EntityUpdateToOneWithWhereWithoutFeiDepotEntityInput> = z.object({
  where: z.lazy(() => EntityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EntityUpdateWithoutFeiDepotEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiDepotEntityInputSchema) ]),
}).strict();

export const EntityUpdateWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.EntityUpdateWithoutFeiDepotEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityUpdateOneWithoutCoupledEntity_oppositeNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityUncheckedUpdateWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.EntityUncheckedUpdateWithoutFeiDepotEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  coupled_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityUpsertWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.EntityUpsertWithoutFeiSviEntityInput> = z.object({
  update: z.union([ z.lazy(() => EntityUpdateWithoutFeiSviEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiSviEntityInputSchema) ]),
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiSviEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiSviEntityInputSchema) ]),
  where: z.lazy(() => EntityWhereInputSchema).optional()
}).strict();

export const EntityUpdateToOneWithWhereWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.EntityUpdateToOneWithWhereWithoutFeiSviEntityInput> = z.object({
  where: z.lazy(() => EntityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EntityUpdateWithoutFeiSviEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiSviEntityInputSchema) ]),
}).strict();

export const EntityUpdateWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.EntityUpdateWithoutFeiSviEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityUpdateOneWithoutCoupledEntity_oppositeNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityUncheckedUpdateWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.EntityUncheckedUpdateWithoutFeiSviEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  coupled_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutFeiSviUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutFeiSviUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFeiSviUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiSviUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFeiSviUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiSviUserInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutFeiSviUserInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutFeiSviUserInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutFeiSviUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiSviUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutFeiSviUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutFeiSviUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFeiSviUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFeiSviUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUpsertWithWhereUniqueWithoutFeiInputSchema: z.ZodType<Prisma.FeiIntermediaireUpsertWithWhereUniqueWithoutFeiInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutFeiInputSchema) ]),
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiInputSchema) ]),
}).strict();

export const FeiIntermediaireUpdateWithWhereUniqueWithoutFeiInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateWithWhereUniqueWithoutFeiInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeiIntermediaireUpdateWithoutFeiInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutFeiInputSchema) ]),
}).strict();

export const FeiIntermediaireUpdateManyWithWhereWithoutFeiInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateManyWithWhereWithoutFeiInput> = z.object({
  where: z.lazy(() => FeiIntermediaireScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeiIntermediaireUpdateManyMutationInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiInputSchema) ]),
}).strict();

export const UserUpsertWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutFeiCurrentUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFeiCurrentUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiCurrentUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFeiCurrentUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiCurrentUserInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutFeiCurrentUserInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutFeiCurrentUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiCurrentUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutFeiCurrentUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFeiCurrentUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const EntityUpsertWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.EntityUpsertWithoutFeiCurrentEntityInput> = z.object({
  update: z.union([ z.lazy(() => EntityUpdateWithoutFeiCurrentEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiCurrentEntityInputSchema) ]),
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiCurrentEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiCurrentEntityInputSchema) ]),
  where: z.lazy(() => EntityWhereInputSchema).optional()
}).strict();

export const EntityUpdateToOneWithWhereWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.EntityUpdateToOneWithWhereWithoutFeiCurrentEntityInput> = z.object({
  where: z.lazy(() => EntityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EntityUpdateWithoutFeiCurrentEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiCurrentEntityInputSchema) ]),
}).strict();

export const EntityUpdateWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.EntityUpdateWithoutFeiCurrentEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityUpdateOneWithoutCoupledEntity_oppositeNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityUncheckedUpdateWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.EntityUncheckedUpdateWithoutFeiCurrentEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  coupled_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityUpsertWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.EntityUpsertWithoutFeiNextEntityInput> = z.object({
  update: z.union([ z.lazy(() => EntityUpdateWithoutFeiNextEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiNextEntityInputSchema) ]),
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiNextEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiNextEntityInputSchema) ]),
  where: z.lazy(() => EntityWhereInputSchema).optional()
}).strict();

export const EntityUpdateToOneWithWhereWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.EntityUpdateToOneWithWhereWithoutFeiNextEntityInput> = z.object({
  where: z.lazy(() => EntityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EntityUpdateWithoutFeiNextEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiNextEntityInputSchema) ]),
}).strict();

export const EntityUpdateWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.EntityUpdateWithoutFeiNextEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityUpdateOneWithoutCoupledEntity_oppositeNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityUncheckedUpdateWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.EntityUncheckedUpdateWithoutFeiNextEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  coupled_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireFeiInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireFeiInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireFeiInputSchema) ]),
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiInputSchema) ]),
}).strict();

export const CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireFeiInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireFeiInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireFeiInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireFeiInputSchema) ]),
}).strict();

export const CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireFeiInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireFeiInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyMutationInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiInputSchema) ]),
}).strict();

export const InterventionOnFeiUpsertWithWhereUniqueWithoutFeiInputSchema: z.ZodType<Prisma.InterventionOnFeiUpsertWithWhereUniqueWithoutFeiInput> = z.object({
  where: z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => InterventionOnFeiUpdateWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUncheckedUpdateWithoutFeiInputSchema) ]),
  create: z.union([ z.lazy(() => InterventionOnFeiCreateWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUncheckedCreateWithoutFeiInputSchema) ]),
}).strict();

export const InterventionOnFeiUpdateWithWhereUniqueWithoutFeiInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateWithWhereUniqueWithoutFeiInput> = z.object({
  where: z.lazy(() => InterventionOnFeiWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => InterventionOnFeiUpdateWithoutFeiInputSchema),z.lazy(() => InterventionOnFeiUncheckedUpdateWithoutFeiInputSchema) ]),
}).strict();

export const InterventionOnFeiUpdateManyWithWhereWithoutFeiInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateManyWithWhereWithoutFeiInput> = z.object({
  where: z.lazy(() => InterventionOnFeiScalarWhereInputSchema),
  data: z.union([ z.lazy(() => InterventionOnFeiUpdateManyMutationInputSchema),z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiInputSchema) ]),
}).strict();

export const FeiCreateWithoutCarcassesInputSchema: z.ZodType<Prisma.FeiCreateWithoutCarcassesInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiCreatedByUser: z.lazy(() => UserCreateNestedOneWithoutFeiCreatedByUserInputSchema),
  FeiPremierDetenteurUser: z.lazy(() => UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiSviEntityInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserCreateNestedOneWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserCreateNestedOneWithoutFeiCurrentUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiNextEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateWithoutCarcassesInputSchema: z.ZodType<Prisma.FeiUncheckedCreateWithoutCarcassesInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiCreateOrConnectWithoutCarcassesInputSchema: z.ZodType<Prisma.FeiCreateOrConnectWithoutCarcassesInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiCreateWithoutCarcassesInputSchema),z.lazy(() => FeiUncheckedCreateWithoutCarcassesInputSchema) ]),
}).strict();

export const FeiIntermediaireCreateWithoutFeiIntermediairesCarcassesInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateWithoutFeiIntermediairesCarcassesInput> = z.object({
  id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Fei: z.lazy(() => FeiCreateNestedOneWithoutFeiIntermediairesInputSchema),
  FeiIntermediaireUser: z.lazy(() => UserCreateNestedOneWithoutFeiIntermediaireUserInputSchema),
  FeiIntermediaireEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiIntermediaireEntityInputSchema),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedCreateWithoutFeiIntermediairesCarcassesInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedCreateWithoutFeiIntermediairesCarcassesInput> = z.object({
  id: z.string(),
  fei_numero: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).optional()
}).strict();

export const FeiIntermediaireCreateOrConnectWithoutFeiIntermediairesCarcassesInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateOrConnectWithoutFeiIntermediairesCarcassesInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediairesCarcassesInputSchema) ]),
}).strict();

export const FeiIntermediaireCreateWithoutFeiIntermediaireCarcassesRefusInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateWithoutFeiIntermediaireCarcassesRefusInput> = z.object({
  id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Fei: z.lazy(() => FeiCreateNestedOneWithoutFeiIntermediairesInputSchema),
  FeiIntermediaireUser: z.lazy(() => UserCreateNestedOneWithoutFeiIntermediaireUserInputSchema),
  FeiIntermediaireEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiIntermediaireEntityInputSchema),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireCarcassesRefusInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireCarcassesRefusInput> = z.object({
  id: z.string(),
  fei_numero: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema).optional()
}).strict();

export const FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireCarcassesRefusInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateOrConnectWithoutFeiIntermediaireCarcassesRefusInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireCarcassesRefusInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireCarcassesRefusInputSchema) ]),
}).strict();

export const CarcasseIntermediaireCreateWithoutCarcasseCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateWithoutCarcasseCarcasseIntermediaireInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  CarcasseIntermediaireFei: z.lazy(() => FeiCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireUser: z.lazy(() => UserCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireEntity: z.lazy(() => EntityCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireFeiIntermediaire: z.lazy(() => FeiIntermediaireCreateNestedOneWithoutCarcasseIntermediaireInputSchema)
}).strict();

export const CarcasseIntermediaireUncheckedCreateWithoutCarcasseCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedCreateWithoutCarcasseCarcasseIntermediaireInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  fei_numero: z.string(),
  fei_intermediaire_id: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseIntermediaireCreateOrConnectWithoutCarcasseCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateOrConnectWithoutCarcasseCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseCarcasseIntermediaireInputSchema) ]),
}).strict();

export const CarcasseIntermediaireCreateManyCarcasseCarcasseIntermediaireInputEnvelopeSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateManyCarcasseCarcasseIntermediaireInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CarcasseIntermediaireCreateManyCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateManyCarcasseCarcasseIntermediaireInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeiUpsertWithoutCarcassesInputSchema: z.ZodType<Prisma.FeiUpsertWithoutCarcassesInput> = z.object({
  update: z.union([ z.lazy(() => FeiUpdateWithoutCarcassesInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutCarcassesInputSchema) ]),
  create: z.union([ z.lazy(() => FeiCreateWithoutCarcassesInputSchema),z.lazy(() => FeiUncheckedCreateWithoutCarcassesInputSchema) ]),
  where: z.lazy(() => FeiWhereInputSchema).optional()
}).strict();

export const FeiUpdateToOneWithWhereWithoutCarcassesInputSchema: z.ZodType<Prisma.FeiUpdateToOneWithWhereWithoutCarcassesInput> = z.object({
  where: z.lazy(() => FeiWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FeiUpdateWithoutCarcassesInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutCarcassesInputSchema) ]),
}).strict();

export const FeiUpdateWithoutCarcassesInputSchema: z.ZodType<Prisma.FeiUpdateWithoutCarcassesInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiCreatedByUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityUpdateOneWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserUpdateOneWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserUpdateOneWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityUpdateOneWithoutFeiNextEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateWithoutCarcassesInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateWithoutCarcassesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediairesCarcassesInputSchema: z.ZodType<Prisma.FeiIntermediaireUpsertWithWhereUniqueWithoutFeiIntermediairesCarcassesInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutFeiIntermediairesCarcassesInputSchema) ]),
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediairesCarcassesInputSchema) ]),
}).strict();

export const FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediairesCarcassesInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateWithWhereUniqueWithoutFeiIntermediairesCarcassesInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FeiIntermediaireUpdateWithoutFeiIntermediairesCarcassesInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutFeiIntermediairesCarcassesInputSchema) ]),
}).strict();

export const FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediairesCarcassesInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateManyWithWhereWithoutFeiIntermediairesCarcassesInput> = z.object({
  where: z.lazy(() => FeiIntermediaireScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FeiIntermediaireUpdateManyMutationInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediairesCarcassesInputSchema) ]),
}).strict();

export const FeiIntermediaireUpsertWithoutFeiIntermediaireCarcassesRefusInputSchema: z.ZodType<Prisma.FeiIntermediaireUpsertWithoutFeiIntermediaireCarcassesRefusInput> = z.object({
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithoutFeiIntermediaireCarcassesRefusInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutFeiIntermediaireCarcassesRefusInputSchema) ]),
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutFeiIntermediaireCarcassesRefusInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutFeiIntermediaireCarcassesRefusInputSchema) ]),
  where: z.lazy(() => FeiIntermediaireWhereInputSchema).optional()
}).strict();

export const FeiIntermediaireUpdateToOneWithWhereWithoutFeiIntermediaireCarcassesRefusInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateToOneWithWhereWithoutFeiIntermediaireCarcassesRefusInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FeiIntermediaireUpdateWithoutFeiIntermediaireCarcassesRefusInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutFeiIntermediaireCarcassesRefusInputSchema) ]),
}).strict();

export const FeiIntermediaireUpdateWithoutFeiIntermediaireCarcassesRefusInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateWithoutFeiIntermediaireCarcassesRefusInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fei: z.lazy(() => FeiUpdateOneRequiredWithoutFeiIntermediairesNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => EntityUpdateOneRequiredWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedUpdateWithoutFeiIntermediaireCarcassesRefusInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateWithoutFeiIntermediaireCarcassesRefusInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateWithoutCarcasseCarcasseIntermediaireInputSchema) ]),
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseCarcasseIntermediaireInputSchema) ]),
}).strict();

export const CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithoutCarcasseCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateWithoutCarcasseCarcasseIntermediaireInputSchema) ]),
}).strict();

export const CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyMutationInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseCarcasseIntermediaireInputSchema) ]),
}).strict();

export const FeiCreateWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.FeiCreateWithoutInterventionOnFeiInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserCreateNestedOneWithoutFeiCreatedByUserInputSchema),
  FeiPremierDetenteurUser: z.lazy(() => UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiSviEntityInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserCreateNestedOneWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserCreateNestedOneWithoutFeiCurrentUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiNextEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.FeiUncheckedCreateWithoutInterventionOnFeiInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional()
}).strict();

export const FeiCreateOrConnectWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.FeiCreateOrConnectWithoutInterventionOnFeiInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiCreateWithoutInterventionOnFeiInputSchema),z.lazy(() => FeiUncheckedCreateWithoutInterventionOnFeiInputSchema) ]),
}).strict();

export const UserCreateWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.UserCreateWithoutInterventionOnFeiInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutInterventionOnFeiInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutInterventionOnFeiInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutInterventionOnFeiInputSchema),z.lazy(() => UserUncheckedCreateWithoutInterventionOnFeiInputSchema) ]),
}).strict();

export const EntityCreateWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.EntityCreateWithoutInterventionOnFeiInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntity_oppositeInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntityInputSchema).optional()
}).strict();

export const EntityUncheckedCreateWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.EntityUncheckedCreateWithoutInterventionOnFeiInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  coupled_entity_id: z.string().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedCreateNestedOneWithoutCoupledEntityInputSchema).optional()
}).strict();

export const EntityCreateOrConnectWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.EntityCreateOrConnectWithoutInterventionOnFeiInput> = z.object({
  where: z.lazy(() => EntityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EntityCreateWithoutInterventionOnFeiInputSchema),z.lazy(() => EntityUncheckedCreateWithoutInterventionOnFeiInputSchema) ]),
}).strict();

export const FeiUpsertWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.FeiUpsertWithoutInterventionOnFeiInput> = z.object({
  update: z.union([ z.lazy(() => FeiUpdateWithoutInterventionOnFeiInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutInterventionOnFeiInputSchema) ]),
  create: z.union([ z.lazy(() => FeiCreateWithoutInterventionOnFeiInputSchema),z.lazy(() => FeiUncheckedCreateWithoutInterventionOnFeiInputSchema) ]),
  where: z.lazy(() => FeiWhereInputSchema).optional()
}).strict();

export const FeiUpdateToOneWithWhereWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.FeiUpdateToOneWithWhereWithoutInterventionOnFeiInput> = z.object({
  where: z.lazy(() => FeiWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FeiUpdateWithoutInterventionOnFeiInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutInterventionOnFeiInputSchema) ]),
}).strict();

export const FeiUpdateWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.FeiUpdateWithoutInterventionOnFeiInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityUpdateOneWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserUpdateOneWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserUpdateOneWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityUpdateOneWithoutFeiNextEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateWithoutInterventionOnFeiInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.UserUpsertWithoutInterventionOnFeiInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutInterventionOnFeiInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInterventionOnFeiInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutInterventionOnFeiInputSchema),z.lazy(() => UserUncheckedCreateWithoutInterventionOnFeiInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutInterventionOnFeiInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutInterventionOnFeiInputSchema),z.lazy(() => UserUncheckedUpdateWithoutInterventionOnFeiInputSchema) ]),
}).strict();

export const UserUpdateWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.UserUpdateWithoutInterventionOnFeiInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutInterventionOnFeiInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional()
}).strict();

export const EntityUpsertWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.EntityUpsertWithoutInterventionOnFeiInput> = z.object({
  update: z.union([ z.lazy(() => EntityUpdateWithoutInterventionOnFeiInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutInterventionOnFeiInputSchema) ]),
  create: z.union([ z.lazy(() => EntityCreateWithoutInterventionOnFeiInputSchema),z.lazy(() => EntityUncheckedCreateWithoutInterventionOnFeiInputSchema) ]),
  where: z.lazy(() => EntityWhereInputSchema).optional()
}).strict();

export const EntityUpdateToOneWithWhereWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.EntityUpdateToOneWithWhereWithoutInterventionOnFeiInput> = z.object({
  where: z.lazy(() => EntityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EntityUpdateWithoutInterventionOnFeiInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutInterventionOnFeiInputSchema) ]),
}).strict();

export const EntityUpdateWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.EntityUpdateWithoutInterventionOnFeiInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityUpdateOneWithoutCoupledEntity_oppositeNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUpdateOneWithoutCoupledEntityNestedInputSchema).optional()
}).strict();

export const EntityUncheckedUpdateWithoutInterventionOnFeiInputSchema: z.ZodType<Prisma.EntityUncheckedUpdateWithoutInterventionOnFeiInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  coupled_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedUpdateOneWithoutCoupledEntityNestedInputSchema).optional()
}).strict();

export const FeiCreateWithoutFeiIntermediairesInputSchema: z.ZodType<Prisma.FeiCreateWithoutFeiIntermediairesInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserCreateNestedOneWithoutFeiCreatedByUserInputSchema),
  FeiPremierDetenteurUser: z.lazy(() => UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiSviEntityInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserCreateNestedOneWithoutFeiSviUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserCreateNestedOneWithoutFeiCurrentUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiNextEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateWithoutFeiIntermediairesInputSchema: z.ZodType<Prisma.FeiUncheckedCreateWithoutFeiIntermediairesInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiCreateOrConnectWithoutFeiIntermediairesInputSchema: z.ZodType<Prisma.FeiCreateOrConnectWithoutFeiIntermediairesInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiIntermediairesInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiIntermediairesInputSchema) ]),
}).strict();

export const UserCreateWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.UserCreateWithoutFeiIntermediaireUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutFeiIntermediaireUserInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutFeiIntermediaireUserInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiIntermediaireUserInputSchema) ]),
}).strict();

export const EntityCreateWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.EntityCreateWithoutFeiIntermediaireEntityInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntity_oppositeInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityUncheckedCreateWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.EntityUncheckedCreateWithoutFeiIntermediaireEntityInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  coupled_entity_id: z.string().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireEntityInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityCreateOrConnectWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.EntityCreateOrConnectWithoutFeiIntermediaireEntityInput> = z.object({
  where: z.lazy(() => EntityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiIntermediaireEntityInputSchema) ]),
}).strict();

export const CarcasseCreateWithoutFeiIntermediairesCarcasseInputSchema: z.ZodType<Prisma.CarcasseCreateWithoutFeiIntermediairesCarcasseInput> = z.object({
  numero_bracelet: z.string(),
  heure_mise_a_mort: z.string().optional().nullable(),
  heure_evisceration: z.string().optional().nullable(),
  espece: z.string().optional().nullable(),
  categorie: z.string().optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.string().optional().nullable(),
  examinateur_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_refus_motif: z.string().optional().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_commentaire: z.string().optional().nullable(),
  svi_carcasse_saisie: z.boolean().optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseCreatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.coerce.date().optional().nullable(),
  svi_carcasse_signed_at: z.coerce.date().optional().nullable(),
  svi_carcasse_commentaire: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Fei: z.lazy(() => FeiCreateNestedOneWithoutCarcassesInputSchema),
  FeiIntermediaireCarcasseRefus: z.lazy(() => FeiIntermediaireCreateNestedOneWithoutFeiIntermediaireCarcassesRefusInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseCarcasseIntermediaireInputSchema).optional()
}).strict();

export const CarcasseUncheckedCreateWithoutFeiIntermediairesCarcasseInputSchema: z.ZodType<Prisma.CarcasseUncheckedCreateWithoutFeiIntermediairesCarcasseInput> = z.object({
  numero_bracelet: z.string(),
  fei_numero: z.string(),
  heure_mise_a_mort: z.string().optional().nullable(),
  heure_evisceration: z.string().optional().nullable(),
  espece: z.string().optional().nullable(),
  categorie: z.string().optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.string().optional().nullable(),
  examinateur_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.string().optional().nullable(),
  intermediaire_carcasse_refus_motif: z.string().optional().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_commentaire: z.string().optional().nullable(),
  svi_carcasse_saisie: z.boolean().optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseCreatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.coerce.date().optional().nullable(),
  svi_carcasse_signed_at: z.coerce.date().optional().nullable(),
  svi_carcasse_commentaire: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseCarcasseIntermediaireInputSchema).optional()
}).strict();

export const CarcasseCreateOrConnectWithoutFeiIntermediairesCarcasseInputSchema: z.ZodType<Prisma.CarcasseCreateOrConnectWithoutFeiIntermediairesCarcasseInput> = z.object({
  where: z.lazy(() => CarcasseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediairesCarcasseInputSchema) ]),
}).strict();

export const CarcasseCreateWithoutFeiIntermediaireCarcasseRefusInputSchema: z.ZodType<Prisma.CarcasseCreateWithoutFeiIntermediaireCarcasseRefusInput> = z.object({
  numero_bracelet: z.string(),
  heure_mise_a_mort: z.string().optional().nullable(),
  heure_evisceration: z.string().optional().nullable(),
  espece: z.string().optional().nullable(),
  categorie: z.string().optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.string().optional().nullable(),
  examinateur_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_refus_motif: z.string().optional().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_commentaire: z.string().optional().nullable(),
  svi_carcasse_saisie: z.boolean().optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseCreatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.coerce.date().optional().nullable(),
  svi_carcasse_signed_at: z.coerce.date().optional().nullable(),
  svi_carcasse_commentaire: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Fei: z.lazy(() => FeiCreateNestedOneWithoutCarcassesInputSchema),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediairesCarcassesInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseCarcasseIntermediaireInputSchema).optional()
}).strict();

export const CarcasseUncheckedCreateWithoutFeiIntermediaireCarcasseRefusInputSchema: z.ZodType<Prisma.CarcasseUncheckedCreateWithoutFeiIntermediaireCarcasseRefusInput> = z.object({
  numero_bracelet: z.string(),
  fei_numero: z.string(),
  heure_mise_a_mort: z.string().optional().nullable(),
  heure_evisceration: z.string().optional().nullable(),
  espece: z.string().optional().nullable(),
  categorie: z.string().optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.string().optional().nullable(),
  examinateur_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_refus_motif: z.string().optional().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_commentaire: z.string().optional().nullable(),
  svi_carcasse_saisie: z.boolean().optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseCreatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.coerce.date().optional().nullable(),
  svi_carcasse_signed_at: z.coerce.date().optional().nullable(),
  svi_carcasse_commentaire: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediairesCarcassesInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseCarcasseIntermediaireInputSchema).optional()
}).strict();

export const CarcasseCreateOrConnectWithoutFeiIntermediaireCarcasseRefusInputSchema: z.ZodType<Prisma.CarcasseCreateOrConnectWithoutFeiIntermediaireCarcasseRefusInput> = z.object({
  where: z.lazy(() => CarcasseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediaireCarcasseRefusInputSchema) ]),
}).strict();

export const CarcasseCreateManyFeiIntermediaireCarcasseRefusInputEnvelopeSchema: z.ZodType<Prisma.CarcasseCreateManyFeiIntermediaireCarcasseRefusInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CarcasseCreateManyFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseCreateManyFeiIntermediaireCarcasseRefusInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiIntermediaireInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  CarcasseIntermediaireFei: z.lazy(() => FeiCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseCarcasseIntermediaire: z.lazy(() => CarcasseCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireUser: z.lazy(() => UserCreateNestedOneWithoutCarcasseIntermediaireInputSchema),
  CarcasseIntermediaireEntity: z.lazy(() => EntityCreateNestedOneWithoutCarcasseIntermediaireInputSchema)
}).strict();

export const CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiIntermediaireInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  fei_numero: z.string(),
  numero_bracelet: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateOrConnectWithoutCarcasseIntermediaireFeiIntermediaireInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema) ]),
}).strict();

export const CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiIntermediaireInputEnvelopeSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiIntermediaireInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiIntermediaireInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FeiUpsertWithoutFeiIntermediairesInputSchema: z.ZodType<Prisma.FeiUpsertWithoutFeiIntermediairesInput> = z.object({
  update: z.union([ z.lazy(() => FeiUpdateWithoutFeiIntermediairesInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiIntermediairesInputSchema) ]),
  create: z.union([ z.lazy(() => FeiCreateWithoutFeiIntermediairesInputSchema),z.lazy(() => FeiUncheckedCreateWithoutFeiIntermediairesInputSchema) ]),
  where: z.lazy(() => FeiWhereInputSchema).optional()
}).strict();

export const FeiUpdateToOneWithWhereWithoutFeiIntermediairesInputSchema: z.ZodType<Prisma.FeiUpdateToOneWithWhereWithoutFeiIntermediairesInput> = z.object({
  where: z.lazy(() => FeiWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FeiUpdateWithoutFeiIntermediairesInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutFeiIntermediairesInputSchema) ]),
}).strict();

export const FeiUpdateWithoutFeiIntermediairesInputSchema: z.ZodType<Prisma.FeiUpdateWithoutFeiIntermediairesInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityUpdateOneWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserUpdateOneWithoutFeiSviUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserUpdateOneWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityUpdateOneWithoutFeiNextEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateWithoutFeiIntermediairesInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateWithoutFeiIntermediairesInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.UserUpsertWithoutFeiIntermediaireUserInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiIntermediaireUserInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => UserUncheckedCreateWithoutFeiIntermediaireUserInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutFeiIntermediaireUserInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutFeiIntermediaireUserInputSchema),z.lazy(() => UserUncheckedUpdateWithoutFeiIntermediaireUserInputSchema) ]),
}).strict();

export const UserUpdateWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.UserUpdateWithoutFeiIntermediaireUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutFeiIntermediaireUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const EntityUpsertWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.EntityUpsertWithoutFeiIntermediaireEntityInput> = z.object({
  update: z.union([ z.lazy(() => EntityUpdateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiIntermediaireEntityInputSchema) ]),
  create: z.union([ z.lazy(() => EntityCreateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => EntityUncheckedCreateWithoutFeiIntermediaireEntityInputSchema) ]),
  where: z.lazy(() => EntityWhereInputSchema).optional()
}).strict();

export const EntityUpdateToOneWithWhereWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.EntityUpdateToOneWithWhereWithoutFeiIntermediaireEntityInput> = z.object({
  where: z.lazy(() => EntityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EntityUpdateWithoutFeiIntermediaireEntityInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutFeiIntermediaireEntityInputSchema) ]),
}).strict();

export const EntityUpdateWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.EntityUpdateWithoutFeiIntermediaireEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityUpdateOneWithoutCoupledEntity_oppositeNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityUncheckedUpdateWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.EntityUncheckedUpdateWithoutFeiIntermediaireEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  coupled_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const CarcasseUpsertWithWhereUniqueWithoutFeiIntermediairesCarcasseInputSchema: z.ZodType<Prisma.CarcasseUpsertWithWhereUniqueWithoutFeiIntermediairesCarcasseInput> = z.object({
  where: z.lazy(() => CarcasseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CarcasseUpdateWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUncheckedUpdateWithoutFeiIntermediairesCarcasseInputSchema) ]),
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediairesCarcasseInputSchema) ]),
}).strict();

export const CarcasseUpdateWithWhereUniqueWithoutFeiIntermediairesCarcasseInputSchema: z.ZodType<Prisma.CarcasseUpdateWithWhereUniqueWithoutFeiIntermediairesCarcasseInput> = z.object({
  where: z.lazy(() => CarcasseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CarcasseUpdateWithoutFeiIntermediairesCarcasseInputSchema),z.lazy(() => CarcasseUncheckedUpdateWithoutFeiIntermediairesCarcasseInputSchema) ]),
}).strict();

export const CarcasseUpdateManyWithWhereWithoutFeiIntermediairesCarcasseInputSchema: z.ZodType<Prisma.CarcasseUpdateManyWithWhereWithoutFeiIntermediairesCarcasseInput> = z.object({
  where: z.lazy(() => CarcasseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CarcasseUpdateManyMutationInputSchema),z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediairesCarcasseInputSchema) ]),
}).strict();

export const CarcasseUpsertWithWhereUniqueWithoutFeiIntermediaireCarcasseRefusInputSchema: z.ZodType<Prisma.CarcasseUpsertWithWhereUniqueWithoutFeiIntermediaireCarcasseRefusInput> = z.object({
  where: z.lazy(() => CarcasseWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CarcasseUpdateWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUncheckedUpdateWithoutFeiIntermediaireCarcasseRefusInputSchema) ]),
  create: z.union([ z.lazy(() => CarcasseCreateWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutFeiIntermediaireCarcasseRefusInputSchema) ]),
}).strict();

export const CarcasseUpdateWithWhereUniqueWithoutFeiIntermediaireCarcasseRefusInputSchema: z.ZodType<Prisma.CarcasseUpdateWithWhereUniqueWithoutFeiIntermediaireCarcasseRefusInput> = z.object({
  where: z.lazy(() => CarcasseWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CarcasseUpdateWithoutFeiIntermediaireCarcasseRefusInputSchema),z.lazy(() => CarcasseUncheckedUpdateWithoutFeiIntermediaireCarcasseRefusInputSchema) ]),
}).strict();

export const CarcasseUpdateManyWithWhereWithoutFeiIntermediaireCarcasseRefusInputSchema: z.ZodType<Prisma.CarcasseUpdateManyWithWhereWithoutFeiIntermediaireCarcasseRefusInput> = z.object({
  where: z.lazy(() => CarcasseScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CarcasseUpdateManyMutationInputSchema),z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediaireCarcasseRefusInputSchema) ]),
}).strict();

export const CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireFeiIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpsertWithWhereUniqueWithoutCarcasseIntermediaireFeiIntermediaireInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema) ]),
  create: z.union([ z.lazy(() => CarcasseIntermediaireCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedCreateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema) ]),
}).strict();

export const CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireFeiIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateWithWhereUniqueWithoutCarcasseIntermediaireFeiIntermediaireInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema) ]),
}).strict();

export const CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireFeiIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateManyWithWhereWithoutCarcasseIntermediaireFeiIntermediaireInput> = z.object({
  where: z.lazy(() => CarcasseIntermediaireScalarWhereInputSchema),
  data: z.union([ z.lazy(() => CarcasseIntermediaireUpdateManyMutationInputSchema),z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema) ]),
}).strict();

export const FeiCreateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiCreateWithoutCarcasseIntermediaireInput> = z.object({
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserCreateNestedOneWithoutFeiCreatedByUserInputSchema),
  FeiPremierDetenteurUser: z.lazy(() => UserCreateNestedOneWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserCreateNestedOneWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiSviEntityInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserCreateNestedOneWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserCreateNestedOneWithoutFeiCurrentUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiNextEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiUncheckedCreateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiUncheckedCreateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutFeiInputSchema).optional()
}).strict();

export const FeiCreateOrConnectWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiCreateOrConnectWithoutCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => FeiWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]),
}).strict();

export const CarcasseCreateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseCreateWithoutCarcasseIntermediaireInput> = z.object({
  numero_bracelet: z.string(),
  heure_mise_a_mort: z.string().optional().nullable(),
  heure_evisceration: z.string().optional().nullable(),
  espece: z.string().optional().nullable(),
  categorie: z.string().optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.string().optional().nullable(),
  examinateur_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_refus_motif: z.string().optional().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_commentaire: z.string().optional().nullable(),
  svi_carcasse_saisie: z.boolean().optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseCreatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.coerce.date().optional().nullable(),
  svi_carcasse_signed_at: z.coerce.date().optional().nullable(),
  svi_carcasse_commentaire: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Fei: z.lazy(() => FeiCreateNestedOneWithoutCarcassesInputSchema),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediairesCarcassesInputSchema).optional(),
  FeiIntermediaireCarcasseRefus: z.lazy(() => FeiIntermediaireCreateNestedOneWithoutFeiIntermediaireCarcassesRefusInputSchema).optional()
}).strict();

export const CarcasseUncheckedCreateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseUncheckedCreateWithoutCarcasseIntermediaireInput> = z.object({
  numero_bracelet: z.string(),
  fei_numero: z.string(),
  heure_mise_a_mort: z.string().optional().nullable(),
  heure_evisceration: z.string().optional().nullable(),
  espece: z.string().optional().nullable(),
  categorie: z.string().optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.string().optional().nullable(),
  examinateur_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.string().optional().nullable(),
  intermediaire_carcasse_refus_motif: z.string().optional().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_commentaire: z.string().optional().nullable(),
  svi_carcasse_saisie: z.boolean().optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseCreatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.coerce.date().optional().nullable(),
  svi_carcasse_signed_at: z.coerce.date().optional().nullable(),
  svi_carcasse_commentaire: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediairesCarcassesInputSchema).optional()
}).strict();

export const CarcasseCreateOrConnectWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseCreateOrConnectWithoutCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => CarcasseWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => CarcasseCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]),
}).strict();

export const UserCreateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.UserCreateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogCreateNestedManyWithoutUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => UserUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]),
}).strict();

export const EntityCreateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.EntityCreateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntity_oppositeInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityUncheckedCreateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.EntityUncheckedCreateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.string().optional(),
  raison_sociale: z.string().optional().nullable(),
  address_ligne_1: z.string().optional().nullable(),
  address_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  siret: z.string().optional().nullable(),
  numero_ddecpp: z.string().optional().nullable(),
  type: z.lazy(() => EntityTypesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  coupled_entity_id: z.string().optional().nullable(),
  prefilled: z.boolean().optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutEntityRelatedWithUserInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentEntityInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiNextEntityInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiDepotEntityInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviEntityInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireEntityInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedCreateNestedOneWithoutCoupledEntityInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutEntityInputSchema).optional()
}).strict();

export const EntityCreateOrConnectWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.EntityCreateOrConnectWithoutCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => EntityWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EntityCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]),
}).strict();

export const FeiIntermediaireCreateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  Fei: z.lazy(() => FeiCreateNestedOneWithoutFeiIntermediairesInputSchema),
  FeiIntermediaireUser: z.lazy(() => UserCreateNestedOneWithoutFeiIntermediaireUserInputSchema),
  FeiIntermediaireEntity: z.lazy(() => EntityCreateNestedOneWithoutFeiIntermediaireEntityInputSchema),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedCreateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedCreateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.string(),
  fei_numero: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiIntermediairesCarcasseInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUncheckedCreateNestedManyWithoutFeiIntermediaireCarcasseRefusInputSchema).optional()
}).strict();

export const FeiIntermediaireCreateOrConnectWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateOrConnectWithoutCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]),
}).strict();

export const FeiUpsertWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiUpsertWithoutCarcasseIntermediaireInput> = z.object({
  update: z.union([ z.lazy(() => FeiUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]),
  create: z.union([ z.lazy(() => FeiCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]),
  where: z.lazy(() => FeiWhereInputSchema).optional()
}).strict();

export const FeiUpdateToOneWithWhereWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiUpdateToOneWithWhereWithoutCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => FeiWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FeiUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]),
}).strict();

export const FeiUpdateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiUpdateWithoutCarcasseIntermediaireInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityUpdateOneWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserUpdateOneWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserUpdateOneWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityUpdateOneWithoutFeiNextEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const CarcasseUpsertWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseUpsertWithoutCarcasseIntermediaireInput> = z.object({
  update: z.union([ z.lazy(() => CarcasseUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]),
  create: z.union([ z.lazy(() => CarcasseCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]),
  where: z.lazy(() => CarcasseWhereInputSchema).optional()
}).strict();

export const CarcasseUpdateToOneWithWhereWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseUpdateToOneWithWhereWithoutCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => CarcasseWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => CarcasseUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => CarcasseUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]),
}).strict();

export const CarcasseUpdateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseUpdateWithoutCarcasseIntermediaireInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fei: z.lazy(() => FeiUpdateOneRequiredWithoutCarcassesNestedInputSchema).optional(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediairesCarcassesNestedInputSchema).optional(),
  FeiIntermediaireCarcasseRefus: z.lazy(() => FeiIntermediaireUpdateOneWithoutFeiIntermediaireCarcassesRefusNestedInputSchema).optional()
}).strict();

export const CarcasseUncheckedUpdateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseUncheckedUpdateWithoutCarcasseIntermediaireInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediairesCarcassesNestedInputSchema).optional()
}).strict();

export const UserUpsertWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.UserUpsertWithoutCarcasseIntermediaireInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => UserUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => UserUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]),
}).strict();

export const UserUpdateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.UserUpdateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUpdateManyWithoutUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  NotificationLog: z.lazy(() => NotificationLogUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const EntityUpsertWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.EntityUpsertWithoutCarcasseIntermediaireInput> = z.object({
  update: z.union([ z.lazy(() => EntityUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]),
  create: z.union([ z.lazy(() => EntityCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => EntityUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]),
  where: z.lazy(() => EntityWhereInputSchema).optional()
}).strict();

export const EntityUpdateToOneWithWhereWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.EntityUpdateToOneWithWhereWithoutCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => EntityWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EntityUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => EntityUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]),
}).strict();

export const EntityUpdateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.EntityUpdateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity: z.lazy(() => EntityUpdateOneWithoutCoupledEntity_oppositeNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const EntityUncheckedUpdateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.EntityUncheckedUpdateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  raison_sociale: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  siret: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_ddecpp: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => EntityTypesSchema),z.lazy(() => EnumEntityTypesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  coupled_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  EntityRelatedWithUser: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiNextEntityNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  CoupledEntity_opposite: z.lazy(() => EntityUncheckedUpdateOneWithoutCoupledEntityNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutEntityNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUpsertWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiIntermediaireUpsertWithoutCarcasseIntermediaireInput> = z.object({
  update: z.union([ z.lazy(() => FeiIntermediaireUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]),
  create: z.union([ z.lazy(() => FeiIntermediaireCreateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiIntermediaireUncheckedCreateWithoutCarcasseIntermediaireInputSchema) ]),
  where: z.lazy(() => FeiIntermediaireWhereInputSchema).optional()
}).strict();

export const FeiIntermediaireUpdateToOneWithWhereWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateToOneWithWhereWithoutCarcasseIntermediaireInput> = z.object({
  where: z.lazy(() => FeiIntermediaireWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => FeiIntermediaireUpdateWithoutCarcasseIntermediaireInputSchema),z.lazy(() => FeiIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireInputSchema) ]),
}).strict();

export const FeiIntermediaireUpdateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fei: z.lazy(() => FeiUpdateOneRequiredWithoutFeiIntermediairesNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => EntityUpdateOneRequiredWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutNotificationLogInputSchema: z.ZodType<Prisma.UserCreateWithoutNotificationLogInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutNotificationLogInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutNotificationLogInput> = z.object({
  id: z.string(),
  email: z.string().optional().nullable(),
  telephone: z.string().optional().nullable(),
  prenom: z.string().optional().nullable(),
  nom_de_famille: z.string().optional().nullable(),
  numero_cfei: z.string().optional().nullable(),
  addresse_ligne_1: z.string().optional().nullable(),
  addresse_ligne_2: z.string().optional().nullable(),
  code_postal: z.string().optional().nullable(),
  ville: z.string().optional().nullable(),
  user_entities_vivible_checkbox: z.boolean().optional().nullable(),
  roles: z.union([ z.lazy(() => UserCreaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  last_login_at: z.coerce.date().optional().nullable(),
  last_seen_at: z.coerce.date().optional().nullable(),
  deleted_at: z.coerce.date().optional().nullable(),
  onboarded_at: z.coerce.date().optional().nullable(),
  notifications: z.union([ z.lazy(() => UserCreatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserCreateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.boolean().optional(),
  activated: z.boolean().optional(),
  Password: z.lazy(() => PasswordUncheckedCreateNestedOneWithoutUserInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserOwnerOfUserRelationInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedCreateNestedManyWithoutUserRelatedOfUserRelationInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedCreateNestedManyWithoutUserRelatedWithEntityInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCreatedByUserInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiCurrentUserInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiPremierDetenteurUserInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiExaminateurInitialUserInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedCreateNestedManyWithoutFeiSviUserInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedCreateNestedManyWithoutFeiIntermediaireUserInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedCreateNestedManyWithoutCarcasseIntermediaireUserInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutNotificationLogInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutNotificationLogInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutNotificationLogInputSchema),z.lazy(() => UserUncheckedCreateWithoutNotificationLogInputSchema) ]),
}).strict();

export const UserUpsertWithoutNotificationLogInputSchema: z.ZodType<Prisma.UserUpsertWithoutNotificationLogInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutNotificationLogInputSchema),z.lazy(() => UserUncheckedUpdateWithoutNotificationLogInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutNotificationLogInputSchema),z.lazy(() => UserUncheckedCreateWithoutNotificationLogInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutNotificationLogInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutNotificationLogInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutNotificationLogInputSchema),z.lazy(() => UserUncheckedUpdateWithoutNotificationLogInputSchema) ]),
}).strict();

export const UserUpdateWithoutNotificationLogInputSchema: z.ZodType<Prisma.UserUpdateWithoutNotificationLogInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutNotificationLogInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutNotificationLogInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  telephone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  prenom: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  nom_de_famille: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  numero_cfei: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_1: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  addresse_ligne_2: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  code_postal: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ville: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_entities_vivible_checkbox: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => UserUpdaterolesInputSchema),z.lazy(() => UserRolesSchema).array() ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  last_login_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_seen_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  onboarded_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  notifications: z.union([ z.lazy(() => UserUpdatenotificationsInputSchema),z.lazy(() => UserNotificationsSchema).array() ]).optional(),
  web_push_tokens: z.union([ z.lazy(() => UserUpdateweb_push_tokensInputSchema),z.string().array() ]).optional(),
  prefilled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  activated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  Password: z.lazy(() => PasswordUncheckedUpdateOneWithoutUserNestedInputSchema).optional(),
  UserRelationsAsOwner: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationNestedInputSchema).optional(),
  UserRelationsAsRelated: z.lazy(() => UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationNestedInputSchema).optional(),
  EntitiesRelations: z.lazy(() => EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => FeiUncheckedUpdateManyWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  Logs: z.lazy(() => LogsUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserRelationsCreateManyUserOwnerOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsCreateManyUserOwnerOfUserRelationInput> = z.object({
  id: z.string().optional(),
  related_id: z.string(),
  relation: z.lazy(() => UserRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const UserRelationsCreateManyUserRelatedOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsCreateManyUserRelatedOfUserRelationInput> = z.object({
  id: z.string().optional(),
  owner_id: z.string(),
  relation: z.lazy(() => UserRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const EntityRelationsCreateManyUserRelatedWithEntityInputSchema: z.ZodType<Prisma.EntityRelationsCreateManyUserRelatedWithEntityInput> = z.object({
  id: z.string().optional(),
  entity_id: z.string(),
  relation: z.lazy(() => EntityRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiCreateManyFeiCreatedByUserInputSchema: z.ZodType<Prisma.FeiCreateManyFeiCreatedByUserInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiCreateManyFeiCurrentUserInputSchema: z.ZodType<Prisma.FeiCreateManyFeiCurrentUserInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiCreateManyFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.FeiCreateManyFeiPremierDetenteurUserInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiCreateManyFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.FeiCreateManyFeiExaminateurInitialUserInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiCreateManyFeiSviUserInputSchema: z.ZodType<Prisma.FeiCreateManyFeiSviUserInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiIntermediaireCreateManyFeiIntermediaireUserInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateManyFeiIntermediaireUserInput> = z.object({
  id: z.string(),
  fei_numero: z.string(),
  fei_intermediaire_entity_id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const LogsCreateManyUserInputSchema: z.ZodType<Prisma.LogsCreateManyUserInput> = z.object({
  id: z.string().optional(),
  action: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const NotificationLogCreateManyUserInputSchema: z.ZodType<Prisma.NotificationLogCreateManyUserInput> = z.object({
  id: z.string().optional(),
  type: z.lazy(() => UserNotificationsSchema),
  email: z.string().optional().nullable(),
  web_push_token: z.string().optional().nullable(),
  action: z.string(),
  payload: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseIntermediaireCreateManyCarcasseIntermediaireUserInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateManyCarcasseIntermediaireUserInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  fei_numero: z.string(),
  numero_bracelet: z.string(),
  fei_intermediaire_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const InterventionOnFeiCreateManyUserInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateManyUserInput> = z.object({
  id: z.string().optional(),
  fei_numero: z.string(),
  entity_id: z.string(),
  role: z.lazy(() => UserRolesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const UserRelationsUpdateWithoutUserOwnerOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUpdateWithoutUserOwnerOfUserRelationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => EnumUserRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserRelatedOfUserRelation: z.lazy(() => UserUpdateOneRequiredWithoutUserRelationsAsRelatedNestedInputSchema).optional()
}).strict();

export const UserRelationsUncheckedUpdateWithoutUserOwnerOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUncheckedUpdateWithoutUserOwnerOfUserRelationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  related_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => EnumUserRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUncheckedUpdateManyWithoutUserOwnerOfUserRelationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  related_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => EnumUserRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserRelationsUpdateWithoutUserRelatedOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUpdateWithoutUserRelatedOfUserRelationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => EnumUserRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserOwnerOfUserRelation: z.lazy(() => UserUpdateOneRequiredWithoutUserRelationsAsOwnerNestedInputSchema).optional()
}).strict();

export const UserRelationsUncheckedUpdateWithoutUserRelatedOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUncheckedUpdateWithoutUserRelatedOfUserRelationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => EnumUserRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationInputSchema: z.ZodType<Prisma.UserRelationsUncheckedUpdateManyWithoutUserRelatedOfUserRelationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => UserRelationTypeSchema),z.lazy(() => EnumUserRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EntityRelationsUpdateWithoutUserRelatedWithEntityInputSchema: z.ZodType<Prisma.EntityRelationsUpdateWithoutUserRelatedWithEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => EnumEntityRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  EntityRelatedWithUser: z.lazy(() => EntityUpdateOneRequiredWithoutEntityRelatedWithUserNestedInputSchema).optional()
}).strict();

export const EntityRelationsUncheckedUpdateWithoutUserRelatedWithEntityInputSchema: z.ZodType<Prisma.EntityRelationsUncheckedUpdateWithoutUserRelatedWithEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => EnumEntityRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityInputSchema: z.ZodType<Prisma.EntityRelationsUncheckedUpdateManyWithoutUserRelatedWithEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => EnumEntityRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiUpdateWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.FeiUpdateWithoutFeiCreatedByUserInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityUpdateOneWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserUpdateOneWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserUpdateOneWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityUpdateOneWithoutFeiNextEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateWithoutFeiCreatedByUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiCreatedByUserInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiCreatedByUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiUpdateWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.FeiUpdateWithoutFeiCurrentUserInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityUpdateOneWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserUpdateOneWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityUpdateOneWithoutFeiNextEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateWithoutFeiCurrentUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiCurrentUserInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiCurrentUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiUpdateWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.FeiUpdateWithoutFeiPremierDetenteurUserInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityUpdateOneWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserUpdateOneWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserUpdateOneWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityUpdateOneWithoutFeiNextEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateWithoutFeiPremierDetenteurUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiPremierDetenteurUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiUpdateWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.FeiUpdateWithoutFeiExaminateurInitialUserInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityUpdateOneWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserUpdateOneWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserUpdateOneWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityUpdateOneWithoutFeiNextEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateWithoutFeiExaminateurInitialUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiExaminateurInitialUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiUpdateWithoutFeiSviUserInputSchema: z.ZodType<Prisma.FeiUpdateWithoutFeiSviUserInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityUpdateOneWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserUpdateOneWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityUpdateOneWithoutFeiNextEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateWithoutFeiSviUserInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateWithoutFeiSviUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiSviUserInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiSviUserInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiIntermediaireUpdateWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateWithoutFeiIntermediaireUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fei: z.lazy(() => FeiUpdateOneRequiredWithoutFeiIntermediairesNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => EntityUpdateOneRequiredWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedUpdateWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateWithoutFeiIntermediaireUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LogsUpdateWithoutUserInputSchema: z.ZodType<Prisma.LogsUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LogsUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.LogsUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LogsUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.LogsUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const NotificationLogUpdateWithoutUserInputSchema: z.ZodType<Prisma.NotificationLogUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => UserNotificationsSchema),z.lazy(() => EnumUserNotificationsFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_push_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payload: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const NotificationLogUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.NotificationLogUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => UserNotificationsSchema),z.lazy(() => EnumUserNotificationsFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_push_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payload: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const NotificationLogUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.NotificationLogUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => UserNotificationsSchema),z.lazy(() => EnumUserNotificationsFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  web_push_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  payload: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireUserInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireUserInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CarcasseIntermediaireFei: z.lazy(() => FeiUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseCarcasseIntermediaire: z.lazy(() => CarcasseUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireEntity: z.lazy(() => EntityUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireFeiIntermediaire: z.lazy(() => FeiIntermediaireUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireUserInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireUserInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireUserInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InterventionOnFeiUpdateWithoutUserInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => EnumUserRolesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fei: z.lazy(() => FeiUpdateOneRequiredWithoutInterventionOnFeiNestedInputSchema).optional(),
  Entity: z.lazy(() => EntityUpdateOneRequiredWithoutInterventionOnFeiNestedInputSchema).optional()
}).strict();

export const InterventionOnFeiUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => EnumUserRolesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InterventionOnFeiUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => EnumUserRolesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EntityRelationsCreateManyEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityRelationsCreateManyEntityRelatedWithUserInput> = z.object({
  id: z.string().optional(),
  owner_id: z.string(),
  relation: z.lazy(() => EntityRelationTypeSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiCreateManyFeiCurrentEntityInputSchema: z.ZodType<Prisma.FeiCreateManyFeiCurrentEntityInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiCreateManyFeiNextEntityInputSchema: z.ZodType<Prisma.FeiCreateManyFeiNextEntityInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiCreateManyFeiDepotEntityInputSchema: z.ZodType<Prisma.FeiCreateManyFeiDepotEntityInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_entity_id: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiCreateManyFeiSviEntityInputSchema: z.ZodType<Prisma.FeiCreateManyFeiSviEntityInput> = z.object({
  id: z.number().int().optional(),
  numero: z.string(),
  date_mise_a_mort: z.coerce.date().optional().nullable(),
  commune_mise_a_mort: z.string().optional().nullable(),
  created_by_user_id: z.string(),
  fei_current_owner_user_id: z.string().optional().nullable(),
  fei_current_owner_entity_id: z.string().optional().nullable(),
  fei_current_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.boolean().optional().nullable(),
  fei_next_owner_user_id: z.string().optional().nullable(),
  fei_next_owner_entity_id: z.string().optional().nullable(),
  fei_next_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  fei_prev_owner_user_id: z.string().optional().nullable(),
  fei_prev_owner_entity_id: z.string().optional().nullable(),
  fei_prev_owner_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  examinateur_initial_user_id: z.string().optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.boolean().optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.coerce.date().optional().nullable(),
  premier_detenteur_user_id: z.string().optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.coerce.date().optional().nullable(),
  premier_detenteur_depot_entity_id: z.string().optional().nullable(),
  premier_detenteur_depot_sauvage: z.string().optional().nullable(),
  svi_user_id: z.string().optional().nullable(),
  svi_carcasses_saisies: z.number().int().optional().nullable(),
  svi_aucune_carcasse_saisie: z.boolean().optional().nullable(),
  svi_commentaire: z.string().optional().nullable(),
  svi_signed_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiIntermediaireCreateManyFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateManyFeiIntermediaireEntityInput> = z.object({
  id: z.string(),
  fei_numero: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseIntermediaireCreateManyCarcasseIntermediaireEntityInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateManyCarcasseIntermediaireEntityInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  fei_numero: z.string(),
  numero_bracelet: z.string(),
  fei_intermediaire_id: z.string(),
  fei_intermediaire_user_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const InterventionOnFeiCreateManyEntityInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateManyEntityInput> = z.object({
  id: z.string().optional(),
  fei_numero: z.string(),
  user_id: z.string(),
  role: z.lazy(() => UserRolesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const EntityRelationsUpdateWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityRelationsUpdateWithoutEntityRelatedWithUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => EnumEntityRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  UserRelatedWithEntity: z.lazy(() => UserUpdateOneRequiredWithoutEntitiesRelationsNestedInputSchema).optional()
}).strict();

export const EntityRelationsUncheckedUpdateWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityRelationsUncheckedUpdateWithoutEntityRelatedWithUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => EnumEntityRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserInputSchema: z.ZodType<Prisma.EntityRelationsUncheckedUpdateManyWithoutEntityRelatedWithUserInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  owner_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relation: z.union([ z.lazy(() => EntityRelationTypeSchema),z.lazy(() => EnumEntityRelationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiUpdateWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.FeiUpdateWithoutFeiCurrentEntityInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityUpdateOneWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserUpdateOneWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserUpdateOneWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityUpdateOneWithoutFeiNextEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateWithoutFeiCurrentEntityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiCurrentEntityInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiCurrentEntityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiUpdateWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.FeiUpdateWithoutFeiNextEntityInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityUpdateOneWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserUpdateOneWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserUpdateOneWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateWithoutFeiNextEntityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiNextEntityInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiNextEntityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiUpdateWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.FeiUpdateWithoutFeiDepotEntityInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiSviEntity: z.lazy(() => EntityUpdateOneWithoutFeiSviEntityNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserUpdateOneWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserUpdateOneWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityUpdateOneWithoutFeiNextEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateWithoutFeiDepotEntityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiDepotEntityInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiDepotEntityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiUpdateWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.FeiUpdateWithoutFeiSviEntityInput> = z.object({
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCreatedByUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiCreatedByUserNestedInputSchema).optional(),
  FeiPremierDetenteurUser: z.lazy(() => UserUpdateOneWithoutFeiPremierDetenteurUserNestedInputSchema).optional(),
  FeiExaminateurInitialUser: z.lazy(() => UserUpdateOneWithoutFeiExaminateurInitialUserNestedInputSchema).optional(),
  FeiDepotEntity: z.lazy(() => EntityUpdateOneWithoutFeiDepotEntityNestedInputSchema).optional(),
  FeiSviUser: z.lazy(() => UserUpdateOneWithoutFeiSviUserNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiCurrentUser: z.lazy(() => UserUpdateOneWithoutFeiCurrentUserNestedInputSchema).optional(),
  FeiCurrentEntity: z.lazy(() => EntityUpdateOneWithoutFeiCurrentEntityNestedInputSchema).optional(),
  FeiNextEntity: z.lazy(() => EntityUpdateOneWithoutFeiNextEntityNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateWithoutFeiSviEntityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Carcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  FeiIntermediaires: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiNestedInputSchema).optional(),
  InterventionOnFei: z.lazy(() => InterventionOnFeiUncheckedUpdateManyWithoutFeiNestedInputSchema).optional()
}).strict();

export const FeiUncheckedUpdateManyWithoutFeiSviEntityInputSchema: z.ZodType<Prisma.FeiUncheckedUpdateManyWithoutFeiSviEntityInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_mise_a_mort: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commune_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_by_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_current_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_current_owner_wants_to_transfer: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_next_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fei_prev_owner_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_approbation_mise_sur_le_marche: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_initial_date_approbation_mise_sur_le_marche: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_date_depot_quelque_part: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_entity_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  premier_detenteur_depot_sauvage: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasses_saisies: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_aucune_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiIntermediaireUpdateWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateWithoutFeiIntermediaireEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fei: z.lazy(() => FeiUpdateOneRequiredWithoutFeiIntermediairesNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedUpdateWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateWithoutFeiIntermediaireEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediaireEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireEntityInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireEntityInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CarcasseIntermediaireFei: z.lazy(() => FeiUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseCarcasseIntermediaire: z.lazy(() => CarcasseUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireUser: z.lazy(() => UserUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireFeiIntermediaire: z.lazy(() => FeiIntermediaireUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireEntityInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireEntityInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireEntityInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InterventionOnFeiUpdateWithoutEntityInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateWithoutEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => EnumUserRolesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fei: z.lazy(() => FeiUpdateOneRequiredWithoutInterventionOnFeiNestedInputSchema).optional(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutInterventionOnFeiNestedInputSchema).optional()
}).strict();

export const InterventionOnFeiUncheckedUpdateWithoutEntityInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedUpdateWithoutEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => EnumUserRolesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InterventionOnFeiUncheckedUpdateManyWithoutEntityInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedUpdateManyWithoutEntityInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => EnumUserRolesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseCreateManyFeiInputSchema: z.ZodType<Prisma.CarcasseCreateManyFeiInput> = z.object({
  numero_bracelet: z.string(),
  heure_mise_a_mort: z.string().optional().nullable(),
  heure_evisceration: z.string().optional().nullable(),
  espece: z.string().optional().nullable(),
  categorie: z.string().optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.string().optional().nullable(),
  examinateur_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.string().optional().nullable(),
  intermediaire_carcasse_refus_motif: z.string().optional().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_commentaire: z.string().optional().nullable(),
  svi_carcasse_saisie: z.boolean().optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseCreatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.coerce.date().optional().nullable(),
  svi_carcasse_signed_at: z.coerce.date().optional().nullable(),
  svi_carcasse_commentaire: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiIntermediaireCreateManyFeiInputSchema: z.ZodType<Prisma.FeiIntermediaireCreateManyFeiInput> = z.object({
  id: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  fei_intermediaire_role: z.lazy(() => UserRolesSchema).optional().nullable(),
  commentaire: z.string().optional().nullable(),
  received_at: z.coerce.date().optional().nullable(),
  check_finished_at: z.coerce.date().optional().nullable(),
  handover_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  numero_bracelet: z.string(),
  fei_intermediaire_id: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const InterventionOnFeiCreateManyFeiInputSchema: z.ZodType<Prisma.InterventionOnFeiCreateManyFeiInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  entity_id: z.string(),
  role: z.lazy(() => UserRolesSchema),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseUpdateWithoutFeiInputSchema: z.ZodType<Prisma.CarcasseUpdateWithoutFeiInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediairesCarcassesNestedInputSchema).optional(),
  FeiIntermediaireCarcasseRefus: z.lazy(() => FeiIntermediaireUpdateOneWithoutFeiIntermediaireCarcassesRefusNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseUncheckedUpdateWithoutFeiInputSchema: z.ZodType<Prisma.CarcasseUncheckedUpdateWithoutFeiInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediairesCarcassesNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseUncheckedUpdateManyWithoutFeiInputSchema: z.ZodType<Prisma.CarcasseUncheckedUpdateManyWithoutFeiInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FeiIntermediaireUpdateWithoutFeiInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateWithoutFeiInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediaireUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => EntityUpdateOneRequiredWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedUpdateWithoutFeiInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateWithoutFeiInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediairesCarcasses: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediairesCarcasseNestedInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedUpdateManyWithoutFeiInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateManyWithoutFeiInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireFeiInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireFeiInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CarcasseCarcasseIntermediaire: z.lazy(() => CarcasseUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireUser: z.lazy(() => UserUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireEntity: z.lazy(() => EntityUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireFeiIntermediaire: z.lazy(() => FeiIntermediaireUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireFeiInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireFeiInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InterventionOnFeiUpdateWithoutFeiInputSchema: z.ZodType<Prisma.InterventionOnFeiUpdateWithoutFeiInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => EnumUserRolesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  User: z.lazy(() => UserUpdateOneRequiredWithoutInterventionOnFeiNestedInputSchema).optional(),
  Entity: z.lazy(() => EntityUpdateOneRequiredWithoutInterventionOnFeiNestedInputSchema).optional()
}).strict();

export const InterventionOnFeiUncheckedUpdateWithoutFeiInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedUpdateWithoutFeiInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => EnumUserRolesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const InterventionOnFeiUncheckedUpdateManyWithoutFeiInputSchema: z.ZodType<Prisma.InterventionOnFeiUncheckedUpdateManyWithoutFeiInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => EnumUserRolesFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireCreateManyCarcasseCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateManyCarcasseCarcasseIntermediaireInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  fei_numero: z.string(),
  fei_intermediaire_id: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const FeiIntermediaireUpdateWithoutFeiIntermediairesCarcassesInputSchema: z.ZodType<Prisma.FeiIntermediaireUpdateWithoutFeiIntermediairesCarcassesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fei: z.lazy(() => FeiUpdateOneRequiredWithoutFeiIntermediairesNestedInputSchema).optional(),
  FeiIntermediaireUser: z.lazy(() => UserUpdateOneRequiredWithoutFeiIntermediaireUserNestedInputSchema).optional(),
  FeiIntermediaireEntity: z.lazy(() => EntityUpdateOneRequiredWithoutFeiIntermediaireEntityNestedInputSchema).optional(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedUpdateWithoutFeiIntermediairesCarcassesInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateWithoutFeiIntermediairesCarcassesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediaireCarcassesRefus: z.lazy(() => CarcasseUncheckedUpdateManyWithoutFeiIntermediaireCarcasseRefusNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireNestedInputSchema).optional()
}).strict();

export const FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediairesCarcassesInputSchema: z.ZodType<Prisma.FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediairesCarcassesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_role: z.union([ z.lazy(() => UserRolesSchema),z.lazy(() => NullableEnumUserRolesFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  received_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  handover_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireUpdateWithoutCarcasseCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateWithoutCarcasseCarcasseIntermediaireInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CarcasseIntermediaireFei: z.lazy(() => FeiUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireUser: z.lazy(() => UserUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireEntity: z.lazy(() => EntityUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireFeiIntermediaire: z.lazy(() => FeiIntermediaireUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseIntermediaireUncheckedUpdateWithoutCarcasseCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateWithoutCarcasseCarcasseIntermediaireInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseCarcasseIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseCarcasseIntermediaireInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseCreateManyFeiIntermediaireCarcasseRefusInputSchema: z.ZodType<Prisma.CarcasseCreateManyFeiIntermediaireCarcasseRefusInput> = z.object({
  numero_bracelet: z.string(),
  fei_numero: z.string(),
  heure_mise_a_mort: z.string().optional().nullable(),
  heure_evisceration: z.string().optional().nullable(),
  espece: z.string().optional().nullable(),
  categorie: z.string().optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.boolean().optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseCreateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.string().optional().nullable(),
  examinateur_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_refus_motif: z.string().optional().nullable(),
  intermediaire_carcasse_signed_at: z.coerce.date().optional().nullable(),
  intermediaire_carcasse_commentaire: z.string().optional().nullable(),
  svi_carcasse_saisie: z.boolean().optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseCreatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.coerce.date().optional().nullable(),
  svi_carcasse_signed_at: z.coerce.date().optional().nullable(),
  svi_carcasse_commentaire: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateManyCarcasseIntermediaireFeiIntermediaireInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.string(),
  fei_numero: z.string(),
  numero_bracelet: z.string(),
  fei_intermediaire_user_id: z.string(),
  fei_intermediaire_entity_id: z.string(),
  prise_en_charge: z.boolean().optional().nullable(),
  refus: z.string().optional().nullable(),
  commentaire: z.string().optional().nullable(),
  carcasse_check_finished_at: z.coerce.date().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable()
}).strict();

export const CarcasseUpdateWithoutFeiIntermediairesCarcasseInputSchema: z.ZodType<Prisma.CarcasseUpdateWithoutFeiIntermediairesCarcasseInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fei: z.lazy(() => FeiUpdateOneRequiredWithoutCarcassesNestedInputSchema).optional(),
  FeiIntermediaireCarcasseRefus: z.lazy(() => FeiIntermediaireUpdateOneWithoutFeiIntermediaireCarcassesRefusNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseUncheckedUpdateWithoutFeiIntermediairesCarcasseInputSchema: z.ZodType<Prisma.CarcasseUncheckedUpdateWithoutFeiIntermediairesCarcasseInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseUncheckedUpdateManyWithoutFeiIntermediairesCarcasseInputSchema: z.ZodType<Prisma.CarcasseUncheckedUpdateManyWithoutFeiIntermediairesCarcasseInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_intermediaire_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseUpdateWithoutFeiIntermediaireCarcasseRefusInputSchema: z.ZodType<Prisma.CarcasseUpdateWithoutFeiIntermediaireCarcasseRefusInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  Fei: z.lazy(() => FeiUpdateOneRequiredWithoutCarcassesNestedInputSchema).optional(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireUpdateManyWithoutFeiIntermediairesCarcassesNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUpdateManyWithoutCarcasseCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseUncheckedUpdateWithoutFeiIntermediaireCarcasseRefusInputSchema: z.ZodType<Prisma.CarcasseUncheckedUpdateWithoutFeiIntermediaireCarcasseRefusInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  FeiIntermediairesCarcasse: z.lazy(() => FeiIntermediaireUncheckedUpdateManyWithoutFeiIntermediairesCarcassesNestedInputSchema).optional(),
  CarcasseIntermediaire: z.lazy(() => CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseUncheckedUpdateManyWithoutFeiIntermediaireCarcasseRefusInputSchema: z.ZodType<Prisma.CarcasseUncheckedUpdateManyWithoutFeiIntermediaireCarcasseRefusInput> = z.object({
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  heure_mise_a_mort: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  heure_evisceration: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  espece: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  categorie: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_carcasse_sans_anomalie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_anomalies_carcasse: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_carcasseInputSchema),z.string().array() ]).optional(),
  examinateur_anomalies_abats: z.union([ z.lazy(() => CarcasseUpdateexaminateur_anomalies_abatsInputSchema),z.string().array() ]).optional(),
  examinateur_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  examinateur_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_refus_motif: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  intermediaire_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_saisie_motif: z.union([ z.lazy(() => CarcasseUpdatesvi_carcasse_saisie_motifInputSchema),z.string().array() ]).optional(),
  svi_carcasse_saisie_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_signed_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  svi_carcasse_commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateWithoutCarcasseIntermediaireFeiIntermediaireInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  CarcasseIntermediaireFei: z.lazy(() => FeiUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseCarcasseIntermediaire: z.lazy(() => CarcasseUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireUser: z.lazy(() => UserUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional(),
  CarcasseIntermediaireEntity: z.lazy(() => EntityUpdateOneRequiredWithoutCarcasseIntermediaireNestedInputSchema).optional()
}).strict();

export const CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireFeiIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateWithoutCarcasseIntermediaireFeiIntermediaireInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireInputSchema: z.ZodType<Prisma.CarcasseIntermediaireUncheckedUpdateManyWithoutCarcasseIntermediaireFeiIntermediaireInput> = z.object({
  fei_numero__bracelet__intermediaire_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_numero: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  numero_bracelet: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  fei_intermediaire_entity_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  prise_en_charge: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  refus: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  commentaire: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  carcasse_check_finished_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const EntityFindFirstArgsSchema: z.ZodType<Prisma.EntityFindFirstArgs> = z.object({
  select: EntitySelectSchema.optional(),
  include: EntityIncludeSchema.optional(),
  where: EntityWhereInputSchema.optional(),
  orderBy: z.union([ EntityOrderByWithRelationInputSchema.array(),EntityOrderByWithRelationInputSchema ]).optional(),
  cursor: EntityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EntityScalarFieldEnumSchema,EntityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EntityFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EntityFindFirstOrThrowArgs> = z.object({
  select: EntitySelectSchema.optional(),
  include: EntityIncludeSchema.optional(),
  where: EntityWhereInputSchema.optional(),
  orderBy: z.union([ EntityOrderByWithRelationInputSchema.array(),EntityOrderByWithRelationInputSchema ]).optional(),
  cursor: EntityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EntityScalarFieldEnumSchema,EntityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EntityFindManyArgsSchema: z.ZodType<Prisma.EntityFindManyArgs> = z.object({
  select: EntitySelectSchema.optional(),
  include: EntityIncludeSchema.optional(),
  where: EntityWhereInputSchema.optional(),
  orderBy: z.union([ EntityOrderByWithRelationInputSchema.array(),EntityOrderByWithRelationInputSchema ]).optional(),
  cursor: EntityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EntityScalarFieldEnumSchema,EntityScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EntityAggregateArgsSchema: z.ZodType<Prisma.EntityAggregateArgs> = z.object({
  where: EntityWhereInputSchema.optional(),
  orderBy: z.union([ EntityOrderByWithRelationInputSchema.array(),EntityOrderByWithRelationInputSchema ]).optional(),
  cursor: EntityWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EntityGroupByArgsSchema: z.ZodType<Prisma.EntityGroupByArgs> = z.object({
  where: EntityWhereInputSchema.optional(),
  orderBy: z.union([ EntityOrderByWithAggregationInputSchema.array(),EntityOrderByWithAggregationInputSchema ]).optional(),
  by: EntityScalarFieldEnumSchema.array(),
  having: EntityScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EntityFindUniqueArgsSchema: z.ZodType<Prisma.EntityFindUniqueArgs> = z.object({
  select: EntitySelectSchema.optional(),
  include: EntityIncludeSchema.optional(),
  where: EntityWhereUniqueInputSchema,
}).strict() ;

export const EntityFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EntityFindUniqueOrThrowArgs> = z.object({
  select: EntitySelectSchema.optional(),
  include: EntityIncludeSchema.optional(),
  where: EntityWhereUniqueInputSchema,
}).strict() ;

export const PasswordFindFirstArgsSchema: z.ZodType<Prisma.PasswordFindFirstArgs> = z.object({
  select: PasswordSelectSchema.optional(),
  include: PasswordIncludeSchema.optional(),
  where: PasswordWhereInputSchema.optional(),
  orderBy: z.union([ PasswordOrderByWithRelationInputSchema.array(),PasswordOrderByWithRelationInputSchema ]).optional(),
  cursor: PasswordWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasswordScalarFieldEnumSchema,PasswordScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasswordFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PasswordFindFirstOrThrowArgs> = z.object({
  select: PasswordSelectSchema.optional(),
  include: PasswordIncludeSchema.optional(),
  where: PasswordWhereInputSchema.optional(),
  orderBy: z.union([ PasswordOrderByWithRelationInputSchema.array(),PasswordOrderByWithRelationInputSchema ]).optional(),
  cursor: PasswordWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasswordScalarFieldEnumSchema,PasswordScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasswordFindManyArgsSchema: z.ZodType<Prisma.PasswordFindManyArgs> = z.object({
  select: PasswordSelectSchema.optional(),
  include: PasswordIncludeSchema.optional(),
  where: PasswordWhereInputSchema.optional(),
  orderBy: z.union([ PasswordOrderByWithRelationInputSchema.array(),PasswordOrderByWithRelationInputSchema ]).optional(),
  cursor: PasswordWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PasswordScalarFieldEnumSchema,PasswordScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PasswordAggregateArgsSchema: z.ZodType<Prisma.PasswordAggregateArgs> = z.object({
  where: PasswordWhereInputSchema.optional(),
  orderBy: z.union([ PasswordOrderByWithRelationInputSchema.array(),PasswordOrderByWithRelationInputSchema ]).optional(),
  cursor: PasswordWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PasswordGroupByArgsSchema: z.ZodType<Prisma.PasswordGroupByArgs> = z.object({
  where: PasswordWhereInputSchema.optional(),
  orderBy: z.union([ PasswordOrderByWithAggregationInputSchema.array(),PasswordOrderByWithAggregationInputSchema ]).optional(),
  by: PasswordScalarFieldEnumSchema.array(),
  having: PasswordScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PasswordFindUniqueArgsSchema: z.ZodType<Prisma.PasswordFindUniqueArgs> = z.object({
  select: PasswordSelectSchema.optional(),
  include: PasswordIncludeSchema.optional(),
  where: PasswordWhereUniqueInputSchema,
}).strict() ;

export const PasswordFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PasswordFindUniqueOrThrowArgs> = z.object({
  select: PasswordSelectSchema.optional(),
  include: PasswordIncludeSchema.optional(),
  where: PasswordWhereUniqueInputSchema,
}).strict() ;

export const UserRelationsFindFirstArgsSchema: z.ZodType<Prisma.UserRelationsFindFirstArgs> = z.object({
  select: UserRelationsSelectSchema.optional(),
  include: UserRelationsIncludeSchema.optional(),
  where: UserRelationsWhereInputSchema.optional(),
  orderBy: z.union([ UserRelationsOrderByWithRelationInputSchema.array(),UserRelationsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRelationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserRelationsScalarFieldEnumSchema,UserRelationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserRelationsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserRelationsFindFirstOrThrowArgs> = z.object({
  select: UserRelationsSelectSchema.optional(),
  include: UserRelationsIncludeSchema.optional(),
  where: UserRelationsWhereInputSchema.optional(),
  orderBy: z.union([ UserRelationsOrderByWithRelationInputSchema.array(),UserRelationsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRelationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserRelationsScalarFieldEnumSchema,UserRelationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserRelationsFindManyArgsSchema: z.ZodType<Prisma.UserRelationsFindManyArgs> = z.object({
  select: UserRelationsSelectSchema.optional(),
  include: UserRelationsIncludeSchema.optional(),
  where: UserRelationsWhereInputSchema.optional(),
  orderBy: z.union([ UserRelationsOrderByWithRelationInputSchema.array(),UserRelationsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRelationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserRelationsScalarFieldEnumSchema,UserRelationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserRelationsAggregateArgsSchema: z.ZodType<Prisma.UserRelationsAggregateArgs> = z.object({
  where: UserRelationsWhereInputSchema.optional(),
  orderBy: z.union([ UserRelationsOrderByWithRelationInputSchema.array(),UserRelationsOrderByWithRelationInputSchema ]).optional(),
  cursor: UserRelationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserRelationsGroupByArgsSchema: z.ZodType<Prisma.UserRelationsGroupByArgs> = z.object({
  where: UserRelationsWhereInputSchema.optional(),
  orderBy: z.union([ UserRelationsOrderByWithAggregationInputSchema.array(),UserRelationsOrderByWithAggregationInputSchema ]).optional(),
  by: UserRelationsScalarFieldEnumSchema.array(),
  having: UserRelationsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserRelationsFindUniqueArgsSchema: z.ZodType<Prisma.UserRelationsFindUniqueArgs> = z.object({
  select: UserRelationsSelectSchema.optional(),
  include: UserRelationsIncludeSchema.optional(),
  where: UserRelationsWhereUniqueInputSchema,
}).strict() ;

export const UserRelationsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserRelationsFindUniqueOrThrowArgs> = z.object({
  select: UserRelationsSelectSchema.optional(),
  include: UserRelationsIncludeSchema.optional(),
  where: UserRelationsWhereUniqueInputSchema,
}).strict() ;

export const EntityRelationsFindFirstArgsSchema: z.ZodType<Prisma.EntityRelationsFindFirstArgs> = z.object({
  select: EntityRelationsSelectSchema.optional(),
  include: EntityRelationsIncludeSchema.optional(),
  where: EntityRelationsWhereInputSchema.optional(),
  orderBy: z.union([ EntityRelationsOrderByWithRelationInputSchema.array(),EntityRelationsOrderByWithRelationInputSchema ]).optional(),
  cursor: EntityRelationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EntityRelationsScalarFieldEnumSchema,EntityRelationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EntityRelationsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EntityRelationsFindFirstOrThrowArgs> = z.object({
  select: EntityRelationsSelectSchema.optional(),
  include: EntityRelationsIncludeSchema.optional(),
  where: EntityRelationsWhereInputSchema.optional(),
  orderBy: z.union([ EntityRelationsOrderByWithRelationInputSchema.array(),EntityRelationsOrderByWithRelationInputSchema ]).optional(),
  cursor: EntityRelationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EntityRelationsScalarFieldEnumSchema,EntityRelationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EntityRelationsFindManyArgsSchema: z.ZodType<Prisma.EntityRelationsFindManyArgs> = z.object({
  select: EntityRelationsSelectSchema.optional(),
  include: EntityRelationsIncludeSchema.optional(),
  where: EntityRelationsWhereInputSchema.optional(),
  orderBy: z.union([ EntityRelationsOrderByWithRelationInputSchema.array(),EntityRelationsOrderByWithRelationInputSchema ]).optional(),
  cursor: EntityRelationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EntityRelationsScalarFieldEnumSchema,EntityRelationsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EntityRelationsAggregateArgsSchema: z.ZodType<Prisma.EntityRelationsAggregateArgs> = z.object({
  where: EntityRelationsWhereInputSchema.optional(),
  orderBy: z.union([ EntityRelationsOrderByWithRelationInputSchema.array(),EntityRelationsOrderByWithRelationInputSchema ]).optional(),
  cursor: EntityRelationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EntityRelationsGroupByArgsSchema: z.ZodType<Prisma.EntityRelationsGroupByArgs> = z.object({
  where: EntityRelationsWhereInputSchema.optional(),
  orderBy: z.union([ EntityRelationsOrderByWithAggregationInputSchema.array(),EntityRelationsOrderByWithAggregationInputSchema ]).optional(),
  by: EntityRelationsScalarFieldEnumSchema.array(),
  having: EntityRelationsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EntityRelationsFindUniqueArgsSchema: z.ZodType<Prisma.EntityRelationsFindUniqueArgs> = z.object({
  select: EntityRelationsSelectSchema.optional(),
  include: EntityRelationsIncludeSchema.optional(),
  where: EntityRelationsWhereUniqueInputSchema,
}).strict() ;

export const EntityRelationsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EntityRelationsFindUniqueOrThrowArgs> = z.object({
  select: EntityRelationsSelectSchema.optional(),
  include: EntityRelationsIncludeSchema.optional(),
  where: EntityRelationsWhereUniqueInputSchema,
}).strict() ;

export const LogsFindFirstArgsSchema: z.ZodType<Prisma.LogsFindFirstArgs> = z.object({
  select: LogsSelectSchema.optional(),
  include: LogsIncludeSchema.optional(),
  where: LogsWhereInputSchema.optional(),
  orderBy: z.union([ LogsOrderByWithRelationInputSchema.array(),LogsOrderByWithRelationInputSchema ]).optional(),
  cursor: LogsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LogsScalarFieldEnumSchema,LogsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LogsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LogsFindFirstOrThrowArgs> = z.object({
  select: LogsSelectSchema.optional(),
  include: LogsIncludeSchema.optional(),
  where: LogsWhereInputSchema.optional(),
  orderBy: z.union([ LogsOrderByWithRelationInputSchema.array(),LogsOrderByWithRelationInputSchema ]).optional(),
  cursor: LogsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LogsScalarFieldEnumSchema,LogsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LogsFindManyArgsSchema: z.ZodType<Prisma.LogsFindManyArgs> = z.object({
  select: LogsSelectSchema.optional(),
  include: LogsIncludeSchema.optional(),
  where: LogsWhereInputSchema.optional(),
  orderBy: z.union([ LogsOrderByWithRelationInputSchema.array(),LogsOrderByWithRelationInputSchema ]).optional(),
  cursor: LogsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LogsScalarFieldEnumSchema,LogsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LogsAggregateArgsSchema: z.ZodType<Prisma.LogsAggregateArgs> = z.object({
  where: LogsWhereInputSchema.optional(),
  orderBy: z.union([ LogsOrderByWithRelationInputSchema.array(),LogsOrderByWithRelationInputSchema ]).optional(),
  cursor: LogsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LogsGroupByArgsSchema: z.ZodType<Prisma.LogsGroupByArgs> = z.object({
  where: LogsWhereInputSchema.optional(),
  orderBy: z.union([ LogsOrderByWithAggregationInputSchema.array(),LogsOrderByWithAggregationInputSchema ]).optional(),
  by: LogsScalarFieldEnumSchema.array(),
  having: LogsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LogsFindUniqueArgsSchema: z.ZodType<Prisma.LogsFindUniqueArgs> = z.object({
  select: LogsSelectSchema.optional(),
  include: LogsIncludeSchema.optional(),
  where: LogsWhereUniqueInputSchema,
}).strict() ;

export const LogsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LogsFindUniqueOrThrowArgs> = z.object({
  select: LogsSelectSchema.optional(),
  include: LogsIncludeSchema.optional(),
  where: LogsWhereUniqueInputSchema,
}).strict() ;

export const FeiFindFirstArgsSchema: z.ZodType<Prisma.FeiFindFirstArgs> = z.object({
  select: FeiSelectSchema.optional(),
  include: FeiIncludeSchema.optional(),
  where: FeiWhereInputSchema.optional(),
  orderBy: z.union([ FeiOrderByWithRelationInputSchema.array(),FeiOrderByWithRelationInputSchema ]).optional(),
  cursor: FeiWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FeiScalarFieldEnumSchema,FeiScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FeiFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FeiFindFirstOrThrowArgs> = z.object({
  select: FeiSelectSchema.optional(),
  include: FeiIncludeSchema.optional(),
  where: FeiWhereInputSchema.optional(),
  orderBy: z.union([ FeiOrderByWithRelationInputSchema.array(),FeiOrderByWithRelationInputSchema ]).optional(),
  cursor: FeiWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FeiScalarFieldEnumSchema,FeiScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FeiFindManyArgsSchema: z.ZodType<Prisma.FeiFindManyArgs> = z.object({
  select: FeiSelectSchema.optional(),
  include: FeiIncludeSchema.optional(),
  where: FeiWhereInputSchema.optional(),
  orderBy: z.union([ FeiOrderByWithRelationInputSchema.array(),FeiOrderByWithRelationInputSchema ]).optional(),
  cursor: FeiWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FeiScalarFieldEnumSchema,FeiScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FeiAggregateArgsSchema: z.ZodType<Prisma.FeiAggregateArgs> = z.object({
  where: FeiWhereInputSchema.optional(),
  orderBy: z.union([ FeiOrderByWithRelationInputSchema.array(),FeiOrderByWithRelationInputSchema ]).optional(),
  cursor: FeiWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FeiGroupByArgsSchema: z.ZodType<Prisma.FeiGroupByArgs> = z.object({
  where: FeiWhereInputSchema.optional(),
  orderBy: z.union([ FeiOrderByWithAggregationInputSchema.array(),FeiOrderByWithAggregationInputSchema ]).optional(),
  by: FeiScalarFieldEnumSchema.array(),
  having: FeiScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FeiFindUniqueArgsSchema: z.ZodType<Prisma.FeiFindUniqueArgs> = z.object({
  select: FeiSelectSchema.optional(),
  include: FeiIncludeSchema.optional(),
  where: FeiWhereUniqueInputSchema,
}).strict() ;

export const FeiFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FeiFindUniqueOrThrowArgs> = z.object({
  select: FeiSelectSchema.optional(),
  include: FeiIncludeSchema.optional(),
  where: FeiWhereUniqueInputSchema,
}).strict() ;

export const CarcasseFindFirstArgsSchema: z.ZodType<Prisma.CarcasseFindFirstArgs> = z.object({
  select: CarcasseSelectSchema.optional(),
  include: CarcasseIncludeSchema.optional(),
  where: CarcasseWhereInputSchema.optional(),
  orderBy: z.union([ CarcasseOrderByWithRelationInputSchema.array(),CarcasseOrderByWithRelationInputSchema ]).optional(),
  cursor: CarcasseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CarcasseScalarFieldEnumSchema,CarcasseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CarcasseFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CarcasseFindFirstOrThrowArgs> = z.object({
  select: CarcasseSelectSchema.optional(),
  include: CarcasseIncludeSchema.optional(),
  where: CarcasseWhereInputSchema.optional(),
  orderBy: z.union([ CarcasseOrderByWithRelationInputSchema.array(),CarcasseOrderByWithRelationInputSchema ]).optional(),
  cursor: CarcasseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CarcasseScalarFieldEnumSchema,CarcasseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CarcasseFindManyArgsSchema: z.ZodType<Prisma.CarcasseFindManyArgs> = z.object({
  select: CarcasseSelectSchema.optional(),
  include: CarcasseIncludeSchema.optional(),
  where: CarcasseWhereInputSchema.optional(),
  orderBy: z.union([ CarcasseOrderByWithRelationInputSchema.array(),CarcasseOrderByWithRelationInputSchema ]).optional(),
  cursor: CarcasseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CarcasseScalarFieldEnumSchema,CarcasseScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CarcasseAggregateArgsSchema: z.ZodType<Prisma.CarcasseAggregateArgs> = z.object({
  where: CarcasseWhereInputSchema.optional(),
  orderBy: z.union([ CarcasseOrderByWithRelationInputSchema.array(),CarcasseOrderByWithRelationInputSchema ]).optional(),
  cursor: CarcasseWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CarcasseGroupByArgsSchema: z.ZodType<Prisma.CarcasseGroupByArgs> = z.object({
  where: CarcasseWhereInputSchema.optional(),
  orderBy: z.union([ CarcasseOrderByWithAggregationInputSchema.array(),CarcasseOrderByWithAggregationInputSchema ]).optional(),
  by: CarcasseScalarFieldEnumSchema.array(),
  having: CarcasseScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CarcasseFindUniqueArgsSchema: z.ZodType<Prisma.CarcasseFindUniqueArgs> = z.object({
  select: CarcasseSelectSchema.optional(),
  include: CarcasseIncludeSchema.optional(),
  where: CarcasseWhereUniqueInputSchema,
}).strict() ;

export const CarcasseFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CarcasseFindUniqueOrThrowArgs> = z.object({
  select: CarcasseSelectSchema.optional(),
  include: CarcasseIncludeSchema.optional(),
  where: CarcasseWhereUniqueInputSchema,
}).strict() ;

export const InterventionOnFeiFindFirstArgsSchema: z.ZodType<Prisma.InterventionOnFeiFindFirstArgs> = z.object({
  select: InterventionOnFeiSelectSchema.optional(),
  include: InterventionOnFeiIncludeSchema.optional(),
  where: InterventionOnFeiWhereInputSchema.optional(),
  orderBy: z.union([ InterventionOnFeiOrderByWithRelationInputSchema.array(),InterventionOnFeiOrderByWithRelationInputSchema ]).optional(),
  cursor: InterventionOnFeiWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InterventionOnFeiScalarFieldEnumSchema,InterventionOnFeiScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InterventionOnFeiFindFirstOrThrowArgsSchema: z.ZodType<Prisma.InterventionOnFeiFindFirstOrThrowArgs> = z.object({
  select: InterventionOnFeiSelectSchema.optional(),
  include: InterventionOnFeiIncludeSchema.optional(),
  where: InterventionOnFeiWhereInputSchema.optional(),
  orderBy: z.union([ InterventionOnFeiOrderByWithRelationInputSchema.array(),InterventionOnFeiOrderByWithRelationInputSchema ]).optional(),
  cursor: InterventionOnFeiWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InterventionOnFeiScalarFieldEnumSchema,InterventionOnFeiScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InterventionOnFeiFindManyArgsSchema: z.ZodType<Prisma.InterventionOnFeiFindManyArgs> = z.object({
  select: InterventionOnFeiSelectSchema.optional(),
  include: InterventionOnFeiIncludeSchema.optional(),
  where: InterventionOnFeiWhereInputSchema.optional(),
  orderBy: z.union([ InterventionOnFeiOrderByWithRelationInputSchema.array(),InterventionOnFeiOrderByWithRelationInputSchema ]).optional(),
  cursor: InterventionOnFeiWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ InterventionOnFeiScalarFieldEnumSchema,InterventionOnFeiScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const InterventionOnFeiAggregateArgsSchema: z.ZodType<Prisma.InterventionOnFeiAggregateArgs> = z.object({
  where: InterventionOnFeiWhereInputSchema.optional(),
  orderBy: z.union([ InterventionOnFeiOrderByWithRelationInputSchema.array(),InterventionOnFeiOrderByWithRelationInputSchema ]).optional(),
  cursor: InterventionOnFeiWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InterventionOnFeiGroupByArgsSchema: z.ZodType<Prisma.InterventionOnFeiGroupByArgs> = z.object({
  where: InterventionOnFeiWhereInputSchema.optional(),
  orderBy: z.union([ InterventionOnFeiOrderByWithAggregationInputSchema.array(),InterventionOnFeiOrderByWithAggregationInputSchema ]).optional(),
  by: InterventionOnFeiScalarFieldEnumSchema.array(),
  having: InterventionOnFeiScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const InterventionOnFeiFindUniqueArgsSchema: z.ZodType<Prisma.InterventionOnFeiFindUniqueArgs> = z.object({
  select: InterventionOnFeiSelectSchema.optional(),
  include: InterventionOnFeiIncludeSchema.optional(),
  where: InterventionOnFeiWhereUniqueInputSchema,
}).strict() ;

export const InterventionOnFeiFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.InterventionOnFeiFindUniqueOrThrowArgs> = z.object({
  select: InterventionOnFeiSelectSchema.optional(),
  include: InterventionOnFeiIncludeSchema.optional(),
  where: InterventionOnFeiWhereUniqueInputSchema,
}).strict() ;

export const FeiIntermediaireFindFirstArgsSchema: z.ZodType<Prisma.FeiIntermediaireFindFirstArgs> = z.object({
  select: FeiIntermediaireSelectSchema.optional(),
  include: FeiIntermediaireIncludeSchema.optional(),
  where: FeiIntermediaireWhereInputSchema.optional(),
  orderBy: z.union([ FeiIntermediaireOrderByWithRelationInputSchema.array(),FeiIntermediaireOrderByWithRelationInputSchema ]).optional(),
  cursor: FeiIntermediaireWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FeiIntermediaireScalarFieldEnumSchema,FeiIntermediaireScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FeiIntermediaireFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FeiIntermediaireFindFirstOrThrowArgs> = z.object({
  select: FeiIntermediaireSelectSchema.optional(),
  include: FeiIntermediaireIncludeSchema.optional(),
  where: FeiIntermediaireWhereInputSchema.optional(),
  orderBy: z.union([ FeiIntermediaireOrderByWithRelationInputSchema.array(),FeiIntermediaireOrderByWithRelationInputSchema ]).optional(),
  cursor: FeiIntermediaireWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FeiIntermediaireScalarFieldEnumSchema,FeiIntermediaireScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FeiIntermediaireFindManyArgsSchema: z.ZodType<Prisma.FeiIntermediaireFindManyArgs> = z.object({
  select: FeiIntermediaireSelectSchema.optional(),
  include: FeiIntermediaireIncludeSchema.optional(),
  where: FeiIntermediaireWhereInputSchema.optional(),
  orderBy: z.union([ FeiIntermediaireOrderByWithRelationInputSchema.array(),FeiIntermediaireOrderByWithRelationInputSchema ]).optional(),
  cursor: FeiIntermediaireWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FeiIntermediaireScalarFieldEnumSchema,FeiIntermediaireScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FeiIntermediaireAggregateArgsSchema: z.ZodType<Prisma.FeiIntermediaireAggregateArgs> = z.object({
  where: FeiIntermediaireWhereInputSchema.optional(),
  orderBy: z.union([ FeiIntermediaireOrderByWithRelationInputSchema.array(),FeiIntermediaireOrderByWithRelationInputSchema ]).optional(),
  cursor: FeiIntermediaireWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FeiIntermediaireGroupByArgsSchema: z.ZodType<Prisma.FeiIntermediaireGroupByArgs> = z.object({
  where: FeiIntermediaireWhereInputSchema.optional(),
  orderBy: z.union([ FeiIntermediaireOrderByWithAggregationInputSchema.array(),FeiIntermediaireOrderByWithAggregationInputSchema ]).optional(),
  by: FeiIntermediaireScalarFieldEnumSchema.array(),
  having: FeiIntermediaireScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FeiIntermediaireFindUniqueArgsSchema: z.ZodType<Prisma.FeiIntermediaireFindUniqueArgs> = z.object({
  select: FeiIntermediaireSelectSchema.optional(),
  include: FeiIntermediaireIncludeSchema.optional(),
  where: FeiIntermediaireWhereUniqueInputSchema,
}).strict() ;

export const FeiIntermediaireFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FeiIntermediaireFindUniqueOrThrowArgs> = z.object({
  select: FeiIntermediaireSelectSchema.optional(),
  include: FeiIntermediaireIncludeSchema.optional(),
  where: FeiIntermediaireWhereUniqueInputSchema,
}).strict() ;

export const CarcasseIntermediaireFindFirstArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireFindFirstArgs> = z.object({
  select: CarcasseIntermediaireSelectSchema.optional(),
  include: CarcasseIntermediaireIncludeSchema.optional(),
  where: CarcasseIntermediaireWhereInputSchema.optional(),
  orderBy: z.union([ CarcasseIntermediaireOrderByWithRelationInputSchema.array(),CarcasseIntermediaireOrderByWithRelationInputSchema ]).optional(),
  cursor: CarcasseIntermediaireWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CarcasseIntermediaireScalarFieldEnumSchema,CarcasseIntermediaireScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CarcasseIntermediaireFindFirstOrThrowArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireFindFirstOrThrowArgs> = z.object({
  select: CarcasseIntermediaireSelectSchema.optional(),
  include: CarcasseIntermediaireIncludeSchema.optional(),
  where: CarcasseIntermediaireWhereInputSchema.optional(),
  orderBy: z.union([ CarcasseIntermediaireOrderByWithRelationInputSchema.array(),CarcasseIntermediaireOrderByWithRelationInputSchema ]).optional(),
  cursor: CarcasseIntermediaireWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CarcasseIntermediaireScalarFieldEnumSchema,CarcasseIntermediaireScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CarcasseIntermediaireFindManyArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireFindManyArgs> = z.object({
  select: CarcasseIntermediaireSelectSchema.optional(),
  include: CarcasseIntermediaireIncludeSchema.optional(),
  where: CarcasseIntermediaireWhereInputSchema.optional(),
  orderBy: z.union([ CarcasseIntermediaireOrderByWithRelationInputSchema.array(),CarcasseIntermediaireOrderByWithRelationInputSchema ]).optional(),
  cursor: CarcasseIntermediaireWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ CarcasseIntermediaireScalarFieldEnumSchema,CarcasseIntermediaireScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const CarcasseIntermediaireAggregateArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireAggregateArgs> = z.object({
  where: CarcasseIntermediaireWhereInputSchema.optional(),
  orderBy: z.union([ CarcasseIntermediaireOrderByWithRelationInputSchema.array(),CarcasseIntermediaireOrderByWithRelationInputSchema ]).optional(),
  cursor: CarcasseIntermediaireWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CarcasseIntermediaireGroupByArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireGroupByArgs> = z.object({
  where: CarcasseIntermediaireWhereInputSchema.optional(),
  orderBy: z.union([ CarcasseIntermediaireOrderByWithAggregationInputSchema.array(),CarcasseIntermediaireOrderByWithAggregationInputSchema ]).optional(),
  by: CarcasseIntermediaireScalarFieldEnumSchema.array(),
  having: CarcasseIntermediaireScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const CarcasseIntermediaireFindUniqueArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireFindUniqueArgs> = z.object({
  select: CarcasseIntermediaireSelectSchema.optional(),
  include: CarcasseIntermediaireIncludeSchema.optional(),
  where: CarcasseIntermediaireWhereUniqueInputSchema,
}).strict() ;

export const CarcasseIntermediaireFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireFindUniqueOrThrowArgs> = z.object({
  select: CarcasseIntermediaireSelectSchema.optional(),
  include: CarcasseIntermediaireIncludeSchema.optional(),
  where: CarcasseIntermediaireWhereUniqueInputSchema,
}).strict() ;

export const NotificationLogFindFirstArgsSchema: z.ZodType<Prisma.NotificationLogFindFirstArgs> = z.object({
  select: NotificationLogSelectSchema.optional(),
  include: NotificationLogIncludeSchema.optional(),
  where: NotificationLogWhereInputSchema.optional(),
  orderBy: z.union([ NotificationLogOrderByWithRelationInputSchema.array(),NotificationLogOrderByWithRelationInputSchema ]).optional(),
  cursor: NotificationLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NotificationLogScalarFieldEnumSchema,NotificationLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NotificationLogFindFirstOrThrowArgsSchema: z.ZodType<Prisma.NotificationLogFindFirstOrThrowArgs> = z.object({
  select: NotificationLogSelectSchema.optional(),
  include: NotificationLogIncludeSchema.optional(),
  where: NotificationLogWhereInputSchema.optional(),
  orderBy: z.union([ NotificationLogOrderByWithRelationInputSchema.array(),NotificationLogOrderByWithRelationInputSchema ]).optional(),
  cursor: NotificationLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NotificationLogScalarFieldEnumSchema,NotificationLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NotificationLogFindManyArgsSchema: z.ZodType<Prisma.NotificationLogFindManyArgs> = z.object({
  select: NotificationLogSelectSchema.optional(),
  include: NotificationLogIncludeSchema.optional(),
  where: NotificationLogWhereInputSchema.optional(),
  orderBy: z.union([ NotificationLogOrderByWithRelationInputSchema.array(),NotificationLogOrderByWithRelationInputSchema ]).optional(),
  cursor: NotificationLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ NotificationLogScalarFieldEnumSchema,NotificationLogScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const NotificationLogAggregateArgsSchema: z.ZodType<Prisma.NotificationLogAggregateArgs> = z.object({
  where: NotificationLogWhereInputSchema.optional(),
  orderBy: z.union([ NotificationLogOrderByWithRelationInputSchema.array(),NotificationLogOrderByWithRelationInputSchema ]).optional(),
  cursor: NotificationLogWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const NotificationLogGroupByArgsSchema: z.ZodType<Prisma.NotificationLogGroupByArgs> = z.object({
  where: NotificationLogWhereInputSchema.optional(),
  orderBy: z.union([ NotificationLogOrderByWithAggregationInputSchema.array(),NotificationLogOrderByWithAggregationInputSchema ]).optional(),
  by: NotificationLogScalarFieldEnumSchema.array(),
  having: NotificationLogScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const NotificationLogFindUniqueArgsSchema: z.ZodType<Prisma.NotificationLogFindUniqueArgs> = z.object({
  select: NotificationLogSelectSchema.optional(),
  include: NotificationLogIncludeSchema.optional(),
  where: NotificationLogWhereUniqueInputSchema,
}).strict() ;

export const NotificationLogFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.NotificationLogFindUniqueOrThrowArgs> = z.object({
  select: NotificationLogSelectSchema.optional(),
  include: NotificationLogIncludeSchema.optional(),
  where: NotificationLogWhereUniqueInputSchema,
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const EntityCreateArgsSchema: z.ZodType<Prisma.EntityCreateArgs> = z.object({
  select: EntitySelectSchema.optional(),
  include: EntityIncludeSchema.optional(),
  data: z.union([ EntityCreateInputSchema,EntityUncheckedCreateInputSchema ]),
}).strict() ;

export const EntityUpsertArgsSchema: z.ZodType<Prisma.EntityUpsertArgs> = z.object({
  select: EntitySelectSchema.optional(),
  include: EntityIncludeSchema.optional(),
  where: EntityWhereUniqueInputSchema,
  create: z.union([ EntityCreateInputSchema,EntityUncheckedCreateInputSchema ]),
  update: z.union([ EntityUpdateInputSchema,EntityUncheckedUpdateInputSchema ]),
}).strict() ;

export const EntityCreateManyArgsSchema: z.ZodType<Prisma.EntityCreateManyArgs> = z.object({
  data: z.union([ EntityCreateManyInputSchema,EntityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EntityCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EntityCreateManyAndReturnArgs> = z.object({
  data: z.union([ EntityCreateManyInputSchema,EntityCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EntityDeleteArgsSchema: z.ZodType<Prisma.EntityDeleteArgs> = z.object({
  select: EntitySelectSchema.optional(),
  include: EntityIncludeSchema.optional(),
  where: EntityWhereUniqueInputSchema,
}).strict() ;

export const EntityUpdateArgsSchema: z.ZodType<Prisma.EntityUpdateArgs> = z.object({
  select: EntitySelectSchema.optional(),
  include: EntityIncludeSchema.optional(),
  data: z.union([ EntityUpdateInputSchema,EntityUncheckedUpdateInputSchema ]),
  where: EntityWhereUniqueInputSchema,
}).strict() ;

export const EntityUpdateManyArgsSchema: z.ZodType<Prisma.EntityUpdateManyArgs> = z.object({
  data: z.union([ EntityUpdateManyMutationInputSchema,EntityUncheckedUpdateManyInputSchema ]),
  where: EntityWhereInputSchema.optional(),
}).strict() ;

export const EntityDeleteManyArgsSchema: z.ZodType<Prisma.EntityDeleteManyArgs> = z.object({
  where: EntityWhereInputSchema.optional(),
}).strict() ;

export const PasswordCreateArgsSchema: z.ZodType<Prisma.PasswordCreateArgs> = z.object({
  select: PasswordSelectSchema.optional(),
  include: PasswordIncludeSchema.optional(),
  data: z.union([ PasswordCreateInputSchema,PasswordUncheckedCreateInputSchema ]),
}).strict() ;

export const PasswordUpsertArgsSchema: z.ZodType<Prisma.PasswordUpsertArgs> = z.object({
  select: PasswordSelectSchema.optional(),
  include: PasswordIncludeSchema.optional(),
  where: PasswordWhereUniqueInputSchema,
  create: z.union([ PasswordCreateInputSchema,PasswordUncheckedCreateInputSchema ]),
  update: z.union([ PasswordUpdateInputSchema,PasswordUncheckedUpdateInputSchema ]),
}).strict() ;

export const PasswordCreateManyArgsSchema: z.ZodType<Prisma.PasswordCreateManyArgs> = z.object({
  data: z.union([ PasswordCreateManyInputSchema,PasswordCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PasswordCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PasswordCreateManyAndReturnArgs> = z.object({
  data: z.union([ PasswordCreateManyInputSchema,PasswordCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PasswordDeleteArgsSchema: z.ZodType<Prisma.PasswordDeleteArgs> = z.object({
  select: PasswordSelectSchema.optional(),
  include: PasswordIncludeSchema.optional(),
  where: PasswordWhereUniqueInputSchema,
}).strict() ;

export const PasswordUpdateArgsSchema: z.ZodType<Prisma.PasswordUpdateArgs> = z.object({
  select: PasswordSelectSchema.optional(),
  include: PasswordIncludeSchema.optional(),
  data: z.union([ PasswordUpdateInputSchema,PasswordUncheckedUpdateInputSchema ]),
  where: PasswordWhereUniqueInputSchema,
}).strict() ;

export const PasswordUpdateManyArgsSchema: z.ZodType<Prisma.PasswordUpdateManyArgs> = z.object({
  data: z.union([ PasswordUpdateManyMutationInputSchema,PasswordUncheckedUpdateManyInputSchema ]),
  where: PasswordWhereInputSchema.optional(),
}).strict() ;

export const PasswordDeleteManyArgsSchema: z.ZodType<Prisma.PasswordDeleteManyArgs> = z.object({
  where: PasswordWhereInputSchema.optional(),
}).strict() ;

export const UserRelationsCreateArgsSchema: z.ZodType<Prisma.UserRelationsCreateArgs> = z.object({
  select: UserRelationsSelectSchema.optional(),
  include: UserRelationsIncludeSchema.optional(),
  data: z.union([ UserRelationsCreateInputSchema,UserRelationsUncheckedCreateInputSchema ]),
}).strict() ;

export const UserRelationsUpsertArgsSchema: z.ZodType<Prisma.UserRelationsUpsertArgs> = z.object({
  select: UserRelationsSelectSchema.optional(),
  include: UserRelationsIncludeSchema.optional(),
  where: UserRelationsWhereUniqueInputSchema,
  create: z.union([ UserRelationsCreateInputSchema,UserRelationsUncheckedCreateInputSchema ]),
  update: z.union([ UserRelationsUpdateInputSchema,UserRelationsUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserRelationsCreateManyArgsSchema: z.ZodType<Prisma.UserRelationsCreateManyArgs> = z.object({
  data: z.union([ UserRelationsCreateManyInputSchema,UserRelationsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserRelationsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserRelationsCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserRelationsCreateManyInputSchema,UserRelationsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserRelationsDeleteArgsSchema: z.ZodType<Prisma.UserRelationsDeleteArgs> = z.object({
  select: UserRelationsSelectSchema.optional(),
  include: UserRelationsIncludeSchema.optional(),
  where: UserRelationsWhereUniqueInputSchema,
}).strict() ;

export const UserRelationsUpdateArgsSchema: z.ZodType<Prisma.UserRelationsUpdateArgs> = z.object({
  select: UserRelationsSelectSchema.optional(),
  include: UserRelationsIncludeSchema.optional(),
  data: z.union([ UserRelationsUpdateInputSchema,UserRelationsUncheckedUpdateInputSchema ]),
  where: UserRelationsWhereUniqueInputSchema,
}).strict() ;

export const UserRelationsUpdateManyArgsSchema: z.ZodType<Prisma.UserRelationsUpdateManyArgs> = z.object({
  data: z.union([ UserRelationsUpdateManyMutationInputSchema,UserRelationsUncheckedUpdateManyInputSchema ]),
  where: UserRelationsWhereInputSchema.optional(),
}).strict() ;

export const UserRelationsDeleteManyArgsSchema: z.ZodType<Prisma.UserRelationsDeleteManyArgs> = z.object({
  where: UserRelationsWhereInputSchema.optional(),
}).strict() ;

export const EntityRelationsCreateArgsSchema: z.ZodType<Prisma.EntityRelationsCreateArgs> = z.object({
  select: EntityRelationsSelectSchema.optional(),
  include: EntityRelationsIncludeSchema.optional(),
  data: z.union([ EntityRelationsCreateInputSchema,EntityRelationsUncheckedCreateInputSchema ]),
}).strict() ;

export const EntityRelationsUpsertArgsSchema: z.ZodType<Prisma.EntityRelationsUpsertArgs> = z.object({
  select: EntityRelationsSelectSchema.optional(),
  include: EntityRelationsIncludeSchema.optional(),
  where: EntityRelationsWhereUniqueInputSchema,
  create: z.union([ EntityRelationsCreateInputSchema,EntityRelationsUncheckedCreateInputSchema ]),
  update: z.union([ EntityRelationsUpdateInputSchema,EntityRelationsUncheckedUpdateInputSchema ]),
}).strict() ;

export const EntityRelationsCreateManyArgsSchema: z.ZodType<Prisma.EntityRelationsCreateManyArgs> = z.object({
  data: z.union([ EntityRelationsCreateManyInputSchema,EntityRelationsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EntityRelationsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EntityRelationsCreateManyAndReturnArgs> = z.object({
  data: z.union([ EntityRelationsCreateManyInputSchema,EntityRelationsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EntityRelationsDeleteArgsSchema: z.ZodType<Prisma.EntityRelationsDeleteArgs> = z.object({
  select: EntityRelationsSelectSchema.optional(),
  include: EntityRelationsIncludeSchema.optional(),
  where: EntityRelationsWhereUniqueInputSchema,
}).strict() ;

export const EntityRelationsUpdateArgsSchema: z.ZodType<Prisma.EntityRelationsUpdateArgs> = z.object({
  select: EntityRelationsSelectSchema.optional(),
  include: EntityRelationsIncludeSchema.optional(),
  data: z.union([ EntityRelationsUpdateInputSchema,EntityRelationsUncheckedUpdateInputSchema ]),
  where: EntityRelationsWhereUniqueInputSchema,
}).strict() ;

export const EntityRelationsUpdateManyArgsSchema: z.ZodType<Prisma.EntityRelationsUpdateManyArgs> = z.object({
  data: z.union([ EntityRelationsUpdateManyMutationInputSchema,EntityRelationsUncheckedUpdateManyInputSchema ]),
  where: EntityRelationsWhereInputSchema.optional(),
}).strict() ;

export const EntityRelationsDeleteManyArgsSchema: z.ZodType<Prisma.EntityRelationsDeleteManyArgs> = z.object({
  where: EntityRelationsWhereInputSchema.optional(),
}).strict() ;

export const LogsCreateArgsSchema: z.ZodType<Prisma.LogsCreateArgs> = z.object({
  select: LogsSelectSchema.optional(),
  include: LogsIncludeSchema.optional(),
  data: z.union([ LogsCreateInputSchema,LogsUncheckedCreateInputSchema ]),
}).strict() ;

export const LogsUpsertArgsSchema: z.ZodType<Prisma.LogsUpsertArgs> = z.object({
  select: LogsSelectSchema.optional(),
  include: LogsIncludeSchema.optional(),
  where: LogsWhereUniqueInputSchema,
  create: z.union([ LogsCreateInputSchema,LogsUncheckedCreateInputSchema ]),
  update: z.union([ LogsUpdateInputSchema,LogsUncheckedUpdateInputSchema ]),
}).strict() ;

export const LogsCreateManyArgsSchema: z.ZodType<Prisma.LogsCreateManyArgs> = z.object({
  data: z.union([ LogsCreateManyInputSchema,LogsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LogsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.LogsCreateManyAndReturnArgs> = z.object({
  data: z.union([ LogsCreateManyInputSchema,LogsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LogsDeleteArgsSchema: z.ZodType<Prisma.LogsDeleteArgs> = z.object({
  select: LogsSelectSchema.optional(),
  include: LogsIncludeSchema.optional(),
  where: LogsWhereUniqueInputSchema,
}).strict() ;

export const LogsUpdateArgsSchema: z.ZodType<Prisma.LogsUpdateArgs> = z.object({
  select: LogsSelectSchema.optional(),
  include: LogsIncludeSchema.optional(),
  data: z.union([ LogsUpdateInputSchema,LogsUncheckedUpdateInputSchema ]),
  where: LogsWhereUniqueInputSchema,
}).strict() ;

export const LogsUpdateManyArgsSchema: z.ZodType<Prisma.LogsUpdateManyArgs> = z.object({
  data: z.union([ LogsUpdateManyMutationInputSchema,LogsUncheckedUpdateManyInputSchema ]),
  where: LogsWhereInputSchema.optional(),
}).strict() ;

export const LogsDeleteManyArgsSchema: z.ZodType<Prisma.LogsDeleteManyArgs> = z.object({
  where: LogsWhereInputSchema.optional(),
}).strict() ;

export const FeiCreateArgsSchema: z.ZodType<Prisma.FeiCreateArgs> = z.object({
  select: FeiSelectSchema.optional(),
  include: FeiIncludeSchema.optional(),
  data: z.union([ FeiCreateInputSchema,FeiUncheckedCreateInputSchema ]),
}).strict() ;

export const FeiUpsertArgsSchema: z.ZodType<Prisma.FeiUpsertArgs> = z.object({
  select: FeiSelectSchema.optional(),
  include: FeiIncludeSchema.optional(),
  where: FeiWhereUniqueInputSchema,
  create: z.union([ FeiCreateInputSchema,FeiUncheckedCreateInputSchema ]),
  update: z.union([ FeiUpdateInputSchema,FeiUncheckedUpdateInputSchema ]),
}).strict() ;

export const FeiCreateManyArgsSchema: z.ZodType<Prisma.FeiCreateManyArgs> = z.object({
  data: z.union([ FeiCreateManyInputSchema,FeiCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FeiCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FeiCreateManyAndReturnArgs> = z.object({
  data: z.union([ FeiCreateManyInputSchema,FeiCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FeiDeleteArgsSchema: z.ZodType<Prisma.FeiDeleteArgs> = z.object({
  select: FeiSelectSchema.optional(),
  include: FeiIncludeSchema.optional(),
  where: FeiWhereUniqueInputSchema,
}).strict() ;

export const FeiUpdateArgsSchema: z.ZodType<Prisma.FeiUpdateArgs> = z.object({
  select: FeiSelectSchema.optional(),
  include: FeiIncludeSchema.optional(),
  data: z.union([ FeiUpdateInputSchema,FeiUncheckedUpdateInputSchema ]),
  where: FeiWhereUniqueInputSchema,
}).strict() ;

export const FeiUpdateManyArgsSchema: z.ZodType<Prisma.FeiUpdateManyArgs> = z.object({
  data: z.union([ FeiUpdateManyMutationInputSchema,FeiUncheckedUpdateManyInputSchema ]),
  where: FeiWhereInputSchema.optional(),
}).strict() ;

export const FeiDeleteManyArgsSchema: z.ZodType<Prisma.FeiDeleteManyArgs> = z.object({
  where: FeiWhereInputSchema.optional(),
}).strict() ;

export const CarcasseCreateArgsSchema: z.ZodType<Prisma.CarcasseCreateArgs> = z.object({
  select: CarcasseSelectSchema.optional(),
  include: CarcasseIncludeSchema.optional(),
  data: z.union([ CarcasseCreateInputSchema,CarcasseUncheckedCreateInputSchema ]),
}).strict() ;

export const CarcasseUpsertArgsSchema: z.ZodType<Prisma.CarcasseUpsertArgs> = z.object({
  select: CarcasseSelectSchema.optional(),
  include: CarcasseIncludeSchema.optional(),
  where: CarcasseWhereUniqueInputSchema,
  create: z.union([ CarcasseCreateInputSchema,CarcasseUncheckedCreateInputSchema ]),
  update: z.union([ CarcasseUpdateInputSchema,CarcasseUncheckedUpdateInputSchema ]),
}).strict() ;

export const CarcasseCreateManyArgsSchema: z.ZodType<Prisma.CarcasseCreateManyArgs> = z.object({
  data: z.union([ CarcasseCreateManyInputSchema,CarcasseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CarcasseCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CarcasseCreateManyAndReturnArgs> = z.object({
  data: z.union([ CarcasseCreateManyInputSchema,CarcasseCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CarcasseDeleteArgsSchema: z.ZodType<Prisma.CarcasseDeleteArgs> = z.object({
  select: CarcasseSelectSchema.optional(),
  include: CarcasseIncludeSchema.optional(),
  where: CarcasseWhereUniqueInputSchema,
}).strict() ;

export const CarcasseUpdateArgsSchema: z.ZodType<Prisma.CarcasseUpdateArgs> = z.object({
  select: CarcasseSelectSchema.optional(),
  include: CarcasseIncludeSchema.optional(),
  data: z.union([ CarcasseUpdateInputSchema,CarcasseUncheckedUpdateInputSchema ]),
  where: CarcasseWhereUniqueInputSchema,
}).strict() ;

export const CarcasseUpdateManyArgsSchema: z.ZodType<Prisma.CarcasseUpdateManyArgs> = z.object({
  data: z.union([ CarcasseUpdateManyMutationInputSchema,CarcasseUncheckedUpdateManyInputSchema ]),
  where: CarcasseWhereInputSchema.optional(),
}).strict() ;

export const CarcasseDeleteManyArgsSchema: z.ZodType<Prisma.CarcasseDeleteManyArgs> = z.object({
  where: CarcasseWhereInputSchema.optional(),
}).strict() ;

export const InterventionOnFeiCreateArgsSchema: z.ZodType<Prisma.InterventionOnFeiCreateArgs> = z.object({
  select: InterventionOnFeiSelectSchema.optional(),
  include: InterventionOnFeiIncludeSchema.optional(),
  data: z.union([ InterventionOnFeiCreateInputSchema,InterventionOnFeiUncheckedCreateInputSchema ]),
}).strict() ;

export const InterventionOnFeiUpsertArgsSchema: z.ZodType<Prisma.InterventionOnFeiUpsertArgs> = z.object({
  select: InterventionOnFeiSelectSchema.optional(),
  include: InterventionOnFeiIncludeSchema.optional(),
  where: InterventionOnFeiWhereUniqueInputSchema,
  create: z.union([ InterventionOnFeiCreateInputSchema,InterventionOnFeiUncheckedCreateInputSchema ]),
  update: z.union([ InterventionOnFeiUpdateInputSchema,InterventionOnFeiUncheckedUpdateInputSchema ]),
}).strict() ;

export const InterventionOnFeiCreateManyArgsSchema: z.ZodType<Prisma.InterventionOnFeiCreateManyArgs> = z.object({
  data: z.union([ InterventionOnFeiCreateManyInputSchema,InterventionOnFeiCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InterventionOnFeiCreateManyAndReturnArgsSchema: z.ZodType<Prisma.InterventionOnFeiCreateManyAndReturnArgs> = z.object({
  data: z.union([ InterventionOnFeiCreateManyInputSchema,InterventionOnFeiCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const InterventionOnFeiDeleteArgsSchema: z.ZodType<Prisma.InterventionOnFeiDeleteArgs> = z.object({
  select: InterventionOnFeiSelectSchema.optional(),
  include: InterventionOnFeiIncludeSchema.optional(),
  where: InterventionOnFeiWhereUniqueInputSchema,
}).strict() ;

export const InterventionOnFeiUpdateArgsSchema: z.ZodType<Prisma.InterventionOnFeiUpdateArgs> = z.object({
  select: InterventionOnFeiSelectSchema.optional(),
  include: InterventionOnFeiIncludeSchema.optional(),
  data: z.union([ InterventionOnFeiUpdateInputSchema,InterventionOnFeiUncheckedUpdateInputSchema ]),
  where: InterventionOnFeiWhereUniqueInputSchema,
}).strict() ;

export const InterventionOnFeiUpdateManyArgsSchema: z.ZodType<Prisma.InterventionOnFeiUpdateManyArgs> = z.object({
  data: z.union([ InterventionOnFeiUpdateManyMutationInputSchema,InterventionOnFeiUncheckedUpdateManyInputSchema ]),
  where: InterventionOnFeiWhereInputSchema.optional(),
}).strict() ;

export const InterventionOnFeiDeleteManyArgsSchema: z.ZodType<Prisma.InterventionOnFeiDeleteManyArgs> = z.object({
  where: InterventionOnFeiWhereInputSchema.optional(),
}).strict() ;

export const FeiIntermediaireCreateArgsSchema: z.ZodType<Prisma.FeiIntermediaireCreateArgs> = z.object({
  select: FeiIntermediaireSelectSchema.optional(),
  include: FeiIntermediaireIncludeSchema.optional(),
  data: z.union([ FeiIntermediaireCreateInputSchema,FeiIntermediaireUncheckedCreateInputSchema ]),
}).strict() ;

export const FeiIntermediaireUpsertArgsSchema: z.ZodType<Prisma.FeiIntermediaireUpsertArgs> = z.object({
  select: FeiIntermediaireSelectSchema.optional(),
  include: FeiIntermediaireIncludeSchema.optional(),
  where: FeiIntermediaireWhereUniqueInputSchema,
  create: z.union([ FeiIntermediaireCreateInputSchema,FeiIntermediaireUncheckedCreateInputSchema ]),
  update: z.union([ FeiIntermediaireUpdateInputSchema,FeiIntermediaireUncheckedUpdateInputSchema ]),
}).strict() ;

export const FeiIntermediaireCreateManyArgsSchema: z.ZodType<Prisma.FeiIntermediaireCreateManyArgs> = z.object({
  data: z.union([ FeiIntermediaireCreateManyInputSchema,FeiIntermediaireCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FeiIntermediaireCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FeiIntermediaireCreateManyAndReturnArgs> = z.object({
  data: z.union([ FeiIntermediaireCreateManyInputSchema,FeiIntermediaireCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FeiIntermediaireDeleteArgsSchema: z.ZodType<Prisma.FeiIntermediaireDeleteArgs> = z.object({
  select: FeiIntermediaireSelectSchema.optional(),
  include: FeiIntermediaireIncludeSchema.optional(),
  where: FeiIntermediaireWhereUniqueInputSchema,
}).strict() ;

export const FeiIntermediaireUpdateArgsSchema: z.ZodType<Prisma.FeiIntermediaireUpdateArgs> = z.object({
  select: FeiIntermediaireSelectSchema.optional(),
  include: FeiIntermediaireIncludeSchema.optional(),
  data: z.union([ FeiIntermediaireUpdateInputSchema,FeiIntermediaireUncheckedUpdateInputSchema ]),
  where: FeiIntermediaireWhereUniqueInputSchema,
}).strict() ;

export const FeiIntermediaireUpdateManyArgsSchema: z.ZodType<Prisma.FeiIntermediaireUpdateManyArgs> = z.object({
  data: z.union([ FeiIntermediaireUpdateManyMutationInputSchema,FeiIntermediaireUncheckedUpdateManyInputSchema ]),
  where: FeiIntermediaireWhereInputSchema.optional(),
}).strict() ;

export const FeiIntermediaireDeleteManyArgsSchema: z.ZodType<Prisma.FeiIntermediaireDeleteManyArgs> = z.object({
  where: FeiIntermediaireWhereInputSchema.optional(),
}).strict() ;

export const CarcasseIntermediaireCreateArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateArgs> = z.object({
  select: CarcasseIntermediaireSelectSchema.optional(),
  include: CarcasseIntermediaireIncludeSchema.optional(),
  data: z.union([ CarcasseIntermediaireCreateInputSchema,CarcasseIntermediaireUncheckedCreateInputSchema ]),
}).strict() ;

export const CarcasseIntermediaireUpsertArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireUpsertArgs> = z.object({
  select: CarcasseIntermediaireSelectSchema.optional(),
  include: CarcasseIntermediaireIncludeSchema.optional(),
  where: CarcasseIntermediaireWhereUniqueInputSchema,
  create: z.union([ CarcasseIntermediaireCreateInputSchema,CarcasseIntermediaireUncheckedCreateInputSchema ]),
  update: z.union([ CarcasseIntermediaireUpdateInputSchema,CarcasseIntermediaireUncheckedUpdateInputSchema ]),
}).strict() ;

export const CarcasseIntermediaireCreateManyArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateManyArgs> = z.object({
  data: z.union([ CarcasseIntermediaireCreateManyInputSchema,CarcasseIntermediaireCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CarcasseIntermediaireCreateManyAndReturnArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireCreateManyAndReturnArgs> = z.object({
  data: z.union([ CarcasseIntermediaireCreateManyInputSchema,CarcasseIntermediaireCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const CarcasseIntermediaireDeleteArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireDeleteArgs> = z.object({
  select: CarcasseIntermediaireSelectSchema.optional(),
  include: CarcasseIntermediaireIncludeSchema.optional(),
  where: CarcasseIntermediaireWhereUniqueInputSchema,
}).strict() ;

export const CarcasseIntermediaireUpdateArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateArgs> = z.object({
  select: CarcasseIntermediaireSelectSchema.optional(),
  include: CarcasseIntermediaireIncludeSchema.optional(),
  data: z.union([ CarcasseIntermediaireUpdateInputSchema,CarcasseIntermediaireUncheckedUpdateInputSchema ]),
  where: CarcasseIntermediaireWhereUniqueInputSchema,
}).strict() ;

export const CarcasseIntermediaireUpdateManyArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireUpdateManyArgs> = z.object({
  data: z.union([ CarcasseIntermediaireUpdateManyMutationInputSchema,CarcasseIntermediaireUncheckedUpdateManyInputSchema ]),
  where: CarcasseIntermediaireWhereInputSchema.optional(),
}).strict() ;

export const CarcasseIntermediaireDeleteManyArgsSchema: z.ZodType<Prisma.CarcasseIntermediaireDeleteManyArgs> = z.object({
  where: CarcasseIntermediaireWhereInputSchema.optional(),
}).strict() ;

export const NotificationLogCreateArgsSchema: z.ZodType<Prisma.NotificationLogCreateArgs> = z.object({
  select: NotificationLogSelectSchema.optional(),
  include: NotificationLogIncludeSchema.optional(),
  data: z.union([ NotificationLogCreateInputSchema,NotificationLogUncheckedCreateInputSchema ]),
}).strict() ;

export const NotificationLogUpsertArgsSchema: z.ZodType<Prisma.NotificationLogUpsertArgs> = z.object({
  select: NotificationLogSelectSchema.optional(),
  include: NotificationLogIncludeSchema.optional(),
  where: NotificationLogWhereUniqueInputSchema,
  create: z.union([ NotificationLogCreateInputSchema,NotificationLogUncheckedCreateInputSchema ]),
  update: z.union([ NotificationLogUpdateInputSchema,NotificationLogUncheckedUpdateInputSchema ]),
}).strict() ;

export const NotificationLogCreateManyArgsSchema: z.ZodType<Prisma.NotificationLogCreateManyArgs> = z.object({
  data: z.union([ NotificationLogCreateManyInputSchema,NotificationLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const NotificationLogCreateManyAndReturnArgsSchema: z.ZodType<Prisma.NotificationLogCreateManyAndReturnArgs> = z.object({
  data: z.union([ NotificationLogCreateManyInputSchema,NotificationLogCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const NotificationLogDeleteArgsSchema: z.ZodType<Prisma.NotificationLogDeleteArgs> = z.object({
  select: NotificationLogSelectSchema.optional(),
  include: NotificationLogIncludeSchema.optional(),
  where: NotificationLogWhereUniqueInputSchema,
}).strict() ;

export const NotificationLogUpdateArgsSchema: z.ZodType<Prisma.NotificationLogUpdateArgs> = z.object({
  select: NotificationLogSelectSchema.optional(),
  include: NotificationLogIncludeSchema.optional(),
  data: z.union([ NotificationLogUpdateInputSchema,NotificationLogUncheckedUpdateInputSchema ]),
  where: NotificationLogWhereUniqueInputSchema,
}).strict() ;

export const NotificationLogUpdateManyArgsSchema: z.ZodType<Prisma.NotificationLogUpdateManyArgs> = z.object({
  data: z.union([ NotificationLogUpdateManyMutationInputSchema,NotificationLogUncheckedUpdateManyInputSchema ]),
  where: NotificationLogWhereInputSchema.optional(),
}).strict() ;

export const NotificationLogDeleteManyArgsSchema: z.ZodType<Prisma.NotificationLogDeleteManyArgs> = z.object({
  where: NotificationLogWhereInputSchema.optional(),
}).strict() ;