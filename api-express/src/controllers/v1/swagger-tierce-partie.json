{
  "openapi": "3.0.0",
  "info": {
    "title": "API Zacharie v1 - Accès Tiers",
    "description": "API REST pour l'accès aux données utilisateur avec consentement. Utilisez cette API si vous développez une application qui doit accéder aux données Zacharie au nom de vos utilisateurs.",
    "version": "1.0.0",
    "contact": {
      "url": "https://zacharie.beta.gouv.fr/contact"
    }
  },
  "servers": [
    {
      "url": "/v1",
      "description": "Chemin de base de l'API v1"
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Authentification par clé API. Utilisez 'Bearer VOTRE_CLE_API'"
      },
      "WebhookAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Authentification webhook. Zacharie enverra 'Bearer VOTRE_CLE_API' à votre endpoint"
      }
    },
    "schemas": {
      "ApprovalRequestResponse": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "description": "Indique si la requête s'est bien déroulée"
          },
          "data": {
            "type": "object",
            "properties": {
              "approvalStatus": {
                "type": "string",
                "enum": ["PENDING", "APPROVED", "REJECTED"],
                "description": "Statut de la demande d'approbation"
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Message informatif"
          }
        }
      },
      "AccessTokenResponse": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "description": "Indique si la requête s'est bien déroulée"
          },
          "data": {
            "type": "object",
            "properties": {
              "accessToken": {
                "type": "string",
                "description": "Token d'accès généré pour l'utilisateur"
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Message informatif avec exemple d'utilisation"
          }
        }
      },
      "FeiResponse": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "description": "Indique si la requête s'est bien déroulée"
          },
          "data": {
            "type": "object",
            "properties": {
              "feis": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Fei"
                },
                "description": "Liste des fiches d'examen initial"
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Message informatif"
          }
        }
      },
      "CarcasseResponse": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "description": "Indique si la requête s'est bien déroulée"
          },
          "data": {
            "type": "object",
            "properties": {
              "carcasse": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Carcasse"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Données de la carcasse ou null si non trouvée"
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Message informatif"
          }
        }
      },
      "CarcassesResponse": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "description": "Indique si la requête s'est bien déroulée"
          },
          "data": {
            "type": "object",
            "properties": {
              "carcasses": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Carcasse"
                },
                "description": "Liste des carcasses"
              }
            }
          },
          "message": {
            "type": "string",
            "description": "Message informatif"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "boolean",
            "example": false,
            "description": "Toujours false en cas d'erreur"
          },
          "error": {
            "type": "string",
            "description": "Message d'erreur"
          },
          "message": {
            "type": "string",
            "description": "Message informatif additionnel"
          }
        }
      },
      "Fei": {
        "type": "object",
        "description": "Données complètes d'une fiche d'examen initial accessible avec le consentement de l'utilisateur",
        "properties": {
          "numero": {
            "type": "string",
            "description": "Numéro unique de la FEI"
          },
          "date_mise_a_mort": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date de mise à mort (format: AAAA-MM-JJ)"
          },
          "commune_mise_a_mort": {
            "type": "string",
            "nullable": true,
            "description": "Commune de mise à mort"
          },
          "heure_mise_a_mort_premiere_carcasse": {
            "type": "string",
            "nullable": true,
            "description": "Heure de mise à mort de la première carcasse"
          },
          "heure_evisceration_derniere_carcasse": {
            "type": "string",
            "nullable": true,
            "description": "Heure d'éviscération de la dernière carcasse"
          },
          "resume_nombre_de_carcasses": {
            "type": "string",
            "nullable": true,
            "description": "Résumé du nombre de carcasses"
          },
          "examinateur_initial_name": {
            "type": "string",
            "description": "Nom complet de l'examinateur initial"
          },
          "examinateur_initial_approbation_mise_sur_le_marche": {
            "type": "boolean",
            "nullable": true,
            "description": "Approbation de mise sur le marché par l'examinateur initial"
          },
          "examinateur_initial_date_approbation_mise_sur_le_marche": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date d'approbation de mise sur le marché"
          },
          "premier_detenteur_name": {
            "type": "string",
            "description": "Nom du premier détenteur"
          },
          "premier_detenteur_depot_type": {
            "type": "string",
            "enum": ["CCG", "ETG", "AUCUN"],
            "nullable": true,
            "description": "Type de dépôt du premier détenteur"
          },
          "premier_detenteur_depot_name": {
            "type": "string",
            "nullable": true,
            "description": "Nom de l'entité de dépôt"
          },
          "premier_detenteur_depot_ccg_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de dépôt CCG"
          },
          "premier_detenteur_transport_type": {
            "type": "string",
            "enum": ["PREMIER_DETENTEUR", "ETG", "COLLECTEUR_PRO", "AUCUN"],
            "nullable": true,
            "description": "Type de transport"
          },
          "premier_detenteur_transport_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de transport"
          },
          "premier_detenteur_prochain_detenteur_name": {
            "type": "string",
            "description": "Nom du prochain détenteur"
          },
          "premier_detenteur_prochain_detenteur_role": {
            "type": "string",
            "description": "Rôle du prochain détenteur"
          },
          "intermediaire_closed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de fermeture par l'intermédiaire"
          },
          "intermediaire_closed_by_name": {
            "type": "string",
            "description": "Nom de l'entité qui a fermé l'intermédiaire"
          },
          "latest_intermediaire_name": {
            "type": "string",
            "description": "Nom du dernier intermédiaire"
          },
          "svi_assigned_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date d'assignation au SVI"
          },
          "svi_entity_name": {
            "type": "string",
            "nullable": true,
            "description": "Nom de l'entité SVI"
          },
          "svi_closed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de fermeture par le SVI"
          },
          "automatic_closed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de fermeture automatique"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date de création"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date de dernière mise à jour"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de suppression"
          },
          "carcasses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Carcasse"
            },
            "description": "Liste des carcasses associées à cette FEI"
          }
        }
      },
      "Carcasse": {
        "type": "object",
        "description": "Données complètes d'une carcasse accessible avec le consentement de l'utilisateur",
        "properties": {
          "numero_bracelet": {
            "type": "string",
            "description": "Numéro de bracelet de la carcasse"
          },
          "fei_numero": {
            "type": "string",
            "description": "Numéro de la FEI associée"
          },
          "espece": {
            "type": "string",
            "nullable": true,
            "description": "Espèce de l'animal (Sanglier, Cerf, etc.)"
          },
          "type": {
            "type": "string",
            "enum": ["PETIT_GIBIER", "GROS_GIBIER"],
            "nullable": true,
            "description": "Type de carcasse"
          },
          "nombre_d_animaux": {
            "type": "integer",
            "nullable": true,
            "description": "Nombre d'animaux"
          },
          "heure_mise_a_mort": {
            "type": "string",
            "nullable": true,
            "description": "Heure de mise à mort"
          },
          "heure_evisceration": {
            "type": "string",
            "nullable": true,
            "description": "Heure d'éviscération"
          },
          "examinateur_name": {
            "type": "string",
            "description": "Nom complet de l'examinateur"
          },
          "examinateur_carcasse_sans_anomalie": {
            "type": "boolean",
            "nullable": true,
            "description": "Carcasse sans anomalie selon l'examinateur"
          },
          "examinateur_anomalies_carcasse": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Liste des anomalies de carcasse détectées"
          },
          "examinateur_anomalies_abats": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Liste des anomalies d'abats détectées"
          },
          "examinateur_commentaire": {
            "type": "string",
            "nullable": true,
            "description": "Commentaire de l'examinateur"
          },
          "examinateur_signed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de signature par l'examinateur"
          },
          "premier_detenteur_name": {
            "type": "string",
            "description": "Nom du premier détenteur"
          },
          "premier_detenteur_depot_type": {
            "type": "string",
            "enum": ["CCG", "ETG", "AUCUN"],
            "nullable": true,
            "description": "Type de dépôt"
          },
          "premier_detenteur_depot_ccg_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de dépôt CCG"
          },
          "premier_detenteur_transport_type": {
            "type": "string",
            "enum": ["PREMIER_DETENTEUR", "ETG", "COLLECTEUR_PRO", "AUCUN"],
            "nullable": true,
            "description": "Type de transport"
          },
          "premier_detenteur_transport_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de transport"
          },
          "premier_detenteur_prochain_detenteur_role_cache": {
            "type": "string",
            "enum": ["EXAMINATEUR_INITIAL", "PREMIER_DETENTEUR", "ETG", "COLLECTEUR_PRO", "SVI"],
            "nullable": true,
            "description": "Rôle du prochain détenteur"
          },
          "latest_intermediaire_carcasse_refus_motif": {
            "type": "string",
            "nullable": true,
            "description": "Motif de refus par le dernier intermédiaire"
          },
          "latest_intermediaire_carcasse_manquante": {
            "type": "boolean",
            "nullable": true,
            "description": "Carcasse manquante selon le dernier intermédiaire"
          },
          "latest_intermediaire_decision_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de décision du dernier intermédiaire"
          },
          "latest_intermediaire_prise_en_charge_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de prise en charge par le dernier intermédiaire"
          },
          "svi_assigned_to_fei_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date d'assignation au SVI"
          },
          "carcasse_status": {
            "type": "string",
            "enum": [
              "MANQUANTE_ETG_COLLECTEUR",
              "REFUS_ETG_COLLECTEUR",
              "SANS_DECISION",
              "ACCEPTE",
              "CONSIGNE",
              "MANQUANTE_SVI",
              "SAISIE_TOTALE",
              "SAISIE_PARTIELLE",
              "LEVEE_DE_CONSIGNE",
              "TRAITEMENT_ASSAINISSANT"
            ],
            "nullable": true,
            "description": "Statut de la carcasse"
          },
          "carcasse_status_set_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de définition du statut"
          },
          "svi_ipm1_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date d'IPM1"
          },
          "svi_ipm1_presentee_inspection": {
            "type": "boolean",
            "nullable": true,
            "description": "Carcasse présentée à l'inspection IPM1"
          },
          "svi_ipm1_protocole": {
            "type": "string",
            "enum": ["STANDARD", "RENFORCE"],
            "nullable": true,
            "description": "Protocole IPM1"
          },
          "svi_ipm1_pieces": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Pièces inspectées lors de l'IPM1"
          },
          "svi_ipm1_lesions_ou_motifs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Lésions ou motifs IPM1"
          },
          "svi_ipm1_nombre_animaux": {
            "type": "integer",
            "nullable": true,
            "description": "Nombre d'animaux IPM1"
          },
          "svi_ipm1_commentaire": {
            "type": "string",
            "nullable": true,
            "description": "Commentaire IPM1"
          },
          "svi_ipm1_decision": {
            "type": "string",
            "enum": ["NON_RENSEIGNEE", "MISE_EN_CONSIGNE", "ACCEPTE"],
            "nullable": true,
            "description": "Décision IPM1"
          },
          "svi_ipm1_duree_consigne": {
            "type": "integer",
            "nullable": true,
            "description": "Durée de consigne IPM1 (en jours)"
          },
          "svi_ipm1_poids_consigne": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "description": "Poids de consigne IPM1"
          },
          "svi_ipm1_poids_type": {
            "type": "string",
            "enum": ["NON_DEPOUILLE", "DEPOUILLE", "NON_PLUMEE", "PLUMEE"],
            "nullable": true,
            "description": "Type de poids IPM1"
          },
          "svi_ipm1_signed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de signature IPM1"
          },
          "svi_ipm2_date": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date d'IPM2"
          },
          "svi_ipm2_presentee_inspection": {
            "type": "boolean",
            "nullable": true,
            "description": "Carcasse présentée à l'inspection IPM2"
          },
          "svi_ipm2_protocole": {
            "type": "string",
            "enum": ["STANDARD", "RENFORCE"],
            "nullable": true,
            "description": "Protocole IPM2"
          },
          "svi_ipm2_pieces": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Pièces inspectées lors de l'IPM2"
          },
          "svi_ipm2_lesions_ou_motifs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Lésions ou motifs IPM2"
          },
          "svi_ipm2_nombre_animaux": {
            "type": "integer",
            "nullable": true,
            "description": "Nombre d'animaux IPM2"
          },
          "svi_ipm2_commentaire": {
            "type": "string",
            "nullable": true,
            "description": "Commentaire IPM2"
          },
          "svi_ipm2_decision": {
            "type": "string",
            "enum": [
              "NON_RENSEIGNEE",
              "LEVEE_DE_LA_CONSIGNE",
              "SAISIE_TOTALE",
              "SAISIE_PARTIELLE",
              "TRAITEMENT_ASSAINISSANT"
            ],
            "nullable": true,
            "description": "Décision IPM2"
          },
          "svi_ipm2_traitement_assainissant": {
            "type": "string",
            "enum": ["CUISSON", "CONGELATION", "AUTRE"],
            "nullable": true,
            "description": "Type de traitement assainissant IPM2"
          },
          "svi_ipm2_traitement_assainissant_cuisson_temps": {
            "type": "string",
            "nullable": true,
            "description": "Temps de cuisson pour traitement assainissant"
          },
          "svi_ipm2_traitement_assainissant_cuisson_temp": {
            "type": "string",
            "nullable": true,
            "description": "Température de cuisson pour traitement assainissant"
          },
          "svi_ipm2_traitement_assainissant_congelation_temps": {
            "type": "string",
            "nullable": true,
            "description": "Temps de congélation pour traitement assainissant"
          },
          "svi_ipm2_traitement_assainissant_congelation_temp": {
            "type": "string",
            "nullable": true,
            "description": "Température de congélation pour traitement assainissant"
          },
          "svi_ipm2_traitement_assainissant_type": {
            "type": "string",
            "nullable": true,
            "description": "Type de traitement assainissant"
          },
          "svi_ipm2_traitement_assainissant_paramètres": {
            "type": "string",
            "nullable": true,
            "description": "Paramètres du traitement assainissant"
          },
          "svi_ipm2_traitement_assainissant_etablissement": {
            "type": "string",
            "nullable": true,
            "description": "Établissement de traitement assainissant"
          },
          "svi_ipm2_traitement_assainissant_poids": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "description": "Poids pour traitement assainissant"
          },
          "svi_ipm2_poids_saisie": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "description": "Poids de saisie IPM2"
          },
          "svi_ipm2_poids_type": {
            "type": "string",
            "enum": ["NON_DEPOUILLE", "DEPOUILLE", "NON_PLUMEE", "PLUMEE"],
            "nullable": true,
            "description": "Type de poids IPM2"
          },
          "svi_ipm2_signed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de signature IPM2"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date de création"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date de dernière mise à jour"
          },
          "fei_date_mise_a_mort": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "description": "Date de mise à mort de la FEI"
          },
          "fei_commune_mise_a_mort": {
            "type": "string",
            "nullable": true,
            "description": "Commune de mise à mort de la FEI"
          },
          "fei_heure_mise_a_mort_premiere_carcasse": {
            "type": "string",
            "nullable": true,
            "description": "Heure de mise à mort de la première carcasse de la FEI"
          },
          "fei_heure_evisceration_derniere_carcasse": {
            "type": "string",
            "nullable": true,
            "description": "Heure d'éviscération de la dernière carcasse de la FEI"
          },
          "fei_resume_nombre_de_carcasses": {
            "type": "string",
            "nullable": true,
            "description": "Résumé du nombre de carcasses de la FEI"
          },
          "fei_examinateur_initial_approbation_mise_sur_le_marche": {
            "type": "boolean",
            "nullable": true,
            "description": "Approbation de mise sur le marché de la FEI"
          },
          "fei_examinateur_initial_date_approbation_mise_sur_le_marche": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date d'approbation de mise sur le marché de la FEI"
          },
          "fei_automatic_closed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de fermeture automatique de la FEI"
          },
          "fei_intermediaire_closed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de fermeture par l'intermédiaire de la FEI"
          },
          "fei_svi_assigned_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date d'assignation au SVI de la FEI"
          },
          "fei_svi_closed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date de fermeture par le SVI de la FEI"
          }
        }
      },
      "WebhookPayload": {
        "type": "object",
        "description": "Payload envoyé par Zacharie lors d'événements webhook vers votre endpoint configuré",
        "properties": {
          "event": {
            "type": "string",
            "enum": [
              "FEI_APPROBATION_MISE_SUR_LE_MARCHE",
              "FEI_ASSIGNEE_AU_PROCHAIN_DETENTEUR",
              "FEI_ASSIGNEE_AU_SVI",
              "FEI_PRISE_EN_CHARGE_PAR_PROCHAIN_DETENTEUR",
              "FEI_CLOTUREE"
            ],
            "description": "Type d'événement déclenché"
          },
          "fei": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Fei"
              },
              {
                "type": "null"
              }
            ],
            "description": "Données complètes de la FEI concernée (peut être null selon l'événement)"
          },
          "carcasses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Carcasse"
            },
            "description": "Liste des carcasses concernées par l'événement"
          }
        },
        "required": ["event", "fei", "carcasses"],
        "example": {
          "event": "FEI_APPROBATION_MISE_SUR_LE_MARCHE",
          "fei": {
            "numero": "2025-01-001",
            "date_mise_a_mort": "2025-01-15",
            "commune_mise_a_mort": "Fontainebleau"
          },
          "carcasses": [
            {
              "numero_bracelet": "FR123456789",
              "espece": "Sanglier",
              "fei_numero": "2025-01-001"
            }
          ]
        }
      },
      "WebhookResponse": {
        "type": "object",
        "description": "Réponse attendue de votre endpoint webhook",
        "properties": {
          "ok": {
            "type": "boolean",
            "description": "Indique si le webhook a été traité avec succès"
          },
          "message": {
            "type": "string",
            "description": "Message optionnel de confirmation ou d'erreur"
          }
        },
        "required": ["ok"],
        "example": {
          "ok": true,
          "message": "Webhook traité avec succès"
        }
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/approval-request/user": {
      "post": {
        "summary": "Demander l'approbation d'un utilisateur",
        "description": "Permet à une application tierce de demander l'approbation d'un utilisateur pour accéder à ses données. L'utilisateur recevra une notification et pourra approuver ou rejeter la demande.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "utilisateur@example.com",
                    "description": "Email de l'utilisateur dont vous voulez demander l'approbation"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succès - Demande d'approbation envoyée",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApprovalRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Erreur de paramètres - Format d'email invalide ou utilisateur non trouvé",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Accès interdit - Clé API invalide ou non autorisée",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Approbations - Accès Tiers"]
      }
    },
    "/access-token/user": {
      "post": {
        "summary": "Générer un token d'accès pour un utilisateur",
        "description": "Génère un token d'accès temporaire pour un utilisateur qui a préalablement approuvé votre demande. Ce token peut être utilisé pour connecter automatiquement l'utilisateur à son compte Zacharie via une URL avec paramètres.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "utilisateur@example.com",
                    "description": "Email de l'utilisateur pour lequel générer le token"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succès - Token d'accès généré",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Erreur - Email invalide, utilisateur non trouvé, pas de demande d'approbation ou demande non approuvée",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Accès interdit - Clé API invalide ou non autorisée",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Token d'accès - Accès Tiers"]
      }
    },
    "/nouvelle-fiche": {
      "get": {
        "summary": "Créer une nouvelle FEI via URL (Frontend)",
        "description": "URL frontend permettant de créer automatiquement une nouvelle fiche d'examen initial (FEI) avec authentification par token d'accès. Cette URL doit être utilisée après avoir généré un token via `/access-token/user`. **Note: Cette URL pointe vers zacharie.beta.gouv.fr, pas vers l'API.**",
        "externalDocs": {
          "description": "URL complète",
          "url": "https://zacharie.beta.gouv.fr/app/nouvelle-fiche"
        },
        "parameters": [
          {
            "name": "access_token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "abc123def456..."
            },
            "description": "Token d'accès généré via /access-token/user"
          },
          {
            "name": "date_mise_a_mort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "example": "2025-01-01"
            },
            "description": "Date de mise à mort (format: YYYY-MM-DD)"
          },
          {
            "name": "commune_mise_a_mort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "Paris"
            },
            "description": "Commune de mise à mort"
          },
          {
            "name": "heure_mise_a_mort_premiere_carcasse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
              "example": "10:00"
            },
            "description": "Heure de mise à mort de la première carcasse (format: HH:mm)"
          },
          {
            "name": "heure_evisceration_derniere_carcasse",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$",
              "example": "12:00"
            },
            "description": "Heure d'éviscération de la dernière carcasse (format: HH:mm)"
          },
          {
            "name": "carcasse",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[^,]+,[^,]+(,[^,]*)?$",
                "example": "FR123456789,Sanglier,1"
              }
            },
            "description": "Carcasses à créer automatiquement. Format: numero_bracelet,espece[,nombre_d_animaux]. Le nombre_d_animaux est optionnel (défaut: 1). Répétez le paramètre pour plusieurs carcasses.",
            "examples": {
              "single": {
                "summary": "Une seule carcasse",
                "value": ["FR123456789,Sanglier,1"]
              },
              "multiple": {
                "summary": "Plusieurs carcasses",
                "value": ["FR123456789,Sanglier,1", "FR987654321,Cerf,2", "FR555666777,Chevreuil"]
              }
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirection vers la FEI créée - L'utilisateur est redirigé vers /app/tableau-de-bord/fei/{numero_fei}"
          },
          "200": {
            "description": "Page d'erreur affichée si les paramètres sont invalides ou si l'authentification échoue",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "description": "Page HTML d'erreur avec message explicatif"
                }
              }
            }
          }
        },
        "tags": ["Intégration Frontend - Accès Tiers"],
        "security": []
      }
    },
    "/fei/user": {
      "get": {
        "summary": "Récupérer les FEI d'un utilisateur",
        "description": "Récupère toutes les fiches d'examen initial d'un utilisateur dans une plage de dates donnée (nécessite l'email de l'utilisateur et son consentement préalable). Cette route permet aux applications tierces d'accéder aux données d'un utilisateur qui a donné son accord.",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "example": "2025-09-17"
            },
            "description": "Date de début (format: AAAA-MM-JJ)"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "example": "2025-09-20"
            },
            "description": "Date de fin (format: AAAA-MM-JJ)"
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email",
              "example": "utilisateur@example.com"
            },
            "description": "Email de l'utilisateur dont vous voulez accéder aux données (consentement requis)"
          }
        ],
        "responses": {
          "200": {
            "description": "Succès - Liste des FEI récupérées",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Erreur de paramètres - Format de date invalide, paramètres manquants ou email invalide",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Accès interdit - Clé API invalide, utilisateur non autorisé ou pas de consentement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["FEI - Accès Tiers"]
      }
    },
    "/carcasse/user/{date_mise_a_mort}/{numero_bracelet}": {
      "get": {
        "summary": "Récupérer une carcasse pour un utilisateur",
        "description": "Récupère une carcasse spécifique au nom d'un utilisateur (nécessite l'email de l'utilisateur et son consentement préalable). Cette route permet aux applications tierces d'accéder aux données d'un utilisateur qui a donné son accord.",
        "parameters": [
          {
            "name": "date_mise_a_mort",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "example": "2025-09-17"
            },
            "description": "Date de mise à mort (format: AAAA-MM-JJ)"
          },
          {
            "name": "numero_bracelet",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "FR123456789"
            },
            "description": "Numéro de bracelet de la carcasse"
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email",
              "example": "utilisateur@example.com"
            },
            "description": "Email de l'utilisateur dont vous voulez accéder aux données (consentement requis)"
          }
        ],
        "responses": {
          "200": {
            "description": "Succès - Carcasse trouvée et accessible",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarcasseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Erreur de paramètres - Format invalide ou email manquant",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Accès interdit - Clé API invalide, utilisateur non autorisé ou pas de consentement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Carcasse non trouvée ou utilisateur n'a pas accès à cette carcasse",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Carcasses - Accès Tiers"]
      }
    },
    "/carcasse/user": {
      "get": {
        "summary": "Récupérer les carcasses d'un utilisateur",
        "description": "Récupère toutes les carcasses d'un utilisateur dans une plage de dates donnée (nécessite l'email de l'utilisateur et son consentement préalable). Cette route permet aux applications tierces d'accéder aux données d'un utilisateur qui a donné son accord.",
        "parameters": [
          {
            "name": "date_from",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "example": "2025-09-17"
            },
            "description": "Date de début (format: AAAA-MM-JJ)"
          },
          {
            "name": "date_to",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^\\d{4}-\\d{2}-\\d{2}$",
              "example": "2025-09-20"
            },
            "description": "Date de fin (format: AAAA-MM-JJ)"
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email",
              "example": "utilisateur@example.com"
            },
            "description": "Email de l'utilisateur dont vous voulez accéder aux données (consentement requis)"
          }
        ],
        "responses": {
          "200": {
            "description": "Succès - Liste des carcasses récupérées",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CarcassesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Erreur de paramètres - Format de date invalide, paramètres manquants ou email invalide",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Accès interdit - Clé API invalide, utilisateur non autorisé ou pas de consentement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "tags": ["Carcasses - Accès Tiers"]
      }
    },
    "/webhooks/votre-endpoint": {
      "post": {
        "summary": "Endpoint webhook à implémenter côté client",
        "description": "**Cet endpoint doit être implémenté par votre application** pour recevoir les notifications en temps réel des événements Zacharie concernant les utilisateurs qui vous ont donné leur consentement. L'URL de cet endpoint doit être configurée dans votre clé API via le champ `webhook_url`.\n\n**Important:** Vous ne recevrez que les événements des utilisateurs qui ont approuvé votre accès à leurs données.\n\n**Configuration:** Ajoutez l'URL de votre endpoint dans votre clé API.\n\n**Sécurité:** Zacharie enverra un header `Authorization: Bearer {votre_cle_api}` pour authentifier les requêtes.\n\n**Événements disponibles:**\n- `FEI_APPROBATION_MISE_SUR_LE_MARCHE`: L'examinateur initial a approuvé la mise sur le marché\n- `FEI_ASSIGNEE_AU_PROCHAIN_DETENTEUR`: La FEI a été assignée au prochain détenteur\n- `FEI_ASSIGNEE_AU_SVI`: La FEI a été assignée au Service Vétérinaire d'Inspection\n- `FEI_PRISE_EN_CHARGE_PAR_PROCHAIN_DETENTEUR`: Le prochain détenteur a pris en charge la FEI\n- `FEI_CLOTUREE`: La FEI a été clôturée\n\n**Exemple d'implémentation:**\n```javascript\napp.post('/webhooks/zacharie', (req, res) => {\n  // Vérifier l'authentification\n  const authHeader = req.headers.authorization;\n  if (!authHeader?.startsWith('Bearer ')) {\n    return res.status(401).json({ ok: false });\n  }\n  \n  const token = authHeader.split(' ')[1];\n  if (token !== process.env.ZACHARIE_API_KEY) {\n    return res.status(403).json({ ok: false });\n  }\n  \n  // Traiter le webhook\n  const { event, fei, carcasses } = req.body;\n  console.log(`Événement: ${event}`, { fei, carcasses });\n  \n  // Votre logique métier ici\n  \n  res.json({ ok: true });\n});\n```",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook traité avec succès - Zacharie considérera la notification comme livrée",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Erreur de validation du payload",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentification échouée - Token Bearer invalide"
          },
          "403": {
            "description": "Accès interdit - Clé API invalide"
          },
          "500": {
            "description": "Erreur serveur lors du traitement du webhook"
          }
        },
        "security": [
          {
            "WebhookAuth": []
          }
        ],
        "tags": ["Webhooks - Accès Tiers"]
      }
    }
  }
}
