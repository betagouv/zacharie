generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_ADDON_URI")
}

// Tous les rôles possibles pour un utilisateur au contact de la venaison (gibier)
enum UserRoles {
  ADMIN
  EXAMINATEUR_INITIAL
  PREMIER_DETENTEUR // un chasseur, une association de chasse, une structure professionnelle de chasse qui se charge d'indiquer le destinataire final du gibier
  CCG // Centre de Collecte du Gibier sauvage où sont entreposées les venaisons à la fin de la chasse
  COLLECTEUR_PRO // Transporteur de Gibier
  //Destinataires finaux du gibier
  ETG // Etablissement de Traitement du Gibier sauvage
  SVI // Service Vétérinaire d'Inspection
  // COMMERCE_DE_DETAIL // Commerce de détail
  // REPAS_DE_CHASSE_OU_ASSOCIATIF // Repas de chasse ou associatif
  // CONSOMMATEUR_FINAL // Je chasse pour ma consommation personnelle
  // BOUCHER
  // RESTAURATEUR
}

enum UserNotifications {
  EMAIL
  SMS
  PUSH
}

model User {
  id                             String                   @id // new ShortUniqueId({ length: 5, dictionary: "alphanum_upper" }).randomUUID() so that we can use it in FEI numbers (36^5 = 60M possibilities)
  email                          String?                  @unique // email is optional, we can have users without email like the Collecteur Pro
  telephone                      String?
  prenom                         String?
  nom_de_famille                 String?
  numero_cfei                    String? // Chasseur Formé à l'Examen Initial (de la forme CFEI-DEP-YY-001)
  prochain_bracelet_a_utiliser   Int?                     @default(1)
  addresse_ligne_1               String?
  addresse_ligne_2               String?
  code_postal                    String?
  ville                          String?
  user_entities_vivible_checkbox Boolean?
  roles                          UserRoles[]
  created_at                     DateTime                 @default(now())
  updated_at                     DateTime                 @default(now()) @updatedAt
  last_login_at                  DateTime?
  last_seen_at                   DateTime?
  deleted_at                     DateTime?
  onboarded_at                   DateTime?
  notifications                  UserNotifications[]      @default([EMAIL, PUSH])
  web_push_tokens                String[]
  prefilled                      Boolean                  @default(false)
  activated                      Boolean                  @default(false)
  activated_at                   DateTime?
  is_synced                      Boolean                  @default(true) // just for typing purppose with zustand frontend
  brevo_contact_id               Int?
  at_least_one_fei_treated       DateTime?
  Password                       Password?
  UserRelationsAsOwner           UserRelations[]          @relation("UserOwnerOfUserRelation")
  UserRelationsAsRelated         UserRelations[]          @relation("UserRelatedOfUserRelation")
  EntityAndUserRelations         EntityAndUserRelations[] @relation("UserRelatedWithEntity")
  FeiCreatedByUser               Fei[]                    @relation("FeiCreatedByUser")
  FeiCurrentUser                 Fei[]                    @relation("FeiCurrentUser")
  FeiPremierDetenteurUser        Fei[]                    @relation("FeiPremierDetenteurUser")
  FeiExaminateurInitialUser      Fei[]                    @relation("FeiExaminateurInitialUser")
  FeiSviUser                     Fei[]                    @relation("FeiSviUser")
  FeiSviUserClosedBy             Fei[]                    @relation("FeiSviUserClosedBy")
  Logs                           Log[]
  NotificationLog                NotificationLog[]
  CarcasseIntermediaire          CarcasseIntermediaire[]  @relation("CarcasseIntermediaireUser")
  FeiNextUser                    Fei[]                    @relation("FeiNextUser")
  CarcassesIpm1                  Carcasse[]               @relation("SviIpm1User")

  @@index([id])
  @@index([email])
  @@index([onboarded_at])
  @@index([roles])
  @@index([updated_at])
  @@index([last_seen_at])
  @@index([roles, updated_at])
}

enum EntityTypes {
  PREMIER_DETENTEUR
  COLLECTEUR_PRO
  CCG
  ETG
  SVI
  // COMMERCE_DE_DETAIL
  // REPAS_DE_CHASSE_OU_ASSOCIATIF
  // BOUCHER
  // RESTAURATEUR
}

model Entity {
  id                              String                   @id @default(uuid())
  // NO EMAIL: an entity needs AT LEAST one user
  raison_sociale                  String?
  nom_d_usage                     String?
  address_ligne_1                 String?
  address_ligne_2                 String?
  code_postal                     String?
  ville                           String?
  siret                           String?
  nom_prenom_responsable          String?
  prefecture_svi                  String?
  ccg_status                      String?
  zacharie_compatible             Boolean                  @default(false)
  numero_ddecpp                   String?                  @unique
  inc_certificat                  Int?                     @default(0)
  inc_decision                    Int?                     @default(0)
  code_etbt_certificat            String?                  @unique // Il pourrait s'agir d'un code court unique qui identifie l’établissement (exemple : 01 pour Villette viandes, 02 pour Nemrod et 03 pour Guellier).
  type                            EntityTypes
  created_at                      DateTime                 @default(now())
  updated_at                      DateTime                 @default(now()) @updatedAt
  deleted_at                      DateTime?
  onboarded_at                    DateTime?
  prefilled                       Boolean                  @default(false)
  is_synced                       Boolean                  @default(true) // just for typing purppose with zustand frontend
  for_testing                     Boolean                  @default(false)
  // for brevo
  brevo_id                        String?
  at_least_one_fei_treated        DateTime?
  // relations
  EntityRelationsWithUsers        EntityAndUserRelations[] @relation("EntityRelatedWithUser")
  FeisCurrentEntity               Fei[]                    @relation("FeiCurrentEntity")
  FeisNextEntity                  Fei[]                    @relation("FeiNextEntity")
  FeisDepotEntity                 Fei[]                    @relation("FeiDepotEntity")
  FeisPremierDetenteurEntity      Fei[]                    @relation("FeiPremierDetenteurEntity")
  FeisSviEntity                   Fei[]                    @relation("FeiSviEntity")
  CarcasseIntermediaires          CarcasseIntermediaire[]  @relation("CarcasseIntermediaireEntity")
  AsEtgRelationsWithOtherEntities ETGAndEntityRelations[]  @relation("ETGRelatedWithEntity")
  RelationsWithEtgs               ETGAndEntityRelations[]  @relation("EntityRelatedWithETG")
  Logs                            Log[]

  @@index([updated_at]) // Time-based ordering
  @@index([nom_d_usage]) // Name-based ordering
  @@index([type, zacharie_compatible, nom_d_usage]) // Admin entities sorting (exact pattern)
  @@index([for_testing, updated_at]) // User entities filtering + ordering
  @@index([type, updated_at]) // Type filtering + time ordering
}

model Password {
  // cascade delete
  id                                String    @id @default(uuid())
  user_id                           String    @unique
  password                          String
  reset_password_last_email_sent_at DateTime?
  reset_password_token              String?
  created_at                        DateTime  @default(now())
  updated_at                        DateTime  @default(now()) @updatedAt
  deleted_at                        DateTime?
  User                              User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([user_id])
}

enum UserRelationType {
  PREMIER_DETENTEUR // un examinateur (owner_id) envoie une fiche à un premier détenteur potentiel (related_id)
  EXAMINATEUR_INITIAL // a user working with this relation as an examinateur initial
}

model UserRelations {
  id                        String           @id @default(uuid())
  owner_id                  String
  related_id                String
  relation                  UserRelationType
  created_at                DateTime         @default(now())
  updated_at                DateTime         @default(now()) @updatedAt
  deleted_at                DateTime?
  is_synced                 Boolean          @default(true) // just for typing purppose with zustand frontend
  UserOwnerOfUserRelation   User             @relation("UserOwnerOfUserRelation", fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserRelatedOfUserRelation User             @relation("UserRelatedOfUserRelation", fields: [related_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([owner_id, relation])
}

enum EntityRelationType {
  CAN_TRANSMIT_CARCASSES_TO_ENTITY // a user can send carcasses to the entity
  CAN_HANDLE_CARCASSES_ON_BEHALF_ENTITY // a user can receive carcasses on behalf of the entity
  // the next two fields are not used in DB but are deducted from the DB
  // they are useful within the app after DB is fetched
  WORKING_FOR_ENTITY_RELATED_WITH // a user working for the entity related with the entity
  NONE // a user is not related with the entity
}

model EntityAndUserRelations {
  id                    String             @id @default(uuid())
  owner_id              String
  entity_id             String
  relation              EntityRelationType
  brevo_id              String?
  created_at            DateTime           @default(now())
  updated_at            DateTime           @default(now()) @updatedAt
  deleted_at            DateTime?
  is_synced             Boolean            @default(true) // just for typing purppose with zustand frontend
  UserRelatedWithEntity User               @relation("UserRelatedWithEntity", fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  EntityRelatedWithUser Entity             @relation("EntityRelatedWithUser", fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([owner_id, relation])
  @@index([entity_id, relation])
  @@index([owner_id, entity_id]) // Add: Used in nested queries for FeiNextEntity
  @@index([owner_id, updated_at])
}

model ETGAndEntityRelations {
  etg_id_entity_id     String      @id @default(uuid())
  etg_id               String
  entity_id            String
  entity_type          EntityTypes
  created_at           DateTime    @default(now())
  updated_at           DateTime    @default(now()) @updatedAt
  deleted_at           DateTime?
  brevo_id             String?
  is_synced            Boolean     @default(true) // just for typing purppose with zustand frontend
  ETGRelatedWithEntity Entity      @relation("ETGRelatedWithEntity", fields: [etg_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  EntityRelatedWithETG Entity      @relation("EntityRelatedWithETG", fields: [entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([etg_id, entity_type])
  @@index([entity_id, entity_type])
  @@index([etg_id, updated_at])
  @@index([entity_id, updated_at])
}

model Log {
  id                        String    @id @default(uuid())
  user_id                   String?
  user_role                 UserRoles
  fei_numero                String?
  entity_id                 String?
  zacharie_carcasse_id      String?
  fei_intermediaire_id      String? // TO DELETE
  intermediaire_id          String? // replace fei_intermediaire_id
  carcasse_intermediaire_id String?
  action                    String // login, logout, password_change, user_update, user_create, user_delete, fei_created, etc
  history                   Json? // before, after, diff
  date                      DateTime?
  created_at                DateTime  @default(now())
  updated_at                DateTime  @default(now()) @updatedAt
  deleted_at                DateTime?
  is_synced                 Boolean   @default(true) // just for typing purppose with zustand frontend
  User                      User?     @relation(fields: [user_id], references: [id], onDelete: SetNull)
  Entity                    Entity?   @relation(fields: [entity_id], references: [id], onDelete: SetNull)
  Carcasse                  Carcasse? @relation(fields: [zacharie_carcasse_id], references: [zacharie_carcasse_id], onDelete: SetNull)
  Fei                       Fei?      @relation(fields: [fei_numero], references: [numero], onDelete: SetNull)
  // CarcasseIntermediaire     CarcasseIntermediaire? @relation(fields: [carcasse_intermediaire_id], references: [id], onDelete: NoAction)

  @@index([user_id, action])
}

enum DepotType {
  CCG
  ETG
  AUCUN
}

enum TransportType {
  PREMIER_DETENTEUR
  ETG
  COLLECTEUR_PRO
  AUCUN
}

// Fiche d'Examen Initial
model Fei {
  id                                                      Int                     @id @default(autoincrement())
  /**
  * metadata
  */
  numero                                                  String                  @unique
  date_mise_a_mort                                        DateTime?               @db.Date // et éviscération
  commune_mise_a_mort                                     String?
  heure_mise_a_mort_premiere_carcasse                     String?
  heure_evisceration_derniere_carcasse                    String?
  created_by_user_id                                      String
  resume_nombre_de_carcasses                              String?
  automatic_closed_at                                     DateTime?
  /**
  * examinateur initial
  */
  examinateur_initial_offline                             Boolean? // was the examinateur initial offline when the fei was created
  examinateur_initial_user_id                             String?
  examinateur_initial_approbation_mise_sur_le_marche      Boolean?
  examinateur_initial_date_approbation_mise_sur_le_marche DateTime?
  /**
  * premier detenteur
  */
  premier_detenteur_offline                               Boolean? // was the premier detenteur offline when the fei was completed
  premier_detenteur_user_id                               String?
  premier_detenteur_entity_id                             String?
  premier_detenteur_name_cache                            String?
  premier_detenteur_depot_type                            DepotType? // CCG, ETG, AUCUN
  premier_detenteur_depot_entity_id                       String?
  premier_detenteur_depot_ccg_at                          DateTime?
  premier_detenteur_transport_type                        TransportType?
  premier_detenteur_transport_date                        DateTime?
  premier_detenteur_prochain_detenteur_type_cache         EntityTypes?
  premier_detenteur_prochain_detenteur_id_cache           String? // Entity id
  /**
  * intermediaire
  */
  intermediaire_closed_at                                 DateTime? // si toutes les carcasses sont rejetées/manquantes
  intermediaire_closed_by_user_id                         String?
  intermediaire_closed_by_entity_id                       String?
  /**
  * svi
  */
  svi_assigned_at                                         DateTime?
  svi_entity_id                                           String?
  svi_user_id                                             String?
  svi_closed_at                                           DateTime?
  svi_closed_by_user_id                                   String?
  /**
  * owners
  */
  fei_current_owner_user_id                               String?
  fei_current_owner_user_name_cache                       String?
  fei_current_owner_entity_id                             String?
  fei_current_owner_entity_name_cache                     String?
  fei_current_owner_role                                  UserRoles?
  fei_current_owner_wants_to_transfer                     Boolean?
  fei_next_owner_user_id                                  String?
  fei_next_owner_user_name_cache                          String?
  fei_next_owner_entity_id                                String?
  fei_next_owner_entity_name_cache                        String?
  fei_next_owner_role                                     UserRoles?
  fei_prev_owner_user_id                                  String?
  fei_prev_owner_entity_id                                String?
  fei_prev_owner_role                                     UserRoles?
  /**
  * owners
  */
  created_at                                              DateTime                @default(now())
  updated_at                                              DateTime                @default(now()) @updatedAt
  deleted_at                                              DateTime?
  is_synced                                               Boolean                 @default(true)
  /**
  * relations
  */
  Carcasses                                               Carcasse[]
  FeiCreatedByUser                                        User                    @relation("FeiCreatedByUser", fields: [created_by_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiPremierDetenteurUser                                 User?                   @relation("FeiPremierDetenteurUser", fields: [premier_detenteur_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiPremierDetenteurEntity                               Entity?                 @relation("FeiPremierDetenteurEntity", fields: [premier_detenteur_entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiExaminateurInitialUser                               User?                   @relation("FeiExaminateurInitialUser", fields: [examinateur_initial_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiDepotEntity                                          Entity?                 @relation("FeiDepotEntity", fields: [premier_detenteur_depot_entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiSviEntity                                            Entity?                 @relation("FeiSviEntity", fields: [svi_entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiSviUser                                              User?                   @relation("FeiSviUser", fields: [svi_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiSviUserClosedBy                                      User?                   @relation("FeiSviUserClosedBy", fields: [svi_closed_by_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiCurrentUser                                          User?                   @relation("FeiCurrentUser", fields: [fei_current_owner_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiCurrentEntity                                        Entity?                 @relation("FeiCurrentEntity", fields: [fei_current_owner_entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiNextEntity                                           Entity?                 @relation("FeiNextEntity", fields: [fei_next_owner_entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  FeiNextUser                                             User?                   @relation("FeiNextUser", fields: [fei_next_owner_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CarcasseIntermediaire                                   CarcasseIntermediaire[]
  Logs                                                    Log[]

  @@index([created_by_user_id])
  @@index([premier_detenteur_user_id])
  @@index([examinateur_initial_user_id])
  @@index([svi_closed_at])
  @@index([fei_next_owner_user_id])
  @@index([fei_next_owner_entity_id])
  @@index([fei_current_owner_user_id])
  @@index([fei_current_owner_entity_id])
  @@index([updated_at])
  @@index([svi_assigned_at])
  @@index([svi_entity_id, svi_assigned_at])
  @@index([automatic_closed_at, svi_closed_at, svi_assigned_at])
  @@index([deleted_at, created_at])
}

enum CarcasseType {
  PETIT_GIBIER
  GROS_GIBIER
}

enum CarcasseStatus {
  MANQUANTE_ETG_COLLECTEUR
  REFUS_ETG_COLLECTEUR
  SANS_DECISION
  ACCEPTE
  CONSIGNE
  MANQUANTE_SVI
  SAISIE_TOTALE
  SAISIE_PARTIELLE
  LEVEE_DE_CONSIGNE
  TRAITEMENT_ASSAINISSANT
}

enum IPM1Protocole {
  STANDARD
  RENFORCE
}

enum IPM1Decision {
  NON_RENSEIGNEE
  MISE_EN_CONSIGNE
}

enum IPM2Decision {
  NON_RENSEIGNEE
  LEVEE_DE_LA_CONSIGNE
  SAISIE_TOTALE
  SAISIE_PARTIELLE
  TRAITEMENT_ASSAINISSANT
}

enum IPM2Traitement {
  CUISSON
  CONGELATION
  AUTRE
}

model Carcasse {
  zacharie_carcasse_id                               String                  @id // {fei_numero}_{numero_bracelet}
  numero_bracelet                                    String // bracelet is not unique in all France, that's why we need the zacharie_carcasse_id
  fei_numero                                         String
  espece                                             String? // Sanglier, Cerf, etc.
  type                                               CarcasseType?
  nombre_d_animaux                                   Int?
  heure_mise_a_mort                                  String?
  heure_evisceration                                 String?
  /**
  * EXAMINATEUR
  */
  examinateur_carcasse_sans_anomalie                 Boolean?
  examinateur_anomalies_carcasse                     String[]
  examinateur_anomalies_abats                        String[]
  examinateur_commentaire                            String?
  examinateur_signed_at                              DateTime?
  /**
  * PREMIER DETENTEUR
  * duplicatas des champs de Fei
  * anticipation des circuits courts où on pourra envoyer des carcasses éparpillées, d'un même examen initial,
  */
  premier_detenteur_depot_type                       DepotType? // CCG, ETG, AUCUN
  premier_detenteur_depot_entity_id                  String?
  premier_detenteur_depot_ccg_at                     DateTime?
  premier_detenteur_transport_type                   TransportType?
  premier_detenteur_transport_date                   DateTime?
  premier_detenteur_prochain_detenteur_type_cache    EntityTypes?
  premier_detenteur_prochain_detenteur_id_cache      String? // Entity id
  /**
  * INTERMEDIAIRE
  */
  intermediaire_carcasse_refus_intermediaire_id      String?
  intermediaire_carcasse_refus_motif                 String?
  intermediaire_carcasse_manquante                   Boolean?
  latest_intermediaire_signed_at                     DateTime?
  /**
  * SVI
  */
  svi_assigned_to_fei_at                             DateTime? // same as svi_assigned_at in fei
  svi_carcasse_commentaire                           String? // cache of ipm1 and ipm2 comments
  svi_carcasse_status                                CarcasseStatus?
  svi_carcasse_status_set_at                         DateTime?
  /**
  * SVI IPM1
  */
  svi_ipm1_date                                      DateTime?
  svi_ipm1_presentee_inspection                      Boolean?
  svi_ipm1_user_id                                   String?
  svi_ipm1_user_name_cache                           String?
  svi_ipm1_protocole                                 IPM1Protocole? // standard (default)
  svi_ipm1_pieces                                    String[]
  svi_ipm1_lesions_ou_motifs                         String[]
  svi_ipm1_nombre_animaux                            Int?
  svi_ipm1_commentaire                               String?
  svi_ipm1_decision                                  IPM1Decision? // "Non renseigné" | "Mise en consigne"
  svi_ipm1_duree_consigne                            Int? // en heures
  svi_ipm1_poids_consigne                            Float? // en kg
  svi_ipm1_signed_at                                 DateTime?
  /**
  * SVI IPM2
  */
  svi_ipm2_date                                      DateTime?
  svi_ipm2_presentee_inspection                      Boolean?
  svi_ipm2_user_id                                   String?
  svi_ipm2_user_name_cache                           String?
  svi_ipm2_protocole                                 IPM1Protocole? // standard (default)
  svi_ipm2_pieces                                    String[]
  svi_ipm2_lesions_ou_motifs                         String[]
  svi_ipm2_nombre_animaux                            Int?
  svi_ipm2_commentaire                               String?
  svi_ipm2_decision                                  IPM2Decision? // "Non renseigné" | "Mise en consigne"
  svi_ipm2_traitement_assainissant                   IPM2Traitement[]
  svi_ipm2_traitement_assainissant_cuisson_temps     String?
  svi_ipm2_traitement_assainissant_cuisson_temp      String?
  svi_ipm2_traitement_assainissant_congelation_temps String?
  svi_ipm2_traitement_assainissant_congelation_temp  String?
  svi_ipm2_traitement_assainissant_type              String?
  svi_ipm2_traitement_assainissant_paramètres       String?
  svi_ipm2_traitement_assainissant_etablissement     String?
  svi_ipm2_traitement_assainissant_poids             Float?
  svi_ipm2_poids_saisie                              Float?
  svi_ipm2_signed_at                                 DateTime?
  // technical fields
  created_at                                         DateTime                @default(now())
  updated_at                                         DateTime                @default(now()) @updatedAt
  deleted_at                                         DateTime?
  is_synced                                          Boolean                 @default(true)
  Fei                                                Fei                     @relation(fields: [fei_numero], references: [numero], onDelete: Cascade, onUpdate: Cascade)
  CarcasseIntermediaire                              CarcasseIntermediaire[]
  Logs                                               Log[]
  SviIpm1User                                        User?                   @relation("SviIpm1User", fields: [svi_ipm1_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CarcasseCertificats                                CarcasseCertificat[]

  @@index([fei_numero, numero_bracelet])
  @@index([deleted_at, created_at])
  @@index([numero_bracelet])
  @@index([deleted_at, updated_at])
  @@index([intermediaire_carcasse_refus_intermediaire_id])
  @@index([intermediaire_carcasse_manquante])
}

enum CarcasseCertificatType {
  CC // Certificat de consigne
  CSP // Certificat de saisie partielle
  CST // Certificat de saisie totale
  LC // Certificat de levée de consigne
  LPS // Certificat de laisser passer sanitaire
}

model CarcasseCertificat {
  certificat_id                         String                  @id // {inc_certificat}-{type-notification}-{code_etbt_certificat}
  zacharie_carcasse_id                  String
  remplace_certificat_id                String?
  numero_decision                       String?
  numero_decision_ipm1                  String?
  type                                  CarcasseCertificatType?
  prefecture_svi                        String?
  commune_etg                           String?
  date_consigne                         String?
  lieu_consigne                         String?
  nom_etg_personne_physique             String?
  nom_etg_personne_morale               String?
  siret_etg                             String?
  traitement_assainissant_etablissement String?
  traitement_type                       String?
  traitement_parametre                  String?
  fei_numero                            String?
  numero_bracelet                       String?
  espece                                String?
  carcasse_type                         CarcasseType?
  nombre_d_animaux                      Int?
  date_mise_a_mort                      String?
  commune_mise_a_mort                   String?
  examinateur_initial                   String?
  premier_detenteur                     String?
  collecteur_pro                        String?
  pieces                                String[]
  motifs                                String[]
  commentaire                           String?
  poids                                 Float?
  svi_ipm1_signed_at                    DateTime?
  svi_ipm2_signed_at                    DateTime?
  duree_consigne                        Int?
  created_at                            DateTime                @default(now())
  updated_at                            DateTime                @default(now()) @updatedAt
  Carcasse                              Carcasse                @relation(fields: [zacharie_carcasse_id], references: [zacharie_carcasse_id], onDelete: Cascade, onUpdate: Cascade)

  @@index([zacharie_carcasse_id])
}

model CarcasseIntermediaire {
  fei_numero                                  String
  numero_bracelet                             String
  zacharie_carcasse_id                        String
  prise_en_charge                             Boolean?
  check_manuel                                Boolean?
  manquante                                   Boolean?
  refus                                       String?
  commentaire                                 String?
  /**
  * new fields
  */
  decision_at                                 DateTime? // replace carcasse_check_finished_at
  prise_en_charge_at                          DateTime? // FeiIntermediaire.check_finished_at
  intermediaire_id                            String // {user_id}_{fei_numero}_{HHMMSS} // because a user could be multiple times intermediaire for a same fei
  intermediaire_entity_id                     String
  intermediaire_role                          UserRoles? // FeiIntermediaire.fei_intermediaire_role
  intermediaire_user_id                       String
  intermediaire_depot_type                    DepotType? // CCG, ETG, AUCUN
  intermediaire_depot_entity_id               String?
  intermediaire_prochain_detenteur_type_cache EntityTypes?
  intermediaire_prochain_detenteur_id_cache   String?
  /**
  * fields from FeiIntermediaire
  */
  /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * /**
  * end of fields from FeiIntermediaire
  */
  created_at                                  DateTime     @default(now())
  updated_at                                  DateTime     @default(now()) @updatedAt
  deleted_at                                  DateTime?
  is_synced                                   Boolean      @default(true) // just for typing purppose with zustand frontend
  CarcasseIntermediaireFei                    Fei          @relation(fields: [fei_numero], references: [numero], onDelete: Cascade, onUpdate: Cascade)
  CarcasseCarcasseIntermediaire               Carcasse     @relation(fields: [zacharie_carcasse_id], references: [zacharie_carcasse_id], onDelete: Cascade, onUpdate: Cascade)
  CarcasseIntermediaireUser                   User         @relation("CarcasseIntermediaireUser", fields: [intermediaire_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CarcasseIntermediaireEntity                 Entity       @relation("CarcasseIntermediaireEntity", fields: [intermediaire_entity_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // Logs                                   Log[]

  @@unique([fei_numero, zacharie_carcasse_id, intermediaire_id])
  @@index([commentaire])
  @@index([created_at])
  @@index([intermediaire_entity_id])
  @@index([intermediaire_user_id])
  @@index([fei_numero, created_at])
}

model NotificationLog {
  id             String            @id @default(uuid())
  type           UserNotifications
  email          String?
  web_push_token String?
  user_id        String?
  action         String
  payload        String
  created_at     DateTime          @default(now())
  updated_at     DateTime          @default(now()) @updatedAt
  deleted_at     DateTime?
  User           User?             @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([user_id, action])
}

model CronJob {
  id         String   @id @default(uuid())
  unique_key String   @unique
  name       String
  active     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt
}
